/*
Endpoint Tests API

 Manage endpoint agent dynamic and scheduled tests using the Endpoint Tests API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EndpointHttpTestUpdate type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointHttpTestUpdate{}

// EndpointHttpTestUpdate struct for EndpointHttpTestUpdate
type EndpointHttpTestUpdate struct {
	Interval *TestInterval `json:"interval,omitempty"`
	// Name of the test.
	TestName *string `json:"testName,omitempty"`
	Protocol *EndpointTestProtocol `json:"protocol,omitempty"`
	// Indicates if test is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	TcpProbeMode *TestProbeMode `json:"tcpProbeMode,omitempty"`
	// The test target URL. You can optionally specify the protocol (`http` or `https`).   - **Default Protocol:** If no protocol is specified, `https` is used by default.  - **Port Number:** To specify a port, append it to the URL with a colon after the hostname or IP address (e.g., `https://example.com:443`).      - If no port is specified in the URL, the `port` is determined by the default for protocol (HTTP: 80, HTTPS: 443). 
	Url *string `json:"url,omitempty"`
}

// NewEndpointHttpTestUpdate instantiates a new EndpointHttpTestUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointHttpTestUpdate() *EndpointHttpTestUpdate {
	this := EndpointHttpTestUpdate{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	var tcpProbeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	return &this
}

// NewEndpointHttpTestUpdateWithDefaults instantiates a new EndpointHttpTestUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointHttpTestUpdateWithDefaults() *EndpointHttpTestUpdate {
	this := EndpointHttpTestUpdate{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	var tcpProbeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *EndpointHttpTestUpdate) GetInterval() TestInterval {
	if o == nil || utils.IsNil(o.Interval) {
		var ret TestInterval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpTestUpdate) GetIntervalOk() (*TestInterval, bool) {
	if o == nil || utils.IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *EndpointHttpTestUpdate) HasInterval() bool {
	if o != nil && !utils.IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given TestInterval and assigns it to the Interval field.
func (o *EndpointHttpTestUpdate) SetInterval(v TestInterval) {
	o.Interval = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *EndpointHttpTestUpdate) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpTestUpdate) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *EndpointHttpTestUpdate) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *EndpointHttpTestUpdate) SetTestName(v string) {
	o.TestName = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *EndpointHttpTestUpdate) GetProtocol() EndpointTestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpTestUpdate) GetProtocolOk() (*EndpointTestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *EndpointHttpTestUpdate) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestProtocol and assigns it to the Protocol field.
func (o *EndpointHttpTestUpdate) SetProtocol(v EndpointTestProtocol) {
	o.Protocol = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *EndpointHttpTestUpdate) GetIsEnabled() bool {
	if o == nil || utils.IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpTestUpdate) GetIsEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *EndpointHttpTestUpdate) HasIsEnabled() bool {
	if o != nil && !utils.IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *EndpointHttpTestUpdate) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetTcpProbeMode returns the TcpProbeMode field value if set, zero value otherwise.
func (o *EndpointHttpTestUpdate) GetTcpProbeMode() TestProbeMode {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		var ret TestProbeMode
		return ret
	}
	return *o.TcpProbeMode
}

// GetTcpProbeModeOk returns a tuple with the TcpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpTestUpdate) GetTcpProbeModeOk() (*TestProbeMode, bool) {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		return nil, false
	}
	return o.TcpProbeMode, true
}

// HasTcpProbeMode returns a boolean if a field has been set.
func (o *EndpointHttpTestUpdate) HasTcpProbeMode() bool {
	if o != nil && !utils.IsNil(o.TcpProbeMode) {
		return true
	}

	return false
}

// SetTcpProbeMode gets a reference to the given TestProbeMode and assigns it to the TcpProbeMode field.
func (o *EndpointHttpTestUpdate) SetTcpProbeMode(v TestProbeMode) {
	o.TcpProbeMode = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *EndpointHttpTestUpdate) GetUrl() string {
	if o == nil || utils.IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpTestUpdate) GetUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EndpointHttpTestUpdate) HasUrl() bool {
	if o != nil && !utils.IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *EndpointHttpTestUpdate) SetUrl(v string) {
	o.Url = &v
}

func (o EndpointHttpTestUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointHttpTestUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !utils.IsNil(o.TcpProbeMode) {
		toSerialize["tcpProbeMode"] = o.TcpProbeMode
	}
	if !utils.IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableEndpointHttpTestUpdate struct {
	value *EndpointHttpTestUpdate
	isSet bool
}

func (v NullableEndpointHttpTestUpdate) Get() *EndpointHttpTestUpdate {
	return v.value
}

func (v *NullableEndpointHttpTestUpdate) Set(val *EndpointHttpTestUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointHttpTestUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointHttpTestUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointHttpTestUpdate(val *EndpointHttpTestUpdate) *NullableEndpointHttpTestUpdate {
	return &NullableEndpointHttpTestUpdate{value: val, isSet: true}
}

func (v NullableEndpointHttpTestUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointHttpTestUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


