/*
Endpoint Tests API

 Manage endpoint agent dynamic and scheduled tests using the Endpoint Tests API. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtests

import (
	"encoding/json"
	"fmt"
)

// EndpointTestAuthType HTTP authentication type.
type EndpointTestAuthType string

// List of EndpointTestAuthType
const (
	ENDPOINTTESTAUTHTYPE_NONE EndpointTestAuthType = "none"
	ENDPOINTTESTAUTHTYPE_BASIC EndpointTestAuthType = "basic"
	ENDPOINTTESTAUTHTYPE_NTLM EndpointTestAuthType = "ntlm"
)

// All allowed values of EndpointTestAuthType enum
var AllowedEndpointTestAuthTypeEnumValues = []EndpointTestAuthType{
	"none",
	"basic",
	"ntlm",
}

func (v *EndpointTestAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointTestAuthType(value)
	for _, existing := range AllowedEndpointTestAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointTestAuthType", value)
}

// NewEndpointTestAuthTypeFromValue returns a pointer to a valid EndpointTestAuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTestAuthTypeFromValue(v string) (*EndpointTestAuthType, error) {
	ev := EndpointTestAuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointTestAuthType: valid values are %v", v, AllowedEndpointTestAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointTestAuthType) IsValid() bool {
	for _, existing := range AllowedEndpointTestAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointTestAuthType value
func (v EndpointTestAuthType) Ptr() *EndpointTestAuthType {
	return &v
}

type NullableEndpointTestAuthType struct {
	value *EndpointTestAuthType
	isSet bool
}

func (v NullableEndpointTestAuthType) Get() *EndpointTestAuthType {
	return v.value
}

func (v *NullableEndpointTestAuthType) Set(val *EndpointTestAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointTestAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointTestAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointTestAuthType(val *EndpointTestAuthType) *NullableEndpointTestAuthType {
	return &NullableEndpointTestAuthType{value: val, isSet: true}
}

func (v NullableEndpointTestAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointTestAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

