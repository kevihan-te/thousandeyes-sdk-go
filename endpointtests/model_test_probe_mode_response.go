/*
Endpoint Tests API

 Manage endpoint agent dynamic and scheduled tests using the Endpoint Tests API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtests

import (
	"encoding/json"
	"fmt"
)

// TestProbeModeResponse Probe mode used by network test, only valid when the protocol is set to TCP.
type TestProbeModeResponse string

// List of TestProbeModeResponse
const (
	TESTPROBEMODERESPONSE_AUTO TestProbeModeResponse = "auto"
	TESTPROBEMODERESPONSE_SACK TestProbeModeResponse = "sack"
	TESTPROBEMODERESPONSE_SYN TestProbeModeResponse = "syn"
	TESTPROBEMODERESPONSE_UNKNOWN TestProbeModeResponse = "unknown"
)

// All allowed values of TestProbeModeResponse enum
var AllowedTestProbeModeResponseEnumValues = []TestProbeModeResponse{
	"auto",
	"sack",
	"syn",
	"unknown",
}

func (v *TestProbeModeResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestProbeModeResponse(value)
	for _, existing := range AllowedTestProbeModeResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestProbeModeResponse", value)
}

// NewTestProbeModeResponseFromValue returns a pointer to a valid TestProbeModeResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestProbeModeResponseFromValue(v string) (*TestProbeModeResponse, error) {
	ev := TestProbeModeResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestProbeModeResponse: valid values are %v", v, AllowedTestProbeModeResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestProbeModeResponse) IsValid() bool {
	for _, existing := range AllowedTestProbeModeResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestProbeModeResponse value
func (v TestProbeModeResponse) Ptr() *TestProbeModeResponse {
	return &v
}

type NullableTestProbeModeResponse struct {
	value *TestProbeModeResponse
	isSet bool
}

func (v NullableTestProbeModeResponse) Get() *TestProbeModeResponse {
	return v.value
}

func (v *NullableTestProbeModeResponse) Set(val *TestProbeModeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTestProbeModeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTestProbeModeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestProbeModeResponse(val *TestProbeModeResponse) *NullableTestProbeModeResponse {
	return &NullableTestProbeModeResponse{value: val, isSet: true}
}

func (v NullableTestProbeModeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestProbeModeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

