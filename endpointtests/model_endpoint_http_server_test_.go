/*
Endpoint Tests API

 Manage endpoint agent dynamic and scheduled tests using the Endpoint Tests API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
	"fmt"
)

// checks if the EndpointHttpServerTest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointHttpServerTest{}

// EndpointHttpServerTest struct for EndpointHttpServerTest
type EndpointHttpServerTest struct {
	// A unique identifier associated with your account group. You can retrieve your `AccountGroupId` from the `/account-groups` endpoint.
	Aid *string `json:"aid,omitempty"`
	Links *EndpointTestLinks `json:"_links,omitempty"`
	AgentSelectorConfig *EndpointAgentSelectorConfig `json:"agentSelectorConfig,omitempty"`
	// UTC created date (ISO date-time format).
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// Indicates whether the test should be prioritized when the number of tests assigned to an agent exceeds the license limit.
	IsPrioritized *bool `json:"isPrioritized,omitempty"`
	Interval *TestInterval `json:"interval,omitempty"`
	// Indicates if test is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Indicates if the test is a saved event.
	IsSavedEvent *bool `json:"isSavedEvent,omitempty"`
	// Enables \"in session\" path trace. When enabled, this option initiates a TCP session with the target server and sends path trace packets within the established TCP session.
	HasPathTraceInSession *bool `json:"hasPathTraceInSession,omitempty"`
	// UTC last modification date (ISO date-time format).
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// Enable or disable network measurements. Set to true to enable or false to disable network measurements.
	NetworkMeasurements *bool `json:"networkMeasurements,omitempty"`
	Protocol *EndpointTestProtocol `json:"protocol,omitempty"`
	IpVersion *EndpointIpVersionTemplate `json:"ipVersion,omitempty"`
	// Target domain name or IP address.
	Server *string `json:"server,omitempty"`
	// Each test is assigned a unique ID to access test data from other endpoints.
	TestId *string `json:"testId,omitempty"`
	// Name of the test.
	TestName *string `json:"testName,omitempty"`
	// Type of test being queried.
	Type string `json:"type"`
	TcpProbeMode *TestProbeModeResponse `json:"tcpProbeMode,omitempty"`
	// Port number.
	Port *int32 `json:"port,omitempty"`
	AuthType *EndpointTestAuthType `json:"authType,omitempty"`
	// Maximum amount of time in milliseconds the agents wait before a request times out.
	HttpTimeLimit *int32 `json:"httpTimeLimit,omitempty"`
	// Username for Basic/NTLM authentication.
	Username *string `json:"username,omitempty"`
	SslVersionId *TestSslVersionId `json:"sslVersionId,omitempty"`
	// Flag indicating if a certificate should be verified.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty"`
	// The test target URL.
	Url *string `json:"url,omitempty"`
	// To disable following HTTP/301 or HTTP/302 redirect directives, set this parameter to `false`.
	FollowRedirects *bool `json:"followRedirects,omitempty"`
	// Target time for HTTP server completion, specified in milliseconds.
	HttpTargetTime *int32 `json:"httpTargetTime,omitempty"`
	// HTTP protocol version. Set to '2' to prefer HTTP/2, or '1' to use only HTTP/1.1.
	HttpVersion *int32 `json:"httpVersion,omitempty"`
	// Reflects the verbose SSL protocol version used by a test.
	SslVersion *string `json:"sslVersion,omitempty"`
	// Set to true to use NTLM, false to use Basic Authentication. Requires username and password to be set.
	UseNtlm *bool `json:"useNtlm,omitempty"`
	Labels []TestLabel `json:"labels,omitempty"`
}

type _EndpointHttpServerTest EndpointHttpServerTest

// NewEndpointHttpServerTest instantiates a new EndpointHttpServerTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointHttpServerTest(type_ string) *EndpointHttpServerTest {
	this := EndpointHttpServerTest{}
	var isPrioritized bool = false
	this.IsPrioritized = &isPrioritized
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	this.Type = type_
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var port int32 = 443
	this.Port = &port
	var authType EndpointTestAuthType = ENDPOINTTESTAUTHTYPE_NONE
	this.AuthType = &authType
	var httpTimeLimit int32 = 5000
	this.HttpTimeLimit = &httpTimeLimit
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var verifyCertificate bool = true
	this.VerifyCertificate = &verifyCertificate
	var followRedirects bool = true
	this.FollowRedirects = &followRedirects
	var httpVersion int32 = 2
	this.HttpVersion = &httpVersion
	return &this
}

// NewEndpointHttpServerTestWithDefaults instantiates a new EndpointHttpServerTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointHttpServerTestWithDefaults() *EndpointHttpServerTest {
	this := EndpointHttpServerTest{}
	var isPrioritized bool = false
	this.IsPrioritized = &isPrioritized
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var port int32 = 443
	this.Port = &port
	var authType EndpointTestAuthType = ENDPOINTTESTAUTHTYPE_NONE
	this.AuthType = &authType
	var httpTimeLimit int32 = 5000
	this.HttpTimeLimit = &httpTimeLimit
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var verifyCertificate bool = true
	this.VerifyCertificate = &verifyCertificate
	var followRedirects bool = true
	this.FollowRedirects = &followRedirects
	var httpVersion int32 = 2
	this.HttpVersion = &httpVersion
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *EndpointHttpServerTest) SetAid(v string) {
	o.Aid = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetLinks() EndpointTestLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret EndpointTestLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetLinksOk() (*EndpointTestLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given EndpointTestLinks and assigns it to the Links field.
func (o *EndpointHttpServerTest) SetLinks(v EndpointTestLinks) {
	o.Links = &v
}

// GetAgentSelectorConfig returns the AgentSelectorConfig field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetAgentSelectorConfig() EndpointAgentSelectorConfig {
	if o == nil || utils.IsNil(o.AgentSelectorConfig) {
		var ret EndpointAgentSelectorConfig
		return ret
	}
	return *o.AgentSelectorConfig
}

// GetAgentSelectorConfigOk returns a tuple with the AgentSelectorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetAgentSelectorConfigOk() (*EndpointAgentSelectorConfig, bool) {
	if o == nil || utils.IsNil(o.AgentSelectorConfig) {
		return nil, false
	}
	return o.AgentSelectorConfig, true
}

// HasAgentSelectorConfig returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasAgentSelectorConfig() bool {
	if o != nil && !utils.IsNil(o.AgentSelectorConfig) {
		return true
	}

	return false
}

// SetAgentSelectorConfig gets a reference to the given EndpointAgentSelectorConfig and assigns it to the AgentSelectorConfig field.
func (o *EndpointHttpServerTest) SetAgentSelectorConfig(v EndpointAgentSelectorConfig) {
	o.AgentSelectorConfig = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetCreatedDate() time.Time {
	if o == nil || utils.IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasCreatedDate() bool {
	if o != nil && !utils.IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *EndpointHttpServerTest) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetIsPrioritized returns the IsPrioritized field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetIsPrioritized() bool {
	if o == nil || utils.IsNil(o.IsPrioritized) {
		var ret bool
		return ret
	}
	return *o.IsPrioritized
}

// GetIsPrioritizedOk returns a tuple with the IsPrioritized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetIsPrioritizedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsPrioritized) {
		return nil, false
	}
	return o.IsPrioritized, true
}

// HasIsPrioritized returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasIsPrioritized() bool {
	if o != nil && !utils.IsNil(o.IsPrioritized) {
		return true
	}

	return false
}

// SetIsPrioritized gets a reference to the given bool and assigns it to the IsPrioritized field.
func (o *EndpointHttpServerTest) SetIsPrioritized(v bool) {
	o.IsPrioritized = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetInterval() TestInterval {
	if o == nil || utils.IsNil(o.Interval) {
		var ret TestInterval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetIntervalOk() (*TestInterval, bool) {
	if o == nil || utils.IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasInterval() bool {
	if o != nil && !utils.IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given TestInterval and assigns it to the Interval field.
func (o *EndpointHttpServerTest) SetInterval(v TestInterval) {
	o.Interval = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetIsEnabled() bool {
	if o == nil || utils.IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasIsEnabled() bool {
	if o != nil && !utils.IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *EndpointHttpServerTest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsSavedEvent returns the IsSavedEvent field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetIsSavedEvent() bool {
	if o == nil || utils.IsNil(o.IsSavedEvent) {
		var ret bool
		return ret
	}
	return *o.IsSavedEvent
}

// GetIsSavedEventOk returns a tuple with the IsSavedEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetIsSavedEventOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsSavedEvent) {
		return nil, false
	}
	return o.IsSavedEvent, true
}

// HasIsSavedEvent returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasIsSavedEvent() bool {
	if o != nil && !utils.IsNil(o.IsSavedEvent) {
		return true
	}

	return false
}

// SetIsSavedEvent gets a reference to the given bool and assigns it to the IsSavedEvent field.
func (o *EndpointHttpServerTest) SetIsSavedEvent(v bool) {
	o.IsSavedEvent = &v
}

// GetHasPathTraceInSession returns the HasPathTraceInSession field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetHasPathTraceInSession() bool {
	if o == nil || utils.IsNil(o.HasPathTraceInSession) {
		var ret bool
		return ret
	}
	return *o.HasPathTraceInSession
}

// GetHasPathTraceInSessionOk returns a tuple with the HasPathTraceInSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetHasPathTraceInSessionOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasPathTraceInSession) {
		return nil, false
	}
	return o.HasPathTraceInSession, true
}

// HasHasPathTraceInSession returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasHasPathTraceInSession() bool {
	if o != nil && !utils.IsNil(o.HasPathTraceInSession) {
		return true
	}

	return false
}

// SetHasPathTraceInSession gets a reference to the given bool and assigns it to the HasPathTraceInSession field.
func (o *EndpointHttpServerTest) SetHasPathTraceInSession(v bool) {
	o.HasPathTraceInSession = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetModifiedDate() time.Time {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasModifiedDate() bool {
	if o != nil && !utils.IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *EndpointHttpServerTest) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetNetworkMeasurements returns the NetworkMeasurements field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetNetworkMeasurements() bool {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		var ret bool
		return ret
	}
	return *o.NetworkMeasurements
}

// GetNetworkMeasurementsOk returns a tuple with the NetworkMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetNetworkMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		return nil, false
	}
	return o.NetworkMeasurements, true
}

// HasNetworkMeasurements returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasNetworkMeasurements() bool {
	if o != nil && !utils.IsNil(o.NetworkMeasurements) {
		return true
	}

	return false
}

// SetNetworkMeasurements gets a reference to the given bool and assigns it to the NetworkMeasurements field.
func (o *EndpointHttpServerTest) SetNetworkMeasurements(v bool) {
	o.NetworkMeasurements = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetProtocol() EndpointTestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetProtocolOk() (*EndpointTestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestProtocol and assigns it to the Protocol field.
func (o *EndpointHttpServerTest) SetProtocol(v EndpointTestProtocol) {
	o.Protocol = &v
}

// GetIpVersion returns the IpVersion field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetIpVersion() EndpointIpVersionTemplate {
	if o == nil || utils.IsNil(o.IpVersion) {
		var ret EndpointIpVersionTemplate
		return ret
	}
	return *o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetIpVersionOk() (*EndpointIpVersionTemplate, bool) {
	if o == nil || utils.IsNil(o.IpVersion) {
		return nil, false
	}
	return o.IpVersion, true
}

// HasIpVersion returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasIpVersion() bool {
	if o != nil && !utils.IsNil(o.IpVersion) {
		return true
	}

	return false
}

// SetIpVersion gets a reference to the given EndpointIpVersionTemplate and assigns it to the IpVersion field.
func (o *EndpointHttpServerTest) SetIpVersion(v EndpointIpVersionTemplate) {
	o.IpVersion = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetServer() string {
	if o == nil || utils.IsNil(o.Server) {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetServerOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasServer() bool {
	if o != nil && !utils.IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *EndpointHttpServerTest) SetServer(v string) {
	o.Server = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *EndpointHttpServerTest) SetTestId(v string) {
	o.TestId = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *EndpointHttpServerTest) SetTestName(v string) {
	o.TestName = &v
}

// GetType returns the Type field value
func (o *EndpointHttpServerTest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EndpointHttpServerTest) SetType(v string) {
	o.Type = v
}

// GetTcpProbeMode returns the TcpProbeMode field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetTcpProbeMode() TestProbeModeResponse {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		var ret TestProbeModeResponse
		return ret
	}
	return *o.TcpProbeMode
}

// GetTcpProbeModeOk returns a tuple with the TcpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetTcpProbeModeOk() (*TestProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		return nil, false
	}
	return o.TcpProbeMode, true
}

// HasTcpProbeMode returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasTcpProbeMode() bool {
	if o != nil && !utils.IsNil(o.TcpProbeMode) {
		return true
	}

	return false
}

// SetTcpProbeMode gets a reference to the given TestProbeModeResponse and assigns it to the TcpProbeMode field.
func (o *EndpointHttpServerTest) SetTcpProbeMode(v TestProbeModeResponse) {
	o.TcpProbeMode = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetPort() int32 {
	if o == nil || utils.IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasPort() bool {
	if o != nil && !utils.IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *EndpointHttpServerTest) SetPort(v int32) {
	o.Port = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetAuthType() EndpointTestAuthType {
	if o == nil || utils.IsNil(o.AuthType) {
		var ret EndpointTestAuthType
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetAuthTypeOk() (*EndpointTestAuthType, bool) {
	if o == nil || utils.IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasAuthType() bool {
	if o != nil && !utils.IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given EndpointTestAuthType and assigns it to the AuthType field.
func (o *EndpointHttpServerTest) SetAuthType(v EndpointTestAuthType) {
	o.AuthType = &v
}

// GetHttpTimeLimit returns the HttpTimeLimit field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetHttpTimeLimit() int32 {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		var ret int32
		return ret
	}
	return *o.HttpTimeLimit
}

// GetHttpTimeLimitOk returns a tuple with the HttpTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetHttpTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		return nil, false
	}
	return o.HttpTimeLimit, true
}

// HasHttpTimeLimit returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasHttpTimeLimit() bool {
	if o != nil && !utils.IsNil(o.HttpTimeLimit) {
		return true
	}

	return false
}

// SetHttpTimeLimit gets a reference to the given int32 and assigns it to the HttpTimeLimit field.
func (o *EndpointHttpServerTest) SetHttpTimeLimit(v int32) {
	o.HttpTimeLimit = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetUsername() string {
	if o == nil || utils.IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *EndpointHttpServerTest) SetUsername(v string) {
	o.Username = &v
}

// GetSslVersionId returns the SslVersionId field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetSslVersionId() TestSslVersionId {
	if o == nil || utils.IsNil(o.SslVersionId) {
		var ret TestSslVersionId
		return ret
	}
	return *o.SslVersionId
}

// GetSslVersionIdOk returns a tuple with the SslVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetSslVersionIdOk() (*TestSslVersionId, bool) {
	if o == nil || utils.IsNil(o.SslVersionId) {
		return nil, false
	}
	return o.SslVersionId, true
}

// HasSslVersionId returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasSslVersionId() bool {
	if o != nil && !utils.IsNil(o.SslVersionId) {
		return true
	}

	return false
}

// SetSslVersionId gets a reference to the given TestSslVersionId and assigns it to the SslVersionId field.
func (o *EndpointHttpServerTest) SetSslVersionId(v TestSslVersionId) {
	o.SslVersionId = &v
}

// GetVerifyCertificate returns the VerifyCertificate field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetVerifyCertificate() bool {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		var ret bool
		return ret
	}
	return *o.VerifyCertificate
}

// GetVerifyCertificateOk returns a tuple with the VerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetVerifyCertificateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		return nil, false
	}
	return o.VerifyCertificate, true
}

// HasVerifyCertificate returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasVerifyCertificate() bool {
	if o != nil && !utils.IsNil(o.VerifyCertificate) {
		return true
	}

	return false
}

// SetVerifyCertificate gets a reference to the given bool and assigns it to the VerifyCertificate field.
func (o *EndpointHttpServerTest) SetVerifyCertificate(v bool) {
	o.VerifyCertificate = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetUrl() string {
	if o == nil || utils.IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasUrl() bool {
	if o != nil && !utils.IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *EndpointHttpServerTest) SetUrl(v string) {
	o.Url = &v
}

// GetFollowRedirects returns the FollowRedirects field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetFollowRedirects() bool {
	if o == nil || utils.IsNil(o.FollowRedirects) {
		var ret bool
		return ret
	}
	return *o.FollowRedirects
}

// GetFollowRedirectsOk returns a tuple with the FollowRedirects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetFollowRedirectsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.FollowRedirects) {
		return nil, false
	}
	return o.FollowRedirects, true
}

// HasFollowRedirects returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasFollowRedirects() bool {
	if o != nil && !utils.IsNil(o.FollowRedirects) {
		return true
	}

	return false
}

// SetFollowRedirects gets a reference to the given bool and assigns it to the FollowRedirects field.
func (o *EndpointHttpServerTest) SetFollowRedirects(v bool) {
	o.FollowRedirects = &v
}

// GetHttpTargetTime returns the HttpTargetTime field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetHttpTargetTime() int32 {
	if o == nil || utils.IsNil(o.HttpTargetTime) {
		var ret int32
		return ret
	}
	return *o.HttpTargetTime
}

// GetHttpTargetTimeOk returns a tuple with the HttpTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetHttpTargetTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTargetTime) {
		return nil, false
	}
	return o.HttpTargetTime, true
}

// HasHttpTargetTime returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasHttpTargetTime() bool {
	if o != nil && !utils.IsNil(o.HttpTargetTime) {
		return true
	}

	return false
}

// SetHttpTargetTime gets a reference to the given int32 and assigns it to the HttpTargetTime field.
func (o *EndpointHttpServerTest) SetHttpTargetTime(v int32) {
	o.HttpTargetTime = &v
}

// GetHttpVersion returns the HttpVersion field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetHttpVersion() int32 {
	if o == nil || utils.IsNil(o.HttpVersion) {
		var ret int32
		return ret
	}
	return *o.HttpVersion
}

// GetHttpVersionOk returns a tuple with the HttpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetHttpVersionOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpVersion) {
		return nil, false
	}
	return o.HttpVersion, true
}

// HasHttpVersion returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasHttpVersion() bool {
	if o != nil && !utils.IsNil(o.HttpVersion) {
		return true
	}

	return false
}

// SetHttpVersion gets a reference to the given int32 and assigns it to the HttpVersion field.
func (o *EndpointHttpServerTest) SetHttpVersion(v int32) {
	o.HttpVersion = &v
}

// GetSslVersion returns the SslVersion field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetSslVersion() string {
	if o == nil || utils.IsNil(o.SslVersion) {
		var ret string
		return ret
	}
	return *o.SslVersion
}

// GetSslVersionOk returns a tuple with the SslVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetSslVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SslVersion) {
		return nil, false
	}
	return o.SslVersion, true
}

// HasSslVersion returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasSslVersion() bool {
	if o != nil && !utils.IsNil(o.SslVersion) {
		return true
	}

	return false
}

// SetSslVersion gets a reference to the given string and assigns it to the SslVersion field.
func (o *EndpointHttpServerTest) SetSslVersion(v string) {
	o.SslVersion = &v
}

// GetUseNtlm returns the UseNtlm field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetUseNtlm() bool {
	if o == nil || utils.IsNil(o.UseNtlm) {
		var ret bool
		return ret
	}
	return *o.UseNtlm
}

// GetUseNtlmOk returns a tuple with the UseNtlm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetUseNtlmOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.UseNtlm) {
		return nil, false
	}
	return o.UseNtlm, true
}

// HasUseNtlm returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasUseNtlm() bool {
	if o != nil && !utils.IsNil(o.UseNtlm) {
		return true
	}

	return false
}

// SetUseNtlm gets a reference to the given bool and assigns it to the UseNtlm field.
func (o *EndpointHttpServerTest) SetUseNtlm(v bool) {
	o.UseNtlm = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *EndpointHttpServerTest) GetLabels() []TestLabel {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []TestLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerTest) GetLabelsOk() ([]TestLabel, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *EndpointHttpServerTest) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []TestLabel and assigns it to the Labels field.
func (o *EndpointHttpServerTest) SetLabels(v []TestLabel) {
	o.Labels = v
}

func (o EndpointHttpServerTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointHttpServerTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.AgentSelectorConfig) {
		toSerialize["agentSelectorConfig"] = o.AgentSelectorConfig
	}
	if !utils.IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !utils.IsNil(o.IsPrioritized) {
		toSerialize["isPrioritized"] = o.IsPrioritized
	}
	if !utils.IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !utils.IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !utils.IsNil(o.IsSavedEvent) {
		toSerialize["isSavedEvent"] = o.IsSavedEvent
	}
	if !utils.IsNil(o.HasPathTraceInSession) {
		toSerialize["hasPathTraceInSession"] = o.HasPathTraceInSession
	}
	if !utils.IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !utils.IsNil(o.NetworkMeasurements) {
		toSerialize["networkMeasurements"] = o.NetworkMeasurements
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.IpVersion) {
		toSerialize["ipVersion"] = o.IpVersion
	}
	if !utils.IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	toSerialize["type"] = o.Type
	if !utils.IsNil(o.TcpProbeMode) {
		toSerialize["tcpProbeMode"] = o.TcpProbeMode
	}
	if !utils.IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !utils.IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !utils.IsNil(o.HttpTimeLimit) {
		toSerialize["httpTimeLimit"] = o.HttpTimeLimit
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.SslVersionId) {
		toSerialize["sslVersionId"] = o.SslVersionId
	}
	if !utils.IsNil(o.VerifyCertificate) {
		toSerialize["verifyCertificate"] = o.VerifyCertificate
	}
	if !utils.IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !utils.IsNil(o.FollowRedirects) {
		toSerialize["followRedirects"] = o.FollowRedirects
	}
	if !utils.IsNil(o.HttpTargetTime) {
		toSerialize["httpTargetTime"] = o.HttpTargetTime
	}
	if !utils.IsNil(o.HttpVersion) {
		toSerialize["httpVersion"] = o.HttpVersion
	}
	if !utils.IsNil(o.SslVersion) {
		toSerialize["sslVersion"] = o.SslVersion
	}
	if !utils.IsNil(o.UseNtlm) {
		toSerialize["useNtlm"] = o.UseNtlm
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

func (o *EndpointHttpServerTest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointHttpServerTest := _EndpointHttpServerTest{}

    err = json.Unmarshal(data, &varEndpointHttpServerTest)

	if err != nil {
		return err
	}

	*o = EndpointHttpServerTest(varEndpointHttpServerTest)

	return err
}

type NullableEndpointHttpServerTest struct {
	value *EndpointHttpServerTest
	isSet bool
}

func (v NullableEndpointHttpServerTest) Get() *EndpointHttpServerTest {
	return v.value
}

func (v *NullableEndpointHttpServerTest) Set(val *EndpointHttpServerTest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointHttpServerTest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointHttpServerTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointHttpServerTest(val *EndpointHttpServerTest) *NullableEndpointHttpServerTest {
	return &NullableEndpointHttpServerTest{value: val, isSet: true}
}

func (v NullableEndpointHttpServerTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointHttpServerTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


