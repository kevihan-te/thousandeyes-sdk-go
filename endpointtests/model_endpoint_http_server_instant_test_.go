/*
Endpoint Tests API

 Manage endpoint agent dynamic and scheduled tests using the Endpoint Tests API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the EndpointHttpServerInstantTest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointHttpServerInstantTest{}

// EndpointHttpServerInstantTest struct for EndpointHttpServerInstantTest
type EndpointHttpServerInstantTest struct {
	AgentSelectorType *EndpointTestAgentSelectorType `json:"agentSelectorType,omitempty"`
	// List of endpoint agent IDs (obtained from `/endpoint/agents` endpoint). Required when `agentSelectorType` is set to `specific-agent`.
	Agents []string `json:"agents,omitempty"`
	// List of endpoint agent label IDs (obtained from `/endpoint/labels` endpoint), required when `agentSelectorType` is set to `agent-labels`.
	EndpointAgentLabels []string `json:"endpointAgentLabels,omitempty"`
	// Maximum number of agents which can execute the test.
	MaxMachines *int32 `json:"maxMachines,omitempty"`
	// Name of the test.
	TestName string `json:"testName"`
	AuthType *EndpointTestAuthType `json:"authType,omitempty"`
	// Enables \"in session\" path trace. When enabled, this option initiates a TCP session with the target server and sends path trace packets within the established TCP session.
	HasPathTraceInSession *bool `json:"hasPathTraceInSession,omitempty"`
	// Maximum amount of time in milliseconds the agents wait before a request times out.
	HttpTimeLimit *int32 `json:"httpTimeLimit,omitempty"`
	Protocol *EndpointTestProtocol `json:"protocol,omitempty"`
	// Username for Basic/NTLM authentication.
	Username *string `json:"username,omitempty"`
	SslVersionId *TestSslVersionId `json:"sslVersionId,omitempty"`
	TcpProbeMode *TestProbeModeResponse `json:"tcpProbeMode,omitempty"`
	// Flag indicating if a certificate should be verified.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty"`
	// The test target URL. You can optionally specify the protocol (`http` or `https`).   - **Default Protocol:** If no protocol is specified, `https` is used by default.  - **Port Number:** To specify a port, append it to the URL with a colon after the hostname or IP address (e.g., `https://example.com:443`).      - If no port is specified in the URL, the `port` is determined by the default for protocol (HTTP: 80, HTTPS: 443). 
	Url string `json:"url"`
	// Optional flag indicating if the test should run ping.
	// Deprecated
	HasPing *bool `json:"hasPing,omitempty"`
	// Optional flag indicating if the test should run traceroute.
	// Deprecated
	HasTraceroute *bool `json:"hasTraceroute,omitempty"`
	// Enable or disable network measurements. Set to true to enable or false to disable network measurements.
	NetworkMeasurements *bool `json:"networkMeasurements,omitempty"`
	// Response time target in milliseconds. Affects the colors of agents and legends on the view page. The value is compared with actual response time in order to determine the color scale (from green to red).
	TargetResponseTime *int32 `json:"targetResponseTime,omitempty"`
	// Password for Basic/NTLM authentication.
	Password *string `json:"password,omitempty"`
}

type _EndpointHttpServerInstantTest EndpointHttpServerInstantTest

// NewEndpointHttpServerInstantTest instantiates a new EndpointHttpServerInstantTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointHttpServerInstantTest(testName string, url string) *EndpointHttpServerInstantTest {
	this := EndpointHttpServerInstantTest{}
	var agentSelectorType EndpointTestAgentSelectorType = ENDPOINTTESTAGENTSELECTORTYPE_ALL_AGENTS
	this.AgentSelectorType = &agentSelectorType
	var maxMachines int32 = 25
	this.MaxMachines = &maxMachines
	this.TestName = testName
	var authType EndpointTestAuthType = ENDPOINTTESTAUTHTYPE_NONE
	this.AuthType = &authType
	var httpTimeLimit int32 = 5000
	this.HttpTimeLimit = &httpTimeLimit
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var verifyCertificate bool = true
	this.VerifyCertificate = &verifyCertificate
	this.Url = url
	var hasPing bool = true
	this.HasPing = &hasPing
	var hasTraceroute bool = true
	this.HasTraceroute = &hasTraceroute
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var targetResponseTime int32 = 1000
	this.TargetResponseTime = &targetResponseTime
	return &this
}

// NewEndpointHttpServerInstantTestWithDefaults instantiates a new EndpointHttpServerInstantTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointHttpServerInstantTestWithDefaults() *EndpointHttpServerInstantTest {
	this := EndpointHttpServerInstantTest{}
	var agentSelectorType EndpointTestAgentSelectorType = ENDPOINTTESTAGENTSELECTORTYPE_ALL_AGENTS
	this.AgentSelectorType = &agentSelectorType
	var maxMachines int32 = 25
	this.MaxMachines = &maxMachines
	var authType EndpointTestAuthType = ENDPOINTTESTAUTHTYPE_NONE
	this.AuthType = &authType
	var httpTimeLimit int32 = 5000
	this.HttpTimeLimit = &httpTimeLimit
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var verifyCertificate bool = true
	this.VerifyCertificate = &verifyCertificate
	var hasPing bool = true
	this.HasPing = &hasPing
	var hasTraceroute bool = true
	this.HasTraceroute = &hasTraceroute
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var targetResponseTime int32 = 1000
	this.TargetResponseTime = &targetResponseTime
	return &this
}

// GetAgentSelectorType returns the AgentSelectorType field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetAgentSelectorType() EndpointTestAgentSelectorType {
	if o == nil || utils.IsNil(o.AgentSelectorType) {
		var ret EndpointTestAgentSelectorType
		return ret
	}
	return *o.AgentSelectorType
}

// GetAgentSelectorTypeOk returns a tuple with the AgentSelectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetAgentSelectorTypeOk() (*EndpointTestAgentSelectorType, bool) {
	if o == nil || utils.IsNil(o.AgentSelectorType) {
		return nil, false
	}
	return o.AgentSelectorType, true
}

// HasAgentSelectorType returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasAgentSelectorType() bool {
	if o != nil && !utils.IsNil(o.AgentSelectorType) {
		return true
	}

	return false
}

// SetAgentSelectorType gets a reference to the given EndpointTestAgentSelectorType and assigns it to the AgentSelectorType field.
func (o *EndpointHttpServerInstantTest) SetAgentSelectorType(v EndpointTestAgentSelectorType) {
	o.AgentSelectorType = &v
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetAgents() []string {
	if o == nil || utils.IsNil(o.Agents) {
		var ret []string
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetAgentsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasAgents() bool {
	if o != nil && !utils.IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []string and assigns it to the Agents field.
func (o *EndpointHttpServerInstantTest) SetAgents(v []string) {
	o.Agents = v
}

// GetEndpointAgentLabels returns the EndpointAgentLabels field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetEndpointAgentLabels() []string {
	if o == nil || utils.IsNil(o.EndpointAgentLabels) {
		var ret []string
		return ret
	}
	return o.EndpointAgentLabels
}

// GetEndpointAgentLabelsOk returns a tuple with the EndpointAgentLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetEndpointAgentLabelsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.EndpointAgentLabels) {
		return nil, false
	}
	return o.EndpointAgentLabels, true
}

// HasEndpointAgentLabels returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasEndpointAgentLabels() bool {
	if o != nil && !utils.IsNil(o.EndpointAgentLabels) {
		return true
	}

	return false
}

// SetEndpointAgentLabels gets a reference to the given []string and assigns it to the EndpointAgentLabels field.
func (o *EndpointHttpServerInstantTest) SetEndpointAgentLabels(v []string) {
	o.EndpointAgentLabels = v
}

// GetMaxMachines returns the MaxMachines field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetMaxMachines() int32 {
	if o == nil || utils.IsNil(o.MaxMachines) {
		var ret int32
		return ret
	}
	return *o.MaxMachines
}

// GetMaxMachinesOk returns a tuple with the MaxMachines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetMaxMachinesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.MaxMachines) {
		return nil, false
	}
	return o.MaxMachines, true
}

// HasMaxMachines returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasMaxMachines() bool {
	if o != nil && !utils.IsNil(o.MaxMachines) {
		return true
	}

	return false
}

// SetMaxMachines gets a reference to the given int32 and assigns it to the MaxMachines field.
func (o *EndpointHttpServerInstantTest) SetMaxMachines(v int32) {
	o.MaxMachines = &v
}

// GetTestName returns the TestName field value
func (o *EndpointHttpServerInstantTest) GetTestName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetTestNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestName, true
}

// SetTestName sets field value
func (o *EndpointHttpServerInstantTest) SetTestName(v string) {
	o.TestName = v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetAuthType() EndpointTestAuthType {
	if o == nil || utils.IsNil(o.AuthType) {
		var ret EndpointTestAuthType
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetAuthTypeOk() (*EndpointTestAuthType, bool) {
	if o == nil || utils.IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasAuthType() bool {
	if o != nil && !utils.IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given EndpointTestAuthType and assigns it to the AuthType field.
func (o *EndpointHttpServerInstantTest) SetAuthType(v EndpointTestAuthType) {
	o.AuthType = &v
}

// GetHasPathTraceInSession returns the HasPathTraceInSession field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetHasPathTraceInSession() bool {
	if o == nil || utils.IsNil(o.HasPathTraceInSession) {
		var ret bool
		return ret
	}
	return *o.HasPathTraceInSession
}

// GetHasPathTraceInSessionOk returns a tuple with the HasPathTraceInSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetHasPathTraceInSessionOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasPathTraceInSession) {
		return nil, false
	}
	return o.HasPathTraceInSession, true
}

// HasHasPathTraceInSession returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasHasPathTraceInSession() bool {
	if o != nil && !utils.IsNil(o.HasPathTraceInSession) {
		return true
	}

	return false
}

// SetHasPathTraceInSession gets a reference to the given bool and assigns it to the HasPathTraceInSession field.
func (o *EndpointHttpServerInstantTest) SetHasPathTraceInSession(v bool) {
	o.HasPathTraceInSession = &v
}

// GetHttpTimeLimit returns the HttpTimeLimit field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetHttpTimeLimit() int32 {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		var ret int32
		return ret
	}
	return *o.HttpTimeLimit
}

// GetHttpTimeLimitOk returns a tuple with the HttpTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetHttpTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		return nil, false
	}
	return o.HttpTimeLimit, true
}

// HasHttpTimeLimit returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasHttpTimeLimit() bool {
	if o != nil && !utils.IsNil(o.HttpTimeLimit) {
		return true
	}

	return false
}

// SetHttpTimeLimit gets a reference to the given int32 and assigns it to the HttpTimeLimit field.
func (o *EndpointHttpServerInstantTest) SetHttpTimeLimit(v int32) {
	o.HttpTimeLimit = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetProtocol() EndpointTestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetProtocolOk() (*EndpointTestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestProtocol and assigns it to the Protocol field.
func (o *EndpointHttpServerInstantTest) SetProtocol(v EndpointTestProtocol) {
	o.Protocol = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetUsername() string {
	if o == nil || utils.IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *EndpointHttpServerInstantTest) SetUsername(v string) {
	o.Username = &v
}

// GetSslVersionId returns the SslVersionId field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetSslVersionId() TestSslVersionId {
	if o == nil || utils.IsNil(o.SslVersionId) {
		var ret TestSslVersionId
		return ret
	}
	return *o.SslVersionId
}

// GetSslVersionIdOk returns a tuple with the SslVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetSslVersionIdOk() (*TestSslVersionId, bool) {
	if o == nil || utils.IsNil(o.SslVersionId) {
		return nil, false
	}
	return o.SslVersionId, true
}

// HasSslVersionId returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasSslVersionId() bool {
	if o != nil && !utils.IsNil(o.SslVersionId) {
		return true
	}

	return false
}

// SetSslVersionId gets a reference to the given TestSslVersionId and assigns it to the SslVersionId field.
func (o *EndpointHttpServerInstantTest) SetSslVersionId(v TestSslVersionId) {
	o.SslVersionId = &v
}

// GetTcpProbeMode returns the TcpProbeMode field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetTcpProbeMode() TestProbeModeResponse {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		var ret TestProbeModeResponse
		return ret
	}
	return *o.TcpProbeMode
}

// GetTcpProbeModeOk returns a tuple with the TcpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetTcpProbeModeOk() (*TestProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		return nil, false
	}
	return o.TcpProbeMode, true
}

// HasTcpProbeMode returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasTcpProbeMode() bool {
	if o != nil && !utils.IsNil(o.TcpProbeMode) {
		return true
	}

	return false
}

// SetTcpProbeMode gets a reference to the given TestProbeModeResponse and assigns it to the TcpProbeMode field.
func (o *EndpointHttpServerInstantTest) SetTcpProbeMode(v TestProbeModeResponse) {
	o.TcpProbeMode = &v
}

// GetVerifyCertificate returns the VerifyCertificate field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetVerifyCertificate() bool {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		var ret bool
		return ret
	}
	return *o.VerifyCertificate
}

// GetVerifyCertificateOk returns a tuple with the VerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetVerifyCertificateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		return nil, false
	}
	return o.VerifyCertificate, true
}

// HasVerifyCertificate returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasVerifyCertificate() bool {
	if o != nil && !utils.IsNil(o.VerifyCertificate) {
		return true
	}

	return false
}

// SetVerifyCertificate gets a reference to the given bool and assigns it to the VerifyCertificate field.
func (o *EndpointHttpServerInstantTest) SetVerifyCertificate(v bool) {
	o.VerifyCertificate = &v
}

// GetUrl returns the Url field value
func (o *EndpointHttpServerInstantTest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *EndpointHttpServerInstantTest) SetUrl(v string) {
	o.Url = v
}

// GetHasPing returns the HasPing field value if set, zero value otherwise.
// Deprecated
func (o *EndpointHttpServerInstantTest) GetHasPing() bool {
	if o == nil || utils.IsNil(o.HasPing) {
		var ret bool
		return ret
	}
	return *o.HasPing
}

// GetHasPingOk returns a tuple with the HasPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EndpointHttpServerInstantTest) GetHasPingOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasPing) {
		return nil, false
	}
	return o.HasPing, true
}

// HasHasPing returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasHasPing() bool {
	if o != nil && !utils.IsNil(o.HasPing) {
		return true
	}

	return false
}

// SetHasPing gets a reference to the given bool and assigns it to the HasPing field.
// Deprecated
func (o *EndpointHttpServerInstantTest) SetHasPing(v bool) {
	o.HasPing = &v
}

// GetHasTraceroute returns the HasTraceroute field value if set, zero value otherwise.
// Deprecated
func (o *EndpointHttpServerInstantTest) GetHasTraceroute() bool {
	if o == nil || utils.IsNil(o.HasTraceroute) {
		var ret bool
		return ret
	}
	return *o.HasTraceroute
}

// GetHasTracerouteOk returns a tuple with the HasTraceroute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EndpointHttpServerInstantTest) GetHasTracerouteOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasTraceroute) {
		return nil, false
	}
	return o.HasTraceroute, true
}

// HasHasTraceroute returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasHasTraceroute() bool {
	if o != nil && !utils.IsNil(o.HasTraceroute) {
		return true
	}

	return false
}

// SetHasTraceroute gets a reference to the given bool and assigns it to the HasTraceroute field.
// Deprecated
func (o *EndpointHttpServerInstantTest) SetHasTraceroute(v bool) {
	o.HasTraceroute = &v
}

// GetNetworkMeasurements returns the NetworkMeasurements field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetNetworkMeasurements() bool {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		var ret bool
		return ret
	}
	return *o.NetworkMeasurements
}

// GetNetworkMeasurementsOk returns a tuple with the NetworkMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetNetworkMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		return nil, false
	}
	return o.NetworkMeasurements, true
}

// HasNetworkMeasurements returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasNetworkMeasurements() bool {
	if o != nil && !utils.IsNil(o.NetworkMeasurements) {
		return true
	}

	return false
}

// SetNetworkMeasurements gets a reference to the given bool and assigns it to the NetworkMeasurements field.
func (o *EndpointHttpServerInstantTest) SetNetworkMeasurements(v bool) {
	o.NetworkMeasurements = &v
}

// GetTargetResponseTime returns the TargetResponseTime field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetTargetResponseTime() int32 {
	if o == nil || utils.IsNil(o.TargetResponseTime) {
		var ret int32
		return ret
	}
	return *o.TargetResponseTime
}

// GetTargetResponseTimeOk returns a tuple with the TargetResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetTargetResponseTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TargetResponseTime) {
		return nil, false
	}
	return o.TargetResponseTime, true
}

// HasTargetResponseTime returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasTargetResponseTime() bool {
	if o != nil && !utils.IsNil(o.TargetResponseTime) {
		return true
	}

	return false
}

// SetTargetResponseTime gets a reference to the given int32 and assigns it to the TargetResponseTime field.
func (o *EndpointHttpServerInstantTest) SetTargetResponseTime(v int32) {
	o.TargetResponseTime = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *EndpointHttpServerInstantTest) GetPassword() string {
	if o == nil || utils.IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerInstantTest) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *EndpointHttpServerInstantTest) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *EndpointHttpServerInstantTest) SetPassword(v string) {
	o.Password = &v
}

func (o EndpointHttpServerInstantTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointHttpServerInstantTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AgentSelectorType) {
		toSerialize["agentSelectorType"] = o.AgentSelectorType
	}
	if !utils.IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	if !utils.IsNil(o.EndpointAgentLabels) {
		toSerialize["endpointAgentLabels"] = o.EndpointAgentLabels
	}
	if !utils.IsNil(o.MaxMachines) {
		toSerialize["maxMachines"] = o.MaxMachines
	}
	toSerialize["testName"] = o.TestName
	if !utils.IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !utils.IsNil(o.HasPathTraceInSession) {
		toSerialize["hasPathTraceInSession"] = o.HasPathTraceInSession
	}
	if !utils.IsNil(o.HttpTimeLimit) {
		toSerialize["httpTimeLimit"] = o.HttpTimeLimit
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.SslVersionId) {
		toSerialize["sslVersionId"] = o.SslVersionId
	}
	if !utils.IsNil(o.TcpProbeMode) {
		toSerialize["tcpProbeMode"] = o.TcpProbeMode
	}
	if !utils.IsNil(o.VerifyCertificate) {
		toSerialize["verifyCertificate"] = o.VerifyCertificate
	}
	toSerialize["url"] = o.Url
	if !utils.IsNil(o.HasPing) {
		toSerialize["hasPing"] = o.HasPing
	}
	if !utils.IsNil(o.HasTraceroute) {
		toSerialize["hasTraceroute"] = o.HasTraceroute
	}
	if !utils.IsNil(o.NetworkMeasurements) {
		toSerialize["networkMeasurements"] = o.NetworkMeasurements
	}
	if !utils.IsNil(o.TargetResponseTime) {
		toSerialize["targetResponseTime"] = o.TargetResponseTime
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

func (o *EndpointHttpServerInstantTest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testName",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointHttpServerInstantTest := _EndpointHttpServerInstantTest{}

    err = json.Unmarshal(data, &varEndpointHttpServerInstantTest)

	if err != nil {
		return err
	}

	*o = EndpointHttpServerInstantTest(varEndpointHttpServerInstantTest)

	return err
}

type NullableEndpointHttpServerInstantTest struct {
	value *EndpointHttpServerInstantTest
	isSet bool
}

func (v NullableEndpointHttpServerInstantTest) Get() *EndpointHttpServerInstantTest {
	return v.value
}

func (v *NullableEndpointHttpServerInstantTest) Set(val *EndpointHttpServerInstantTest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointHttpServerInstantTest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointHttpServerInstantTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointHttpServerInstantTest(val *EndpointHttpServerInstantTest) *NullableEndpointHttpServerInstantTest {
	return &NullableEndpointHttpServerInstantTest{value: val, isSet: true}
}

func (v NullableEndpointHttpServerInstantTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointHttpServerInstantTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


