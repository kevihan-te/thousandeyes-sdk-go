/*
ThousandEyes for OpenTelemetry API

ThousandEyes for OpenTelemetry provides machine-to-machine integration between ThousandEyes and its customers. It allows you to export ThousandEyes telemetry data in OTel format, which is widely used in the industry. With ThousandEyes for OTel, you can leverage frameworks widely used in the observability domain - such as Splunk, Grafana, and Honeycomb - to capture and analyze ThousandEyes data. Any client that supports OTel can use ThousandEyes for OpenTelemetry.  ThousandEyes for OTel is made up of the following components:  * Data streaming APIs that you can use to configure and enable your ThousandEyes tests with OTel-compatible streams, in particular to configure how ThousandEyes telemetry data is exported to client integrations. * A set of streaming pipelines called _collectors_ that actively fetch ThousandEyes network test data, enrich the data with some additional detail, filter, and push the data to the customer-configured endpoints, depending on what you configure via the public APIs. * Third-party OTel collectors that receive, transform, filter, and export different metrics to client applications such as AppD, or any other OTel-capable client configuration.  For more information about ThousandEyes for OpenTelemetry, see the [documentation](https://docs.thousandeyes.com/product-documentation/api/opentelemetry). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AuditOperationWithUpdate type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AuditOperationWithUpdate{}

// AuditOperationWithUpdate struct for AuditOperationWithUpdate
type AuditOperationWithUpdate struct {
	// ID of the user who created the integration
	CreatedBy *int64 `json:"createdBy,omitempty"`
	// Creation date of the integration
	CreatedDate *int64 `json:"createdDate,omitempty"`
	// ID of the user who last updated the integration
	UpdatedBy utils.NullableInt64 `json:"updatedBy,omitempty"`
	// Date of the last update to the integration
	UpdatedDate utils.NullableInt64 `json:"updatedDate,omitempty"`
}

// NewAuditOperationWithUpdate instantiates a new AuditOperationWithUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditOperationWithUpdate() *AuditOperationWithUpdate {
	this := AuditOperationWithUpdate{}
	return &this
}

// NewAuditOperationWithUpdateWithDefaults instantiates a new AuditOperationWithUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditOperationWithUpdateWithDefaults() *AuditOperationWithUpdate {
	this := AuditOperationWithUpdate{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *AuditOperationWithUpdate) GetCreatedBy() int64 {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret int64
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditOperationWithUpdate) GetCreatedByOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *AuditOperationWithUpdate) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int64 and assigns it to the CreatedBy field.
func (o *AuditOperationWithUpdate) SetCreatedBy(v int64) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *AuditOperationWithUpdate) GetCreatedDate() int64 {
	if o == nil || utils.IsNil(o.CreatedDate) {
		var ret int64
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditOperationWithUpdate) GetCreatedDateOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *AuditOperationWithUpdate) HasCreatedDate() bool {
	if o != nil && !utils.IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given int64 and assigns it to the CreatedDate field.
func (o *AuditOperationWithUpdate) SetCreatedDate(v int64) {
	o.CreatedDate = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditOperationWithUpdate) GetUpdatedBy() int64 {
	if o == nil || utils.IsNil(o.UpdatedBy.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditOperationWithUpdate) GetUpdatedByOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *AuditOperationWithUpdate) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy.IsSet() {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given NullableInt64 and assigns it to the UpdatedBy field.
func (o *AuditOperationWithUpdate) SetUpdatedBy(v int64) {
	o.UpdatedBy.Set(&v)
}
// SetUpdatedByNil sets the value for UpdatedBy to be an explicit nil
func (o *AuditOperationWithUpdate) SetUpdatedByNil() {
	o.UpdatedBy.Set(nil)
}

// UnsetUpdatedBy ensures that no value is present for UpdatedBy, not even an explicit nil
func (o *AuditOperationWithUpdate) UnsetUpdatedBy() {
	o.UpdatedBy.Unset()
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditOperationWithUpdate) GetUpdatedDate() int64 {
	if o == nil || utils.IsNil(o.UpdatedDate.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedDate.Get()
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditOperationWithUpdate) GetUpdatedDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedDate.Get(), o.UpdatedDate.IsSet()
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *AuditOperationWithUpdate) HasUpdatedDate() bool {
	if o != nil && o.UpdatedDate.IsSet() {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given NullableInt64 and assigns it to the UpdatedDate field.
func (o *AuditOperationWithUpdate) SetUpdatedDate(v int64) {
	o.UpdatedDate.Set(&v)
}
// SetUpdatedDateNil sets the value for UpdatedDate to be an explicit nil
func (o *AuditOperationWithUpdate) SetUpdatedDateNil() {
	o.UpdatedDate.Set(nil)
}

// UnsetUpdatedDate ensures that no value is present for UpdatedDate, not even an explicit nil
func (o *AuditOperationWithUpdate) UnsetUpdatedDate() {
	o.UpdatedDate.Unset()
}

func (o AuditOperationWithUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditOperationWithUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if o.UpdatedBy.IsSet() {
		toSerialize["updatedBy"] = o.UpdatedBy.Get()
	}
	if o.UpdatedDate.IsSet() {
		toSerialize["updatedDate"] = o.UpdatedDate.Get()
	}
	return toSerialize, nil
}

type NullableAuditOperationWithUpdate struct {
	value *AuditOperationWithUpdate
	isSet bool
}

func (v NullableAuditOperationWithUpdate) Get() *AuditOperationWithUpdate {
	return v.value
}

func (v *NullableAuditOperationWithUpdate) Set(val *AuditOperationWithUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditOperationWithUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditOperationWithUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditOperationWithUpdate(val *AuditOperationWithUpdate) *NullableAuditOperationWithUpdate {
	return &NullableAuditOperationWithUpdate{value: val, isSet: true}
}

func (v NullableAuditOperationWithUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditOperationWithUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


