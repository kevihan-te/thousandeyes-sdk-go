/*
ThousandEyes for OpenTelemetry API

ThousandEyes for OpenTelemetry provides machine-to-machine integration between ThousandEyes and its customers. It allows you to export ThousandEyes telemetry data in OTel format, which is widely used in the industry. With ThousandEyes for OTel, you can leverage frameworks widely used in the observability domain - such as Splunk, Grafana, and Honeycomb - to capture and analyze ThousandEyes data. Any client that supports OTel can use ThousandEyes for OpenTelemetry.  ThousandEyes for OTel is made up of the following components:  * Data streaming APIs that you can use to configure and enable your ThousandEyes tests with OTel-compatible streams, in particular to configure how ThousandEyes telemetry data is exported to client integrations. * A set of streaming pipelines called _collectors_ that actively fetch ThousandEyes network test data, enrich the data with some additional detail, filter, and push the data to the customer-configured endpoints, depending on what you configure via the public APIs. * Third-party OTel collectors that receive, transform, filter, and export different metrics to client applications such as AppD, or any other OTel-capable client configuration.  For more information about ThousandEyes for OpenTelemetry, see the [documentation](https://docs.thousandeyes.com/product-documentation/api/opentelemetry). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the BadRequestError type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BadRequestError{}

// BadRequestError struct for BadRequestError
type BadRequestError struct {
	Timestamp *int64 `json:"timestamp,omitempty"`
	HttpStatus *string `json:"httpStatus,omitempty"`
	Errors []string `json:"errors,omitempty"`
	Path *string `json:"path,omitempty"`
}

// NewBadRequestError instantiates a new BadRequestError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadRequestError() *BadRequestError {
	this := BadRequestError{}
	return &this
}

// NewBadRequestErrorWithDefaults instantiates a new BadRequestError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadRequestErrorWithDefaults() *BadRequestError {
	this := BadRequestError{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *BadRequestError) GetTimestamp() int64 {
	if o == nil || utils.IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestError) GetTimestampOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *BadRequestError) HasTimestamp() bool {
	if o != nil && !utils.IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *BadRequestError) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetHttpStatus returns the HttpStatus field value if set, zero value otherwise.
func (o *BadRequestError) GetHttpStatus() string {
	if o == nil || utils.IsNil(o.HttpStatus) {
		var ret string
		return ret
	}
	return *o.HttpStatus
}

// GetHttpStatusOk returns a tuple with the HttpStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestError) GetHttpStatusOk() (*string, bool) {
	if o == nil || utils.IsNil(o.HttpStatus) {
		return nil, false
	}
	return o.HttpStatus, true
}

// HasHttpStatus returns a boolean if a field has been set.
func (o *BadRequestError) HasHttpStatus() bool {
	if o != nil && !utils.IsNil(o.HttpStatus) {
		return true
	}

	return false
}

// SetHttpStatus gets a reference to the given string and assigns it to the HttpStatus field.
func (o *BadRequestError) SetHttpStatus(v string) {
	o.HttpStatus = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BadRequestError) GetErrors() []string {
	if o == nil || utils.IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestError) GetErrorsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BadRequestError) HasErrors() bool {
	if o != nil && !utils.IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *BadRequestError) SetErrors(v []string) {
	o.Errors = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *BadRequestError) GetPath() string {
	if o == nil || utils.IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestError) GetPathOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *BadRequestError) HasPath() bool {
	if o != nil && !utils.IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *BadRequestError) SetPath(v string) {
	o.Path = &v
}

func (o BadRequestError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BadRequestError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !utils.IsNil(o.HttpStatus) {
		toSerialize["httpStatus"] = o.HttpStatus
	}
	if !utils.IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !utils.IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableBadRequestError struct {
	value *BadRequestError
	isSet bool
}

func (v NullableBadRequestError) Get() *BadRequestError {
	return v.value
}

func (v *NullableBadRequestError) Set(val *BadRequestError) {
	v.value = val
	v.isSet = true
}

func (v NullableBadRequestError) IsSet() bool {
	return v.isSet
}

func (v *NullableBadRequestError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadRequestError(val *BadRequestError) *NullableBadRequestError {
	return &NullableBadRequestError{value: val, isSet: true}
}

func (v NullableBadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadRequestError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


