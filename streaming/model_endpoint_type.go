/*
ThousandEyes for OpenTelemetry API

ThousandEyes for OpenTelemetry provides machine-to-machine integration between ThousandEyes and its customers. It allows you to export ThousandEyes telemetry data in OTel format, which is widely used in the industry. With ThousandEyes for OTel, you can leverage frameworks widely used in the observability domain - such as Splunk, Grafana, and Honeycomb - to capture and analyze ThousandEyes data. Any client that supports OTel can use ThousandEyes for OpenTelemetry.  ThousandEyes for OTel is made up of the following components:  * Data streaming APIs that you can use to configure and enable your ThousandEyes tests with OTel-compatible streams, in particular to configure how ThousandEyes telemetry data is exported to client integrations. * A set of streaming pipelines called _collectors_ that actively fetch ThousandEyes network test data, enrich the data with some additional detail, filter, and push the data to the customer-configured endpoints, depending on what you configure via the public APIs. * Third-party OTel collectors that receive, transform, filter, and export different metrics to client applications such as AppD, or any other OTel-capable client configuration.  For more information about ThousandEyes for OpenTelemetry, see the [documentation](https://docs.thousandeyes.com/product-documentation/api/opentelemetry). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"fmt"
)

// EndpointType The type of connection used to send data to the endpoint. **Note**: When using the `splunk-hec` 'type', the `EndpointType` must be `http`.
type EndpointType string

// List of EndpointType
const (
	ENDPOINTTYPE_GRPC EndpointType = "grpc"
	ENDPOINTTYPE_HTTP EndpointType = "http"
)

// All allowed values of EndpointType enum
var AllowedEndpointTypeEnumValues = []EndpointType{
	"grpc",
	"http",
}

func (v *EndpointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointType(value)
	for _, existing := range AllowedEndpointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointType", value)
}

// NewEndpointTypeFromValue returns a pointer to a valid EndpointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTypeFromValue(v string) (*EndpointType, error) {
	ev := EndpointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointType: valid values are %v", v, AllowedEndpointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointType) IsValid() bool {
	for _, existing := range AllowedEndpointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointType value
func (v EndpointType) Ptr() *EndpointType {
	return &v
}

type NullableEndpointType struct {
	value *EndpointType
	isSet bool
}

func (v NullableEndpointType) Get() *EndpointType {
	return v.value
}

func (v *NullableEndpointType) Set(val *EndpointType) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointType) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointType(val *EndpointType) *NullableEndpointType {
	return &NullableEndpointType{value: val, isSet: true}
}

func (v NullableEndpointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

