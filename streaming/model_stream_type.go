/*
ThousandEyes for OpenTelemetry API

ThousandEyes for OpenTelemetry provides machine-to-machine integration between ThousandEyes and its customers. It allows you to export ThousandEyes telemetry data in OTel format, which is widely used in the industry. With ThousandEyes for OTel, you can leverage frameworks widely used in the observability domain - such as Splunk, Grafana, and Honeycomb - to capture and analyze ThousandEyes data. Any client that supports OTel can use ThousandEyes for OpenTelemetry.  ThousandEyes for OTel is made up of the following components:  * Data streaming APIs that you can use to configure and enable your ThousandEyes tests with OTel-compatible streams, in particular to configure how ThousandEyes telemetry data is exported to client integrations. * A set of streaming pipelines called _collectors_ that actively fetch ThousandEyes network test data, enrich the data with some additional detail, filter, and push the data to the customer-configured endpoints, depending on what you configure via the public APIs. * Third-party OTel collectors that receive, transform, filter, and export different metrics to client applications such as AppD, or any other OTel-capable client configuration.  For more information about ThousandEyes for OpenTelemetry, see the [documentation](https://docs.thousandeyes.com/product-documentation/api/opentelemetry). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"fmt"
)

// StreamType The type of data stream to configure. When using `splunk-hec`:   - `endpointType` must be `http`.   - `customHeaders` must contain just one element with the key `token` and the value of the *Splunk HEC Token*.
type StreamType string

// List of StreamType
const (
	STREAMTYPE_OPENTELEMETRY StreamType = "opentelemetry"
	STREAMTYPE_SPLUNK_HEC StreamType = "splunk-hec"
)

// All allowed values of StreamType enum
var AllowedStreamTypeEnumValues = []StreamType{
	"opentelemetry",
	"splunk-hec",
}

func (v *StreamType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamType(value)
	for _, existing := range AllowedStreamTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamType", value)
}

// NewStreamTypeFromValue returns a pointer to a valid StreamType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamTypeFromValue(v string) (*StreamType, error) {
	ev := StreamType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamType: valid values are %v", v, AllowedStreamTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamType) IsValid() bool {
	for _, existing := range AllowedStreamTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamType value
func (v StreamType) Ptr() *StreamType {
	return &v
}

type NullableStreamType struct {
	value *StreamType
	isSet bool
}

func (v NullableStreamType) Get() *StreamType {
	return v.value
}

func (v *NullableStreamType) Set(val *StreamType) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamType) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamType(val *StreamType) *NullableStreamType {
	return &NullableStreamType{value: val, isSet: true}
}

func (v NullableStreamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

