/*
ThousandEyes for OpenTelemetry API

ThousandEyes for OpenTelemetry provides machine-to-machine integration between ThousandEyes and its customers. It allows you to export ThousandEyes telemetry data in OTel format, which is widely used in the industry. With ThousandEyes for OTel, you can leverage frameworks widely used in the observability domain - such as Splunk, Grafana, and Honeycomb - to capture and analyze ThousandEyes data. Any client that supports OTel can use ThousandEyes for OpenTelemetry.  ThousandEyes for OTel is made up of the following components:  * Data streaming APIs that you can use to configure and enable your ThousandEyes tests with OTel-compatible streams, in particular to configure how ThousandEyes telemetry data is exported to client integrations. * A set of streaming pipelines called _collectors_ that actively fetch ThousandEyes network test data, enrich the data with some additional detail, filter, and push the data to the customer-configured endpoints, depending on what you configure via the public APIs. * Third-party OTel collectors that receive, transform, filter, and export different metrics to client applications such as AppD, or any other OTel-capable client configuration.  For more information about ThousandEyes for OpenTelemetry, see the [documentation](https://docs.thousandeyes.com/product-documentation/api/opentelemetry). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package streaming

import (
	"encoding/json"
	"fmt"
)

// TestType This is a read only value, as test type is implicit in the test creation url.
type TestType string

// List of TestType
const (
	TESTTYPE_API TestType = "api"
	TESTTYPE_AGENT_TO_AGENT TestType = "agent-to-agent"
	TESTTYPE_AGENT_TO_SERVER TestType = "agent-to-server"
	TESTTYPE_BGP TestType = "bgp"
	TESTTYPE_HTTP_SERVER TestType = "http-server"
	TESTTYPE_PAGE_LOAD TestType = "page-load"
	TESTTYPE_WEB_TRANSACTIONS TestType = "web-transactions"
	TESTTYPE_FTP_SERVER TestType = "ftp-server"
	TESTTYPE_DNS_TRACE TestType = "dns-trace"
	TESTTYPE_DNS_SERVER TestType = "dns-server"
	TESTTYPE_DNSSEC TestType = "dnssec"
	TESTTYPE_SIP_SERVER TestType = "sip-server"
	TESTTYPE_VOICE TestType = "voice"
)

// All allowed values of TestType enum
var AllowedTestTypeEnumValues = []TestType{
	"api",
	"agent-to-agent",
	"agent-to-server",
	"bgp",
	"http-server",
	"page-load",
	"web-transactions",
	"ftp-server",
	"dns-trace",
	"dns-server",
	"dnssec",
	"sip-server",
	"voice",
}

func (v *TestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestType(value)
	for _, existing := range AllowedTestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestType", value)
}

// NewTestTypeFromValue returns a pointer to a valid TestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestTypeFromValue(v string) (*TestType, error) {
	ev := TestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestType: valid values are %v", v, AllowedTestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestType) IsValid() bool {
	for _, existing := range AllowedTestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestType value
func (v TestType) Ptr() *TestType {
	return &v
}

type NullableTestType struct {
	value *TestType
	isSet bool
}

func (v NullableTestType) Get() *TestType {
	return v.value
}

func (v *NullableTestType) Set(val *TestType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestType(val *TestType) *NullableTestType {
	return &NullableTestType{value: val, isSet: true}
}

func (v NullableTestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

