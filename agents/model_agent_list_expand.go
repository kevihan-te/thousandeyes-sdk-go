/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
	"fmt"
)

// AgentListExpand the model 'AgentListExpand'
type AgentListExpand string

// List of AgentListExpand
const (
	AGENTLISTEXPAND_CLUSTER_MEMBER AgentListExpand = "cluster-member"
)

// All allowed values of AgentListExpand enum
var AllowedAgentListExpandEnumValues = []AgentListExpand{
	"cluster-member",
}

func (v *AgentListExpand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentListExpand(value)
	for _, existing := range AllowedAgentListExpandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentListExpand", value)
}

// NewAgentListExpandFromValue returns a pointer to a valid AgentListExpand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentListExpandFromValue(v string) (*AgentListExpand, error) {
	ev := AgentListExpand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentListExpand: valid values are %v", v, AllowedAgentListExpandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentListExpand) IsValid() bool {
	for _, existing := range AllowedAgentListExpandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentListExpand value
func (v AgentListExpand) Ptr() *AgentListExpand {
	return &v
}

type NullableAgentListExpand struct {
	value *AgentListExpand
	isSet bool
}

func (v NullableAgentListExpand) Get() *AgentListExpand {
	return v.value
}

func (v *NullableAgentListExpand) Set(val *AgentListExpand) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentListExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentListExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentListExpand(val *AgentListExpand) *NullableAgentListExpand {
	return &NullableAgentListExpand{value: val, isSet: true}
}

func (v NullableAgentListExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentListExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

