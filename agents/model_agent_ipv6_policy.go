/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
	"fmt"
)

// AgentIpv6Policy IP version policy, (Enterprise Agents and Enterprise Clusters only)
type AgentIpv6Policy string

// List of AgentIpv6Policy
const (
	AGENTIPV6POLICY_FORCE_IPV4 AgentIpv6Policy = "force-ipv4"
	AGENTIPV6POLICY_PREFER_IPV6 AgentIpv6Policy = "prefer-ipv6"
	AGENTIPV6POLICY_FORCE_IPV6 AgentIpv6Policy = "force-ipv6"
)

// All allowed values of AgentIpv6Policy enum
var AllowedAgentIpv6PolicyEnumValues = []AgentIpv6Policy{
	"force-ipv4",
	"prefer-ipv6",
	"force-ipv6",
}

func (v *AgentIpv6Policy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentIpv6Policy(value)
	for _, existing := range AllowedAgentIpv6PolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentIpv6Policy", value)
}

// NewAgentIpv6PolicyFromValue returns a pointer to a valid AgentIpv6Policy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentIpv6PolicyFromValue(v string) (*AgentIpv6Policy, error) {
	ev := AgentIpv6Policy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentIpv6Policy: valid values are %v", v, AllowedAgentIpv6PolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentIpv6Policy) IsValid() bool {
	for _, existing := range AllowedAgentIpv6PolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentIpv6Policy value
func (v AgentIpv6Policy) Ptr() *AgentIpv6Policy {
	return &v
}

type NullableAgentIpv6Policy struct {
	value *AgentIpv6Policy
	isSet bool
}

func (v NullableAgentIpv6Policy) Get() *AgentIpv6Policy {
	return v.value
}

func (v *NullableAgentIpv6Policy) Set(val *AgentIpv6Policy) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentIpv6Policy) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentIpv6Policy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentIpv6Policy(val *AgentIpv6Policy) *NullableAgentIpv6Policy {
	return &NullableAgentIpv6Policy{value: val, isSet: true}
}

func (v NullableAgentIpv6Policy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentIpv6Policy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

