/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
	"fmt"
)

// AgentDetailsExpand the model 'AgentDetailsExpand'
type AgentDetailsExpand string

// List of AgentDetailsExpand
const (
	AGENTDETAILSEXPAND_CLUSTER_MEMBER AgentDetailsExpand = "cluster-member"
	AGENTDETAILSEXPAND_TEST AgentDetailsExpand = "test"
	AGENTDETAILSEXPAND_NOTIFICATION_RULE AgentDetailsExpand = "notification-rule"
)

// All allowed values of AgentDetailsExpand enum
var AllowedAgentDetailsExpandEnumValues = []AgentDetailsExpand{
	"cluster-member",
	"test",
	"notification-rule",
}

func (v *AgentDetailsExpand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentDetailsExpand(value)
	for _, existing := range AllowedAgentDetailsExpandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentDetailsExpand", value)
}

// NewAgentDetailsExpandFromValue returns a pointer to a valid AgentDetailsExpand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentDetailsExpandFromValue(v string) (*AgentDetailsExpand, error) {
	ev := AgentDetailsExpand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentDetailsExpand: valid values are %v", v, AllowedAgentDetailsExpandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentDetailsExpand) IsValid() bool {
	for _, existing := range AllowedAgentDetailsExpandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentDetailsExpand value
func (v AgentDetailsExpand) Ptr() *AgentDetailsExpand {
	return &v
}

type NullableAgentDetailsExpand struct {
	value *AgentDetailsExpand
	isSet bool
}

func (v NullableAgentDetailsExpand) Get() *AgentDetailsExpand {
	return v.value
}

func (v *NullableAgentDetailsExpand) Set(val *AgentDetailsExpand) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentDetailsExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentDetailsExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentDetailsExpand(val *AgentDetailsExpand) *NullableAgentDetailsExpand {
	return &NullableAgentDetailsExpand{value: val, isSet: true}
}

func (v NullableAgentDetailsExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentDetailsExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

