/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
	"fmt"
)

// TestType This is a read only value, as test type is implicit in the test creation url.
type TestType string

// List of TestType
const (
	TESTTYPE_API TestType = "api"
	TESTTYPE_AGENT_TO_AGENT TestType = "agent-to-agent"
	TESTTYPE_AGENT_TO_SERVER TestType = "agent-to-server"
	TESTTYPE_BGP TestType = "bgp"
	TESTTYPE_HTTP_SERVER TestType = "http-server"
	TESTTYPE_PAGE_LOAD TestType = "page-load"
	TESTTYPE_WEB_TRANSACTIONS TestType = "web-transactions"
	TESTTYPE_FTP_SERVER TestType = "ftp-server"
	TESTTYPE_DNS_TRACE TestType = "dns-trace"
	TESTTYPE_DNS_SERVER TestType = "dns-server"
	TESTTYPE_DNSSEC TestType = "dnssec"
	TESTTYPE_SIP_SERVER TestType = "sip-server"
	TESTTYPE_VOICE TestType = "voice"
)

// All allowed values of TestType enum
var AllowedTestTypeEnumValues = []TestType{
	"api",
	"agent-to-agent",
	"agent-to-server",
	"bgp",
	"http-server",
	"page-load",
	"web-transactions",
	"ftp-server",
	"dns-trace",
	"dns-server",
	"dnssec",
	"sip-server",
	"voice",
}

func (v *TestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestType(value)
	for _, existing := range AllowedTestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestType", value)
}

// NewTestTypeFromValue returns a pointer to a valid TestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestTypeFromValue(v string) (*TestType, error) {
	ev := TestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestType: valid values are %v", v, AllowedTestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestType) IsValid() bool {
	for _, existing := range AllowedTestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestType value
func (v TestType) Ptr() *TestType {
	return &v
}

type NullableTestType struct {
	value *TestType
	isSet bool
}

func (v NullableTestType) Get() *TestType {
	return v.value
}

func (v *NullableTestType) Set(val *TestType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestType(val *TestType) *NullableTestType {
	return &NullableTestType{value: val, isSet: true}
}

func (v NullableTestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

