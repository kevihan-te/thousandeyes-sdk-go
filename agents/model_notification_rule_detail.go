/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NotificationRuleDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationRuleDetail{}

// NotificationRuleDetail struct for NotificationRuleDetail
type NotificationRuleDetail struct {
	// Agent notification rule ID
	RuleId *string `json:"ruleId,omitempty"`
	// Name of the agent notification rule
	RuleName *string `json:"ruleName,omitempty"`
	// Expression of agent notification rule
	Expression *string `json:"expression,omitempty"`
	// Send notification when notification clears
	NotifyOnClear *bool `json:"notifyOnClear,omitempty"`
	// Agent notification rule will be automatically included on all new Enterprise Agents.
	IsDefault *bool `json:"isDefault,omitempty"`
	Notifications *AgentNotification `json:"notifications,omitempty"`
	Agents []AgentResponse `json:"agents,omitempty"`
	Links *SelfLinks `json:"_links,omitempty"`
}

// NewNotificationRuleDetail instantiates a new NotificationRuleDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRuleDetail() *NotificationRuleDetail {
	this := NotificationRuleDetail{}
	return &this
}

// NewNotificationRuleDetailWithDefaults instantiates a new NotificationRuleDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleDetailWithDefaults() *NotificationRuleDetail {
	this := NotificationRuleDetail{}
	return &this
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetRuleId() string {
	if o == nil || utils.IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetRuleIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasRuleId() bool {
	if o != nil && !utils.IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *NotificationRuleDetail) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetRuleName() string {
	if o == nil || utils.IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetRuleNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasRuleName() bool {
	if o != nil && !utils.IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *NotificationRuleDetail) SetRuleName(v string) {
	o.RuleName = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetExpression() string {
	if o == nil || utils.IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetExpressionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasExpression() bool {
	if o != nil && !utils.IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *NotificationRuleDetail) SetExpression(v string) {
	o.Expression = &v
}

// GetNotifyOnClear returns the NotifyOnClear field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetNotifyOnClear() bool {
	if o == nil || utils.IsNil(o.NotifyOnClear) {
		var ret bool
		return ret
	}
	return *o.NotifyOnClear
}

// GetNotifyOnClearOk returns a tuple with the NotifyOnClear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetNotifyOnClearOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NotifyOnClear) {
		return nil, false
	}
	return o.NotifyOnClear, true
}

// HasNotifyOnClear returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasNotifyOnClear() bool {
	if o != nil && !utils.IsNil(o.NotifyOnClear) {
		return true
	}

	return false
}

// SetNotifyOnClear gets a reference to the given bool and assigns it to the NotifyOnClear field.
func (o *NotificationRuleDetail) SetNotifyOnClear(v bool) {
	o.NotifyOnClear = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetIsDefault() bool {
	if o == nil || utils.IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetIsDefaultOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasIsDefault() bool {
	if o != nil && !utils.IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *NotificationRuleDetail) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetNotifications() AgentNotification {
	if o == nil || utils.IsNil(o.Notifications) {
		var ret AgentNotification
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetNotificationsOk() (*AgentNotification, bool) {
	if o == nil || utils.IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasNotifications() bool {
	if o != nil && !utils.IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given AgentNotification and assigns it to the Notifications field.
func (o *NotificationRuleDetail) SetNotifications(v AgentNotification) {
	o.Notifications = &v
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetAgents() []AgentResponse {
	if o == nil || utils.IsNil(o.Agents) {
		var ret []AgentResponse
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetAgentsOk() ([]AgentResponse, bool) {
	if o == nil || utils.IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasAgents() bool {
	if o != nil && !utils.IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []AgentResponse and assigns it to the Agents field.
func (o *NotificationRuleDetail) SetAgents(v []AgentResponse) {
	o.Agents = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NotificationRuleDetail) GetLinks() SelfLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret SelfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRuleDetail) GetLinksOk() (*SelfLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NotificationRuleDetail) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinks and assigns it to the Links field.
func (o *NotificationRuleDetail) SetLinks(v SelfLinks) {
	o.Links = &v
}

func (o NotificationRuleDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRuleDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	if !utils.IsNil(o.RuleName) {
		toSerialize["ruleName"] = o.RuleName
	}
	if !utils.IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !utils.IsNil(o.NotifyOnClear) {
		toSerialize["notifyOnClear"] = o.NotifyOnClear
	}
	if !utils.IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !utils.IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !utils.IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableNotificationRuleDetail struct {
	value *NotificationRuleDetail
	isSet bool
}

func (v NullableNotificationRuleDetail) Get() *NotificationRuleDetail {
	return v.value
}

func (v *NullableNotificationRuleDetail) Set(val *NotificationRuleDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRuleDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRuleDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRuleDetail(val *NotificationRuleDetail) *NullableNotificationRuleDetail {
	return &NullableNotificationRuleDetail{value: val, isSet: true}
}

func (v NullableNotificationRuleDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRuleDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


