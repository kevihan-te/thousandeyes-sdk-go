/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NotificationRule type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationRule{}

// NotificationRule struct for NotificationRule
type NotificationRule struct {
	// Agent notification rule ID
	RuleId *string `json:"ruleId,omitempty"`
	// Name of the agent notification rule
	RuleName *string `json:"ruleName,omitempty"`
	// Expression of agent notification rule
	Expression *string `json:"expression,omitempty"`
	// Send notification when notification clears
	NotifyOnClear *bool `json:"notifyOnClear,omitempty"`
	// Agent notification rule will be automatically included on all new Enterprise Agents.
	IsDefault *bool `json:"isDefault,omitempty"`
}

// NewNotificationRule instantiates a new NotificationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRule() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// NewNotificationRuleWithDefaults instantiates a new NotificationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleWithDefaults() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *NotificationRule) GetRuleId() string {
	if o == nil || utils.IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetRuleIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *NotificationRule) HasRuleId() bool {
	if o != nil && !utils.IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *NotificationRule) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *NotificationRule) GetRuleName() string {
	if o == nil || utils.IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetRuleNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *NotificationRule) HasRuleName() bool {
	if o != nil && !utils.IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *NotificationRule) SetRuleName(v string) {
	o.RuleName = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *NotificationRule) GetExpression() string {
	if o == nil || utils.IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetExpressionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *NotificationRule) HasExpression() bool {
	if o != nil && !utils.IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *NotificationRule) SetExpression(v string) {
	o.Expression = &v
}

// GetNotifyOnClear returns the NotifyOnClear field value if set, zero value otherwise.
func (o *NotificationRule) GetNotifyOnClear() bool {
	if o == nil || utils.IsNil(o.NotifyOnClear) {
		var ret bool
		return ret
	}
	return *o.NotifyOnClear
}

// GetNotifyOnClearOk returns a tuple with the NotifyOnClear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNotifyOnClearOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NotifyOnClear) {
		return nil, false
	}
	return o.NotifyOnClear, true
}

// HasNotifyOnClear returns a boolean if a field has been set.
func (o *NotificationRule) HasNotifyOnClear() bool {
	if o != nil && !utils.IsNil(o.NotifyOnClear) {
		return true
	}

	return false
}

// SetNotifyOnClear gets a reference to the given bool and assigns it to the NotifyOnClear field.
func (o *NotificationRule) SetNotifyOnClear(v bool) {
	o.NotifyOnClear = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *NotificationRule) GetIsDefault() bool {
	if o == nil || utils.IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetIsDefaultOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *NotificationRule) HasIsDefault() bool {
	if o != nil && !utils.IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *NotificationRule) SetIsDefault(v bool) {
	o.IsDefault = &v
}

func (o NotificationRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	if !utils.IsNil(o.RuleName) {
		toSerialize["ruleName"] = o.RuleName
	}
	if !utils.IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !utils.IsNil(o.NotifyOnClear) {
		toSerialize["notifyOnClear"] = o.NotifyOnClear
	}
	if !utils.IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	return toSerialize, nil
}

type NullableNotificationRule struct {
	value *NotificationRule
	isSet bool
}

func (v NullableNotificationRule) Get() *NotificationRule {
	return v.value
}

func (v *NullableNotificationRule) Set(val *NotificationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRule(val *NotificationRule) *NullableNotificationRule {
	return &NullableNotificationRule{value: val, isSet: true}
}

func (v NullableNotificationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


