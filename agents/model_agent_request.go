/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AgentRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AgentRequest{}

// AgentRequest struct for AgentRequest
type AgentRequest struct {
	// Name of the agent.
	AgentName *string `json:"agentName,omitempty"`
	// Flag indicating if the agent is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Contains a list of account groups IDs. See `/accounts-groups` for a list of account IDs
	AccountGroups []string `json:"accountGroups,omitempty"`
	Ipv6Policy *AgentIpv6Policy `json:"ipv6Policy,omitempty"`
	// Flag indicating if the agent retains cache.
	KeepBrowserCache *bool `json:"keepBrowserCache,omitempty"`
	// Test target IP address.
	TargetForTests *string `json:"targetForTests,omitempty"`
	// Public IP ranges for rDNS lookups. The range must be in CIDR notation; for example, 10.1.1.0/24. Maximum of 5 prefixes allowed (Enterprise Agents and Enterprise Agent clusters only).
	LocalResolutionPrefixes []string `json:"localResolutionPrefixes,omitempty"`
	// Contains list of test IDs. See `/tests` to pull a list of available tests.
	Tests []string `json:"tests,omitempty"`
}

// NewAgentRequest instantiates a new AgentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentRequest() *AgentRequest {
	this := AgentRequest{}
	return &this
}

// NewAgentRequestWithDefaults instantiates a new AgentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentRequestWithDefaults() *AgentRequest {
	this := AgentRequest{}
	return &this
}

// GetAgentName returns the AgentName field value if set, zero value otherwise.
func (o *AgentRequest) GetAgentName() string {
	if o == nil || utils.IsNil(o.AgentName) {
		var ret string
		return ret
	}
	return *o.AgentName
}

// GetAgentNameOk returns a tuple with the AgentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetAgentNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentName) {
		return nil, false
	}
	return o.AgentName, true
}

// HasAgentName returns a boolean if a field has been set.
func (o *AgentRequest) HasAgentName() bool {
	if o != nil && !utils.IsNil(o.AgentName) {
		return true
	}

	return false
}

// SetAgentName gets a reference to the given string and assigns it to the AgentName field.
func (o *AgentRequest) SetAgentName(v string) {
	o.AgentName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AgentRequest) GetEnabled() bool {
	if o == nil || utils.IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AgentRequest) HasEnabled() bool {
	if o != nil && !utils.IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AgentRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAccountGroups returns the AccountGroups field value if set, zero value otherwise.
func (o *AgentRequest) GetAccountGroups() []string {
	if o == nil || utils.IsNil(o.AccountGroups) {
		var ret []string
		return ret
	}
	return o.AccountGroups
}

// GetAccountGroupsOk returns a tuple with the AccountGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetAccountGroupsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AccountGroups) {
		return nil, false
	}
	return o.AccountGroups, true
}

// HasAccountGroups returns a boolean if a field has been set.
func (o *AgentRequest) HasAccountGroups() bool {
	if o != nil && !utils.IsNil(o.AccountGroups) {
		return true
	}

	return false
}

// SetAccountGroups gets a reference to the given []string and assigns it to the AccountGroups field.
func (o *AgentRequest) SetAccountGroups(v []string) {
	o.AccountGroups = v
}

// GetIpv6Policy returns the Ipv6Policy field value if set, zero value otherwise.
func (o *AgentRequest) GetIpv6Policy() AgentIpv6Policy {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		var ret AgentIpv6Policy
		return ret
	}
	return *o.Ipv6Policy
}

// GetIpv6PolicyOk returns a tuple with the Ipv6Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetIpv6PolicyOk() (*AgentIpv6Policy, bool) {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		return nil, false
	}
	return o.Ipv6Policy, true
}

// HasIpv6Policy returns a boolean if a field has been set.
func (o *AgentRequest) HasIpv6Policy() bool {
	if o != nil && !utils.IsNil(o.Ipv6Policy) {
		return true
	}

	return false
}

// SetIpv6Policy gets a reference to the given AgentIpv6Policy and assigns it to the Ipv6Policy field.
func (o *AgentRequest) SetIpv6Policy(v AgentIpv6Policy) {
	o.Ipv6Policy = &v
}

// GetKeepBrowserCache returns the KeepBrowserCache field value if set, zero value otherwise.
func (o *AgentRequest) GetKeepBrowserCache() bool {
	if o == nil || utils.IsNil(o.KeepBrowserCache) {
		var ret bool
		return ret
	}
	return *o.KeepBrowserCache
}

// GetKeepBrowserCacheOk returns a tuple with the KeepBrowserCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetKeepBrowserCacheOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.KeepBrowserCache) {
		return nil, false
	}
	return o.KeepBrowserCache, true
}

// HasKeepBrowserCache returns a boolean if a field has been set.
func (o *AgentRequest) HasKeepBrowserCache() bool {
	if o != nil && !utils.IsNil(o.KeepBrowserCache) {
		return true
	}

	return false
}

// SetKeepBrowserCache gets a reference to the given bool and assigns it to the KeepBrowserCache field.
func (o *AgentRequest) SetKeepBrowserCache(v bool) {
	o.KeepBrowserCache = &v
}

// GetTargetForTests returns the TargetForTests field value if set, zero value otherwise.
func (o *AgentRequest) GetTargetForTests() string {
	if o == nil || utils.IsNil(o.TargetForTests) {
		var ret string
		return ret
	}
	return *o.TargetForTests
}

// GetTargetForTestsOk returns a tuple with the TargetForTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetTargetForTestsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TargetForTests) {
		return nil, false
	}
	return o.TargetForTests, true
}

// HasTargetForTests returns a boolean if a field has been set.
func (o *AgentRequest) HasTargetForTests() bool {
	if o != nil && !utils.IsNil(o.TargetForTests) {
		return true
	}

	return false
}

// SetTargetForTests gets a reference to the given string and assigns it to the TargetForTests field.
func (o *AgentRequest) SetTargetForTests(v string) {
	o.TargetForTests = &v
}

// GetLocalResolutionPrefixes returns the LocalResolutionPrefixes field value if set, zero value otherwise.
func (o *AgentRequest) GetLocalResolutionPrefixes() []string {
	if o == nil || utils.IsNil(o.LocalResolutionPrefixes) {
		var ret []string
		return ret
	}
	return o.LocalResolutionPrefixes
}

// GetLocalResolutionPrefixesOk returns a tuple with the LocalResolutionPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetLocalResolutionPrefixesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.LocalResolutionPrefixes) {
		return nil, false
	}
	return o.LocalResolutionPrefixes, true
}

// HasLocalResolutionPrefixes returns a boolean if a field has been set.
func (o *AgentRequest) HasLocalResolutionPrefixes() bool {
	if o != nil && !utils.IsNil(o.LocalResolutionPrefixes) {
		return true
	}

	return false
}

// SetLocalResolutionPrefixes gets a reference to the given []string and assigns it to the LocalResolutionPrefixes field.
func (o *AgentRequest) SetLocalResolutionPrefixes(v []string) {
	o.LocalResolutionPrefixes = v
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *AgentRequest) GetTests() []string {
	if o == nil || utils.IsNil(o.Tests) {
		var ret []string
		return ret
	}
	return o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentRequest) GetTestsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Tests) {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *AgentRequest) HasTests() bool {
	if o != nil && !utils.IsNil(o.Tests) {
		return true
	}

	return false
}

// SetTests gets a reference to the given []string and assigns it to the Tests field.
func (o *AgentRequest) SetTests(v []string) {
	o.Tests = v
}

func (o AgentRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AgentName) {
		toSerialize["agentName"] = o.AgentName
	}
	if !utils.IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !utils.IsNil(o.AccountGroups) {
		toSerialize["accountGroups"] = o.AccountGroups
	}
	if !utils.IsNil(o.Ipv6Policy) {
		toSerialize["ipv6Policy"] = o.Ipv6Policy
	}
	if !utils.IsNil(o.KeepBrowserCache) {
		toSerialize["keepBrowserCache"] = o.KeepBrowserCache
	}
	if !utils.IsNil(o.TargetForTests) {
		toSerialize["targetForTests"] = o.TargetForTests
	}
	if !utils.IsNil(o.LocalResolutionPrefixes) {
		toSerialize["localResolutionPrefixes"] = o.LocalResolutionPrefixes
	}
	if !utils.IsNil(o.Tests) {
		toSerialize["tests"] = o.Tests
	}
	return toSerialize, nil
}

type NullableAgentRequest struct {
	value *AgentRequest
	isSet bool
}

func (v NullableAgentRequest) Get() *AgentRequest {
	return v.value
}

func (v *NullableAgentRequest) Set(val *AgentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentRequest(val *AgentRequest) *NullableAgentRequest {
	return &NullableAgentRequest{value: val, isSet: true}
}

func (v NullableAgentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


