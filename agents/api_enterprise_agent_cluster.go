/*
Agents API

 ## Overview Manage Cloud and Enterprise Agents available to your account in ThousandEyes.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package agents

import (
	"bytes"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/client"
	internalerror "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/error"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/request"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EnterpriseAgentClusterAPIService EnterpriseAgentClusterAPI service
type EnterpriseAgentClusterAPIService client.Service

type ApiAssignAgentToClusterRequest struct {

	ApiService *EnterpriseAgentClusterAPIService
	agentId string
	agentClusterAssignRequest *AgentClusterAssignRequest
	aid *string
	expand *[]AgentDetailsExpand
}

func (r ApiAssignAgentToClusterRequest) AgentClusterAssignRequest(agentClusterAssignRequest AgentClusterAssignRequest) ApiAssignAgentToClusterRequest {
	r.agentClusterAssignRequest = &agentClusterAssignRequest
	return r
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiAssignAgentToClusterRequest) Aid(aid string) ApiAssignAgentToClusterRequest {
	r.aid = &aid
	return r
}

// Optional parameter, off by default. Indicates which agent sub-resource to expand. For example, if you wish to expand the &#x60;clusterMembers&#x60; sub-resource, pass the &#x60;?expand&#x3D;cluster-member&#x60; query.
func (r ApiAssignAgentToClusterRequest) Expand(expand []AgentDetailsExpand) ApiAssignAgentToClusterRequest {
	r.expand = &expand
	return r
}

func (r ApiAssignAgentToClusterRequest) Execute() (*AgentDetails, *http.Response, error) {
	return r.ApiService.AssignAgentToClusterExecute(r)
}

/*
AssignAgentToCluster Add member to Enterprise Agent cluster

Adding a member to an Enterprise Agent cluster converts a standalone Enterprise Agent to an Enterprise Agent cluster. If the agent represented by the path {agentId} is not already a cluster, it will be converted to a cluster.

The response will be a single Enterprise Agent Cluster. The converted Enterprise Agents will become cluster members, and can be returned using the `?expand=cluster-member` parameter.

This operation requires users to have the `Edit agents in account group` permission.

Upon successful cluster creation, the response includes:

* Information about the new cluster in the response body.

* Each cluster member receives a unique `memberId` within the cluster.

* The `memberId` value is not linked to the original `agentId` used in the request URL or POST body.

* The cluster name is based on the agent whose `agentId` is present in the request URL.

**Example - converting a single agent**
```
curl -X POST https://api.thousandeyes.com/v7/agents/64965/cluster/assign  -H "Authorization: Bearer $Bearer_token" 
````

**Example - converting multiple agents**
```
curl https://api.thousandeyes.com/v7/agents/64965/cluster/assign \
'{"agents":[
  "2277",
  "1234"
]}' \
-H "content-type:application/json" \
-H "Authorization: Bearer $Bearer_token" 
````

 @param agentId Unique ID for the Enterprise Agent cluster to add new agents to.
 @return ApiAssignAgentToClusterRequest
*/
func (a *EnterpriseAgentClusterAPIService) AssignAgentToCluster(agentId string ) ApiAssignAgentToClusterRequest {
	return ApiAssignAgentToClusterRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return AgentDetails
func (a *EnterpriseAgentClusterAPIService) AssignAgentToClusterExecute(r ApiAssignAgentToClusterRequest) (*AgentDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *AgentDetails
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/agents/{agentId}/cluster/assign"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentClusterAssignRequest == nil {
		return localVarReturnValue, nil, internalerror.ReportError("agentClusterAssignRequest is required and must be specified")
	}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentClusterAssignRequest
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnassignAgentFromClusterRequest struct {

	ApiService *EnterpriseAgentClusterAPIService
	agentId string
	agentClusterUnassignRequest *AgentClusterUnassignRequest
	aid *string
	expand *[]AgentDetailsExpand
}

func (r ApiUnassignAgentFromClusterRequest) AgentClusterUnassignRequest(agentClusterUnassignRequest AgentClusterUnassignRequest) ApiUnassignAgentFromClusterRequest {
	r.agentClusterUnassignRequest = &agentClusterUnassignRequest
	return r
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiUnassignAgentFromClusterRequest) Aid(aid string) ApiUnassignAgentFromClusterRequest {
	r.aid = &aid
	return r
}

// Optional parameter, off by default. Indicates which agent sub-resource to expand. For example, if you wish to expand the &#x60;clusterMembers&#x60; sub-resource, pass the &#x60;?expand&#x3D;cluster-member&#x60; query.
func (r ApiUnassignAgentFromClusterRequest) Expand(expand []AgentDetailsExpand) ApiUnassignAgentFromClusterRequest {
	r.expand = &expand
	return r
}

func (r ApiUnassignAgentFromClusterRequest) Execute() (*CloudEnterpriseAgents, *http.Response, error) {
	return r.ApiService.UnassignAgentFromClusterExecute(r)
}

/*
UnassignAgentFromCluster Remove member from Enterprise Agent cluster

Converts a cluster with a single or multiple Enterprise Agent members back to a standalone Enterprise Agent(s). This operation can also be used to remove one or more members from an Enterprise Agent cluster. Removed members revert to being standalone Enterprise Agents. If all members are removed from the cluster, the Enterprise Agent Cluster is deleted.

The response is an list of agents, containing both the Enterprise Agent Cluster (if it still exists), and the removed members, now as standalone Enterprise Agents. This operation is exclusive to Enterprise Agent clusters and can be accessed only by users with the `Edit agents in account group` permission.

On successful completion, the response contains the following information:

* The updated cluster information is provided in the response body, unless all members are removed from the cluster.

* Information about each removed member, now a standalone agent.

* When a non-last member is removed from the cluster, it receives a new `agentId` value. This new `agentId` is different from the `agentId` the agent had before joining the cluster, and it is also unrelated to the `memberId` value the agent had while being a part of the cluster.

* If all members are removed from the cluster, the cluster itself is converted back to a standalone Enterprise Agent too. Such standalone agent inherits the old cluster’s `agentId` value. The last `memberId` listed in the POST body inherits the cluster’s `agentId` value.

**Example - removing a single member**
```
curl -X POST https://api.thousandeyes.com/v7/agents/64965/cluster/unassign   \
'{"members":["55974"]}' \
-H "content-type:application/json" \
-H "Authorization: Bearer $Bearer_token" 
```

**Example - removing multiple members**
```
curl https://api.thousandeyes.com/v7/agents/64965/cluster/unassign \
'{"members":[
    "55974",
    "12313"]
 }' \
-H "content-type:application/json" \
-H "Authorization: Bearer $Bearer_token" 
```

 @param agentId Unique ID for the Enterprise Agent cluster to remove agents from.
 @return ApiUnassignAgentFromClusterRequest
*/
func (a *EnterpriseAgentClusterAPIService) UnassignAgentFromCluster(agentId string ) ApiUnassignAgentFromClusterRequest {
	return ApiUnassignAgentFromClusterRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return CloudEnterpriseAgents
func (a *EnterpriseAgentClusterAPIService) UnassignAgentFromClusterExecute(r ApiUnassignAgentFromClusterRequest) (*CloudEnterpriseAgents, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *CloudEnterpriseAgents
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/agents/{agentId}/cluster/unassign"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentClusterUnassignRequest == nil {
		return localVarReturnValue, nil, internalerror.ReportError("agentClusterUnassignRequest is required and must be specified")
	}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentClusterUnassignRequest
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *EnterpriseAgentClusterAPIService) decodeError(v interface{}, localVarBody []byte, localVarHTTPResponse *http.Response, newErr *internalerror.GenericAPIError) {
    err := a.Client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr.ErrorMessage = err.Error()
        return
    }
    newErr.ErrorMessage = internalerror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
    newErr.Model = v
}
