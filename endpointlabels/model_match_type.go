/*
Endpoint Agent Labels API

Manage labels applied to endpoint agents using this API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointlabels

import (
	"encoding/json"
	"fmt"
)

// MatchType Specifies how the filters are combined for matching this label.  * `and`: All filters must be matched. * `or`: Any of the filters should match. 
type MatchType string

// List of MatchType
const (
	MATCHTYPE_AND MatchType = "and"
	MATCHTYPE_OR MatchType = "or"
)

// All allowed values of MatchType enum
var AllowedMatchTypeEnumValues = []MatchType{
	"and",
	"or",
}

func (v *MatchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatchType(value)
	for _, existing := range AllowedMatchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatchType", value)
}

// NewMatchTypeFromValue returns a pointer to a valid MatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatchTypeFromValue(v string) (*MatchType, error) {
	ev := MatchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatchType: valid values are %v", v, AllowedMatchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatchType) IsValid() bool {
	for _, existing := range AllowedMatchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MatchType value
func (v MatchType) Ptr() *MatchType {
	return &v
}

type NullableMatchType struct {
	value *MatchType
	isSet bool
}

func (v NullableMatchType) Get() *MatchType {
	return v.value
}

func (v *NullableMatchType) Set(val *MatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchType(val *MatchType) *NullableMatchType {
	return &NullableMatchType{value: val, isSet: true}
}

func (v NullableMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

