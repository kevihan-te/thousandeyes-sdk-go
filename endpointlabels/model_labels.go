/*
Endpoint Agent Labels API

Manage labels applied to endpoint agents using this API. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointlabels

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Labels type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Labels{}

// Labels A list of Labels.
type Labels struct {
	Labels []LabelResponse `json:"labels,omitempty"`
	Links *PaginationNextAndSelfLink `json:"_links,omitempty"`
}

// NewLabels instantiates a new Labels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabels() *Labels {
	this := Labels{}
	return &this
}

// NewLabelsWithDefaults instantiates a new Labels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelsWithDefaults() *Labels {
	this := Labels{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Labels) GetLabels() []LabelResponse {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []LabelResponse
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Labels) GetLabelsOk() ([]LabelResponse, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Labels) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []LabelResponse and assigns it to the Labels field.
func (o *Labels) SetLabels(v []LabelResponse) {
	o.Labels = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Labels) GetLinks() PaginationNextAndSelfLink {
	if o == nil || utils.IsNil(o.Links) {
		var ret PaginationNextAndSelfLink
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Labels) GetLinksOk() (*PaginationNextAndSelfLink, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Labels) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PaginationNextAndSelfLink and assigns it to the Links field.
func (o *Labels) SetLinks(v PaginationNextAndSelfLink) {
	o.Links = &v
}

func (o Labels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Labels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableLabels struct {
	value *Labels
	isSet bool
}

func (v NullableLabels) Get() *Labels {
	return v.value
}

func (v *NullableLabels) Set(val *Labels) {
	v.value = val
	v.isSet = true
}

func (v NullableLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabels(val *Labels) *NullableLabels {
	return &NullableLabels{value: val, isSet: true}
}

func (v NullableLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


