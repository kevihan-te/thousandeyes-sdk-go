/*
Endpoint Agent Labels API

Manage labels applied to endpoint agents using this API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointlabels

import (
	"encoding/json"
	"fmt"
)

// LabelFilterMode Type of matching to be applied for the values:  * `in`: The value on the agent must match one of the list of values provided. * `not-in`: The value on the agent must not match any of the list of values provided. 
type LabelFilterMode string

// List of LabelFilterMode
const (
	LABELFILTERMODE_IN LabelFilterMode = "in"
	LABELFILTERMODE_NOT_IN LabelFilterMode = "not-in"
)

// All allowed values of LabelFilterMode enum
var AllowedLabelFilterModeEnumValues = []LabelFilterMode{
	"in",
	"not-in",
}

func (v *LabelFilterMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LabelFilterMode(value)
	for _, existing := range AllowedLabelFilterModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LabelFilterMode", value)
}

// NewLabelFilterModeFromValue returns a pointer to a valid LabelFilterMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLabelFilterModeFromValue(v string) (*LabelFilterMode, error) {
	ev := LabelFilterMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LabelFilterMode: valid values are %v", v, AllowedLabelFilterModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LabelFilterMode) IsValid() bool {
	for _, existing := range AllowedLabelFilterModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LabelFilterMode value
func (v LabelFilterMode) Ptr() *LabelFilterMode {
	return &v
}

type NullableLabelFilterMode struct {
	value *LabelFilterMode
	isSet bool
}

func (v NullableLabelFilterMode) Get() *LabelFilterMode {
	return v.value
}

func (v *NullableLabelFilterMode) Set(val *LabelFilterMode) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelFilterMode) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelFilterMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelFilterMode(val *LabelFilterMode) *NullableLabelFilterMode {
	return &NullableLabelFilterMode{value: val, isSet: true}
}

func (v NullableLabelFilterMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelFilterMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

