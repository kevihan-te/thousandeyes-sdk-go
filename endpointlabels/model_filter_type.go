/*
Endpoint Agent Labels API

Manage labels applied to endpoint agents using this API. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointlabels

import (
	"encoding/json"
	"fmt"
)

// FilterType Type of filter - the data that will be used to filter.
type FilterType string

// List of FilterType
const (
	FILTERTYPE_AGENT_ID FilterType = "agent-id"
	FILTERTYPE_PUBLIC_NETWORK FilterType = "public-network"
	FILTERTYPE_LOCAL_NETWORK FilterType = "local-network"
	FILTERTYPE_CONNECTION FilterType = "connection"
	FILTERTYPE_GATEWAY FilterType = "gateway"
	FILTERTYPE_PLATFORM FilterType = "platform"
	FILTERTYPE_AGENT_TYPE FilterType = "agent-type"
	FILTERTYPE_VPN_VENDOR FilterType = "vpn-vendor"
	FILTERTYPE_VPN_GATEWAY_ADDRESS FilterType = "vpn-gateway-address"
	FILTERTYPE_VPN_CLIENT_NETWORK FilterType = "vpn-client-network"
	FILTERTYPE_VPN_CLIENT_ADDRESS FilterType = "vpn-client-address"
	FILTERTYPE_IP_ADDRESS_FAMILY FilterType = "ip-address-family"
	FILTERTYPE_SSID FilterType = "ssid"
	FILTERTYPE_BSSID FilterType = "bssid"
	FILTERTYPE_HOSTNAME FilterType = "hostname"
	FILTERTYPE_USERNAME FilterType = "username"
	FILTERTYPE_ASN FilterType = "asn"
)

// All allowed values of FilterType enum
var AllowedFilterTypeEnumValues = []FilterType{
	"agent-id",
	"public-network",
	"local-network",
	"connection",
	"gateway",
	"platform",
	"agent-type",
	"vpn-vendor",
	"vpn-gateway-address",
	"vpn-client-network",
	"vpn-client-address",
	"ip-address-family",
	"ssid",
	"bssid",
	"hostname",
	"username",
	"asn",
}

func (v *FilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterType(value)
	for _, existing := range AllowedFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterType", value)
}

// NewFilterTypeFromValue returns a pointer to a valid FilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterTypeFromValue(v string) (*FilterType, error) {
	ev := FilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterType: valid values are %v", v, AllowedFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterType) IsValid() bool {
	for _, existing := range AllowedFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterType value
func (v FilterType) Ptr() *FilterType {
	return &v
}

type NullableFilterType struct {
	value *FilterType
	isSet bool
}

func (v NullableFilterType) Get() *FilterType {
	return v.value
}

func (v *NullableFilterType) Set(val *FilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterType(val *FilterType) *NullableFilterType {
	return &NullableFilterType{value: val, isSet: true}
}

func (v NullableFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

