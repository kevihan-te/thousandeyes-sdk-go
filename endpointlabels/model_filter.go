/*
Endpoint Agent Labels API

Manage labels applied to endpoint agents using this API. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointlabels

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Filter type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Filter{}

// Filter struct for Filter
type Filter struct {
	Key *FilterType `json:"key,omitempty"`
	Values []string `json:"values,omitempty"`
	Mode *LabelFilterMode `json:"mode,omitempty"`
}

// NewFilter instantiates a new Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilter() *Filter {
	this := Filter{}
	return &this
}

// NewFilterWithDefaults instantiates a new Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterWithDefaults() *Filter {
	this := Filter{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Filter) GetKey() FilterType {
	if o == nil || utils.IsNil(o.Key) {
		var ret FilterType
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetKeyOk() (*FilterType, bool) {
	if o == nil || utils.IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Filter) HasKey() bool {
	if o != nil && !utils.IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given FilterType and assigns it to the Key field.
func (o *Filter) SetKey(v FilterType) {
	o.Key = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *Filter) GetValues() []string {
	if o == nil || utils.IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetValuesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *Filter) HasValues() bool {
	if o != nil && !utils.IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *Filter) SetValues(v []string) {
	o.Values = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Filter) GetMode() LabelFilterMode {
	if o == nil || utils.IsNil(o.Mode) {
		var ret LabelFilterMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetModeOk() (*LabelFilterMode, bool) {
	if o == nil || utils.IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Filter) HasMode() bool {
	if o != nil && !utils.IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given LabelFilterMode and assigns it to the Mode field.
func (o *Filter) SetMode(v LabelFilterMode) {
	o.Mode = &v
}

func (o Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !utils.IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !utils.IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

type NullableFilter struct {
	value *Filter
	isSet bool
}

func (v NullableFilter) Get() *Filter {
	return v.value
}

func (v *NullableFilter) Set(val *Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilter(val *Filter) *NullableFilter {
	return &NullableFilter{value: val, isSet: true}
}

func (v NullableFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


