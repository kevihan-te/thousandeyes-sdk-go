/*
Endpoint Agent Labels API

Manage labels applied to endpoint agents using this API. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointlabels

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the LabelRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LabelRequest{}

// LabelRequest struct for LabelRequest
type LabelRequest struct {
	// Label identifier.
	Id *string `json:"id,omitempty"`
	// The label name.
	Name string `json:"name"`
	// UI color
	Color *string `json:"color,omitempty"`
	MatchType MatchType `json:"matchType"`
	// The filters combined using the matchType to determine the label's match.
	Filters []Filter `json:"filters"`
}

type _LabelRequest LabelRequest

// NewLabelRequest instantiates a new LabelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelRequest(name string, matchType MatchType, filters []Filter) *LabelRequest {
	this := LabelRequest{}
	this.Name = name
	this.MatchType = matchType
	this.Filters = filters
	return &this
}

// NewLabelRequestWithDefaults instantiates a new LabelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelRequestWithDefaults() *LabelRequest {
	this := LabelRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LabelRequest) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelRequest) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LabelRequest) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LabelRequest) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *LabelRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LabelRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LabelRequest) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *LabelRequest) GetColor() string {
	if o == nil || utils.IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelRequest) GetColorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *LabelRequest) HasColor() bool {
	if o != nil && !utils.IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *LabelRequest) SetColor(v string) {
	o.Color = &v
}

// GetMatchType returns the MatchType field value
func (o *LabelRequest) GetMatchType() MatchType {
	if o == nil {
		var ret MatchType
		return ret
	}

	return o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value
// and a boolean to check if the value has been set.
func (o *LabelRequest) GetMatchTypeOk() (*MatchType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MatchType, true
}

// SetMatchType sets field value
func (o *LabelRequest) SetMatchType(v MatchType) {
	o.MatchType = v
}

// GetFilters returns the Filters field value
func (o *LabelRequest) GetFilters() []Filter {
	if o == nil {
		var ret []Filter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *LabelRequest) GetFiltersOk() ([]Filter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *LabelRequest) SetFilters(v []Filter) {
	o.Filters = v
}

func (o LabelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	toSerialize["matchType"] = o.MatchType
	toSerialize["filters"] = o.Filters
	return toSerialize, nil
}

func (o *LabelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"matchType",
		"filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLabelRequest := _LabelRequest{}

    err = json.Unmarshal(data, &varLabelRequest)

	if err != nil {
		return err
	}

	*o = LabelRequest(varLabelRequest)

	return err
}

type NullableLabelRequest struct {
	value *LabelRequest
	isSet bool
}

func (v NullableLabelRequest) Get() *LabelRequest {
	return v.value
}

func (v *NullableLabelRequest) Set(val *LabelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelRequest(val *LabelRequest) *NullableLabelRequest {
	return &NullableLabelRequest{value: val, isSet: true}
}

func (v NullableLabelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


