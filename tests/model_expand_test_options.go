/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// ExpandTestOptions the model 'ExpandTestOptions'
type ExpandTestOptions string

// List of ExpandTestOptions
const (
	EXPANDTESTOPTIONS_AGENT ExpandTestOptions = "agent"
	EXPANDTESTOPTIONS_ALERT_RULE ExpandTestOptions = "alert-rule"
	EXPANDTESTOPTIONS_MONITOR ExpandTestOptions = "monitor"
	EXPANDTESTOPTIONS_LABEL ExpandTestOptions = "label"
	EXPANDTESTOPTIONS_SHARED_WITH_ACCOUNT ExpandTestOptions = "shared-with-account"
)

// All allowed values of ExpandTestOptions enum
var AllowedExpandTestOptionsEnumValues = []ExpandTestOptions{
	"agent",
	"alert-rule",
	"monitor",
	"label",
	"shared-with-account",
}

func (v *ExpandTestOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpandTestOptions(value)
	for _, existing := range AllowedExpandTestOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpandTestOptions", value)
}

// NewExpandTestOptionsFromValue returns a pointer to a valid ExpandTestOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpandTestOptionsFromValue(v string) (*ExpandTestOptions, error) {
	ev := ExpandTestOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpandTestOptions: valid values are %v", v, AllowedExpandTestOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpandTestOptions) IsValid() bool {
	for _, existing := range AllowedExpandTestOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpandTestOptions value
func (v ExpandTestOptions) Ptr() *ExpandTestOptions {
	return &v
}

type NullableExpandTestOptions struct {
	value *ExpandTestOptions
	isSet bool
}

func (v NullableExpandTestOptions) Get() *ExpandTestOptions {
	return v.value
}

func (v *NullableExpandTestOptions) Set(val *ExpandTestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandTestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandTestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandTestOptions(val *ExpandTestOptions) *NullableExpandTestOptions {
	return &NullableExpandTestOptions{value: val, isSet: true}
}

func (v NullableExpandTestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandTestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

