/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// AlertDirection Direction for applicable alert types (eg. path trace, End-to-End (Agent) etc.)
type AlertDirection string

// List of AlertDirection
const (
	ALERTDIRECTION_TO_TARGET AlertDirection = "to-target"
	ALERTDIRECTION_FROM_TARGET AlertDirection = "from-target"
	ALERTDIRECTION_BIDIRECTIONAL AlertDirection = "bidirectional"
)

// All allowed values of AlertDirection enum
var AllowedAlertDirectionEnumValues = []AlertDirection{
	"to-target",
	"from-target",
	"bidirectional",
}

func (v *AlertDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertDirection(value)
	for _, existing := range AllowedAlertDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertDirection", value)
}

// NewAlertDirectionFromValue returns a pointer to a valid AlertDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertDirectionFromValue(v string) (*AlertDirection, error) {
	ev := AlertDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertDirection: valid values are %v", v, AllowedAlertDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertDirection) IsValid() bool {
	for _, existing := range AllowedAlertDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertDirection value
func (v AlertDirection) Ptr() *AlertDirection {
	return &v
}

type NullableAlertDirection struct {
	value *AlertDirection
	isSet bool
}

func (v NullableAlertDirection) Get() *AlertDirection {
	return v.value
}

func (v *NullableAlertDirection) Set(val *AlertDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertDirection(val *AlertDirection) *NullableAlertDirection {
	return &NullableAlertDirection{value: val, isSet: true}
}

func (v NullableAlertDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

