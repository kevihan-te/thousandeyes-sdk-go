/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
	"fmt"
)

// checks if the HttpServerTestResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HttpServerTestResponse{}

// HttpServerTestResponse struct for HttpServerTestResponse
type HttpServerTestResponse struct {
	Interval TestInterval `json:"interval"`
	// Indicates if alerts are enabled.
	AlertsEnabled *bool `json:"alertsEnabled,omitempty"`
	// Test is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Contains list of enabled alert rule objects.
	AlertRules []AlertRule `json:"alertRules,omitempty"`
	// User that created the test.
	CreatedBy *string `json:"createdBy,omitempty"`
	// UTC created date (ISO date-time format).
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// A description of the test.
	Description *string `json:"description,omitempty"`
	// Indicates if the test is shared with the account group.
	LiveShare *bool `json:"liveShare,omitempty"`
	// User that modified the test.
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// UTC last modification date (ISO date-time format).
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// Indicates if the test is a saved event.
	SavedEvent *bool `json:"savedEvent,omitempty"`
	// Each test is assigned an unique ID; this is used to access test information and results from other endpoints.
	TestId *string `json:"testId,omitempty"`
	// The name of the test. Test name must be unique.
	TestName *string `json:"testName,omitempty"`
	Type *string `json:"type,omitempty"`
	Links *TestLinks `json:"_links,omitempty"`
	Labels []TestLabel `json:"labels,omitempty"`
	SharedWithAccounts []SharedWithAccount `json:"sharedWithAccounts,omitempty"`
	AuthType *TestAuthType `json:"authType,omitempty"`
	AgentInterfaces *AgentInterfaces `json:"agentInterfaces,omitempty"`
	// Set to `true` to enable bandwidth measurements, only applies to Enterprise agents assigned to the test.
	BandwidthMeasurements *bool `json:"bandwidthMeasurements,omitempty"`
	// String representation (containing newline characters) of client certificate, the private key must be placed first, then the certificate.
	ClientCertificate *string `json:"clientCertificate,omitempty"`
	// Content regex, this field does not require escaping.
	ContentRegex *string `json:"contentRegex,omitempty"`
	CustomHeaders *TestCustomHeaders `json:"customHeaders,omitempty"`
	// Specify the HTTP status code value that indicates a successful response. The default value accepts any 2xx or 3xx status code.
	DesiredStatusCode *string `json:"desiredStatusCode,omitempty"`
	// Specifies maximum number of bytes to download from the target object.
	DownloadLimit *int32 `json:"downloadLimit,omitempty"`
	// IP address to use for DNS override.
	DnsOverride *string `json:"dnsOverride,omitempty"`
	// Target time for HTTP server completion, specified in milliseconds.
	HttpTargetTime *int32 `json:"httpTargetTime,omitempty"`
	// HTTP time limit in seconds.
	HttpTimeLimit *int32 `json:"httpTimeLimit,omitempty"`
	// HTTP protocol version. Set to '2' to prefer HTTP/2, or '1' to use only HTTP/1.1.
	HttpVersion *int32 `json:"httpVersion,omitempty"`
	// Set to `true` to capture response headers for objects loaded by the test.
	IncludeHeaders *bool `json:"includeHeaders,omitempty"`
	// Set `true` to measure MTU sizes on network from agents to the target.
	MtuMeasurements *bool `json:"mtuMeasurements,omitempty"`
	// Enable or disable network measurements. Set to true to enable or false to disable network measurements.
	NetworkMeasurements *bool `json:"networkMeasurements,omitempty"`
	// Number of path traces executed by the agent.
	NumPathTraces *int32 `json:"numPathTraces,omitempty"`
	OAuth *OAuth `json:"oAuth,omitempty"`
	// Password for Basic/NTLM authentication.
	Password *string `json:"password,omitempty"`
	PathTraceMode *TestPathTraceMode `json:"pathTraceMode,omitempty"`
	ProbeMode *TestProbeMode `json:"probeMode,omitempty"`
	Protocol *TestProtocol `json:"protocol,omitempty"`
	// Reflects the verbose SSL protocol version used by a test.
	SslVersion *string `json:"sslVersion,omitempty"`
	SslVersionId *TestSslVersionId `json:"sslVersionId,omitempty"`
	// Target for the test.
	Url string `json:"url"`
	// Set to true to use NTLM, false to use Basic Authentication. Requires username and password to be set.
	UseNtlm *bool `json:"useNtlm,omitempty"`
	// User-agent string to be provided during the test.
	UserAgent *string `json:"userAgent,omitempty"`
	// Username for Basic/NTLM authentication.
	Username *string `json:"username,omitempty"`
	// Ignore or acknowledge certificate errors. Set to false to ignore certificate errors.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty"`
	// Allows TLS renegotiation with servers not supporting RFC 5746. Default Set to true to allow unsafe legacy renegotiation.
	AllowUnsafeLegacyRenegotiation *bool `json:"allowUnsafeLegacyRenegotiation,omitempty"`
	// To disable following HTTP/301 or HTTP/302 redirect directives, set this parameter to `false`.
	FollowRedirects *bool `json:"followRedirects,omitempty"`
	// Sets packets rate sent to measure the network in packets per second.
	FixedPacketRate *int32 `json:"fixedPacketRate,omitempty"`
	// Flag indicating if a proxy other than the default should be used. To override the default proxy for agents, set to `true` and specify a value for `overrideProxyId`.
	OverrideAgentProxy *bool `json:"overrideAgentProxy,omitempty"`
	// ID of the proxy to be used if the default proxy is overridden.
	OverrideProxyId *string `json:"overrideProxyId,omitempty"`
	// Indicates whether network data to the proxy should be collected.
	CollectProxyNetworkData *bool `json:"collectProxyNetworkData,omitempty"`
	// HTTP request headers used.
	Headers []string `json:"headers,omitempty"`
	// Indicates whether agents should randomize the start time in each test round.
	RandomizedStartTime *bool `json:"randomizedStartTime,omitempty"`
	// Enter the body for the HTTP POST request in this field. No special escaping is necessary. If the post body is provided with content, the `requestMethod` is automatically set to POST.
	PostBody *string `json:"postBody,omitempty"`
	Ipv6Policy *TestIpv6Policy `json:"ipv6Policy,omitempty"`
	// Set to `true` to enable bgp measurements.
	BgpMeasurements *bool `json:"bgpMeasurements,omitempty"`
	// Indicate if all available public BGP monitors should be used, when ommited defaults to `bgpMeasurements` value.
	UsePublicBgp *bool `json:"usePublicBgp,omitempty"`
	// Contains list of enabled BGP monitors.
	Monitors []Monitor `json:"monitors,omitempty"`
	// Contains list of agents.
	Agents []AgentResponse `json:"agents,omitempty"`
}

type _HttpServerTestResponse HttpServerTestResponse

// NewHttpServerTestResponse instantiates a new HttpServerTestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpServerTestResponse(interval TestInterval, url string) *HttpServerTestResponse {
	this := HttpServerTestResponse{}
	this.Interval = interval
	var enabled bool = true
	this.Enabled = &enabled
	var authType TestAuthType = TESTAUTHTYPE_NONE
	this.AuthType = &authType
	var desiredStatusCode string = "default"
	this.DesiredStatusCode = &desiredStatusCode
	var httpTimeLimit int32 = 5
	this.HttpTimeLimit = &httpTimeLimit
	var httpVersion int32 = 2
	this.HttpVersion = &httpVersion
	var includeHeaders bool = true
	this.IncludeHeaders = &includeHeaders
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var protocol TestProtocol = TESTPROTOCOL_TCP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	this.Url = url
	var verifyCertificate bool = false
	this.VerifyCertificate = &verifyCertificate
	var allowUnsafeLegacyRenegotiation bool = true
	this.AllowUnsafeLegacyRenegotiation = &allowUnsafeLegacyRenegotiation
	var followRedirects bool = true
	this.FollowRedirects = &followRedirects
	var overrideAgentProxy bool = false
	this.OverrideAgentProxy = &overrideAgentProxy
	var collectProxyNetworkData bool = false
	this.CollectProxyNetworkData = &collectProxyNetworkData
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	var ipv6Policy TestIpv6Policy = TESTIPV6POLICY_USE_AGENT_POLICY
	this.Ipv6Policy = &ipv6Policy
	var bgpMeasurements bool = true
	this.BgpMeasurements = &bgpMeasurements
	var usePublicBgp bool = true
	this.UsePublicBgp = &usePublicBgp
	return &this
}

// NewHttpServerTestResponseWithDefaults instantiates a new HttpServerTestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpServerTestResponseWithDefaults() *HttpServerTestResponse {
	this := HttpServerTestResponse{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = interval
	var enabled bool = true
	this.Enabled = &enabled
	var authType TestAuthType = TESTAUTHTYPE_NONE
	this.AuthType = &authType
	var desiredStatusCode string = "default"
	this.DesiredStatusCode = &desiredStatusCode
	var httpTimeLimit int32 = 5
	this.HttpTimeLimit = &httpTimeLimit
	var httpVersion int32 = 2
	this.HttpVersion = &httpVersion
	var includeHeaders bool = true
	this.IncludeHeaders = &includeHeaders
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var protocol TestProtocol = TESTPROTOCOL_TCP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var verifyCertificate bool = false
	this.VerifyCertificate = &verifyCertificate
	var allowUnsafeLegacyRenegotiation bool = true
	this.AllowUnsafeLegacyRenegotiation = &allowUnsafeLegacyRenegotiation
	var followRedirects bool = true
	this.FollowRedirects = &followRedirects
	var overrideAgentProxy bool = false
	this.OverrideAgentProxy = &overrideAgentProxy
	var collectProxyNetworkData bool = false
	this.CollectProxyNetworkData = &collectProxyNetworkData
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	var ipv6Policy TestIpv6Policy = TESTIPV6POLICY_USE_AGENT_POLICY
	this.Ipv6Policy = &ipv6Policy
	var bgpMeasurements bool = true
	this.BgpMeasurements = &bgpMeasurements
	var usePublicBgp bool = true
	this.UsePublicBgp = &usePublicBgp
	return &this
}

// GetInterval returns the Interval field value
func (o *HttpServerTestResponse) GetInterval() TestInterval {
	if o == nil {
		var ret TestInterval
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetIntervalOk() (*TestInterval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *HttpServerTestResponse) SetInterval(v TestInterval) {
	o.Interval = v
}

// GetAlertsEnabled returns the AlertsEnabled field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetAlertsEnabled() bool {
	if o == nil || utils.IsNil(o.AlertsEnabled) {
		var ret bool
		return ret
	}
	return *o.AlertsEnabled
}

// GetAlertsEnabledOk returns a tuple with the AlertsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetAlertsEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AlertsEnabled) {
		return nil, false
	}
	return o.AlertsEnabled, true
}

// HasAlertsEnabled returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasAlertsEnabled() bool {
	if o != nil && !utils.IsNil(o.AlertsEnabled) {
		return true
	}

	return false
}

// SetAlertsEnabled gets a reference to the given bool and assigns it to the AlertsEnabled field.
func (o *HttpServerTestResponse) SetAlertsEnabled(v bool) {
	o.AlertsEnabled = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetEnabled() bool {
	if o == nil || utils.IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasEnabled() bool {
	if o != nil && !utils.IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *HttpServerTestResponse) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAlertRules returns the AlertRules field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetAlertRules() []AlertRule {
	if o == nil || utils.IsNil(o.AlertRules) {
		var ret []AlertRule
		return ret
	}
	return o.AlertRules
}

// GetAlertRulesOk returns a tuple with the AlertRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetAlertRulesOk() ([]AlertRule, bool) {
	if o == nil || utils.IsNil(o.AlertRules) {
		return nil, false
	}
	return o.AlertRules, true
}

// HasAlertRules returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasAlertRules() bool {
	if o != nil && !utils.IsNil(o.AlertRules) {
		return true
	}

	return false
}

// SetAlertRules gets a reference to the given []AlertRule and assigns it to the AlertRules field.
func (o *HttpServerTestResponse) SetAlertRules(v []AlertRule) {
	o.AlertRules = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetCreatedBy() string {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetCreatedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *HttpServerTestResponse) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetCreatedDate() time.Time {
	if o == nil || utils.IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasCreatedDate() bool {
	if o != nil && !utils.IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *HttpServerTestResponse) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HttpServerTestResponse) SetDescription(v string) {
	o.Description = &v
}

// GetLiveShare returns the LiveShare field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetLiveShare() bool {
	if o == nil || utils.IsNil(o.LiveShare) {
		var ret bool
		return ret
	}
	return *o.LiveShare
}

// GetLiveShareOk returns a tuple with the LiveShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetLiveShareOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.LiveShare) {
		return nil, false
	}
	return o.LiveShare, true
}

// HasLiveShare returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasLiveShare() bool {
	if o != nil && !utils.IsNil(o.LiveShare) {
		return true
	}

	return false
}

// SetLiveShare gets a reference to the given bool and assigns it to the LiveShare field.
func (o *HttpServerTestResponse) SetLiveShare(v bool) {
	o.LiveShare = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetModifiedBy() string {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetModifiedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasModifiedBy() bool {
	if o != nil && !utils.IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *HttpServerTestResponse) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetModifiedDate() time.Time {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasModifiedDate() bool {
	if o != nil && !utils.IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *HttpServerTestResponse) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetSavedEvent returns the SavedEvent field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetSavedEvent() bool {
	if o == nil || utils.IsNil(o.SavedEvent) {
		var ret bool
		return ret
	}
	return *o.SavedEvent
}

// GetSavedEventOk returns a tuple with the SavedEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetSavedEventOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.SavedEvent) {
		return nil, false
	}
	return o.SavedEvent, true
}

// HasSavedEvent returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasSavedEvent() bool {
	if o != nil && !utils.IsNil(o.SavedEvent) {
		return true
	}

	return false
}

// SetSavedEvent gets a reference to the given bool and assigns it to the SavedEvent field.
func (o *HttpServerTestResponse) SetSavedEvent(v bool) {
	o.SavedEvent = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *HttpServerTestResponse) SetTestId(v string) {
	o.TestId = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *HttpServerTestResponse) SetTestName(v string) {
	o.TestName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HttpServerTestResponse) SetType(v string) {
	o.Type = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetLinks() TestLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetLinksOk() (*TestLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestLinks and assigns it to the Links field.
func (o *HttpServerTestResponse) SetLinks(v TestLinks) {
	o.Links = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetLabels() []TestLabel {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []TestLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetLabelsOk() ([]TestLabel, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []TestLabel and assigns it to the Labels field.
func (o *HttpServerTestResponse) SetLabels(v []TestLabel) {
	o.Labels = v
}

// GetSharedWithAccounts returns the SharedWithAccounts field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetSharedWithAccounts() []SharedWithAccount {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		var ret []SharedWithAccount
		return ret
	}
	return o.SharedWithAccounts
}

// GetSharedWithAccountsOk returns a tuple with the SharedWithAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetSharedWithAccountsOk() ([]SharedWithAccount, bool) {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		return nil, false
	}
	return o.SharedWithAccounts, true
}

// HasSharedWithAccounts returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasSharedWithAccounts() bool {
	if o != nil && !utils.IsNil(o.SharedWithAccounts) {
		return true
	}

	return false
}

// SetSharedWithAccounts gets a reference to the given []SharedWithAccount and assigns it to the SharedWithAccounts field.
func (o *HttpServerTestResponse) SetSharedWithAccounts(v []SharedWithAccount) {
	o.SharedWithAccounts = v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetAuthType() TestAuthType {
	if o == nil || utils.IsNil(o.AuthType) {
		var ret TestAuthType
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetAuthTypeOk() (*TestAuthType, bool) {
	if o == nil || utils.IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasAuthType() bool {
	if o != nil && !utils.IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given TestAuthType and assigns it to the AuthType field.
func (o *HttpServerTestResponse) SetAuthType(v TestAuthType) {
	o.AuthType = &v
}

// GetAgentInterfaces returns the AgentInterfaces field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetAgentInterfaces() AgentInterfaces {
	if o == nil || utils.IsNil(o.AgentInterfaces) {
		var ret AgentInterfaces
		return ret
	}
	return *o.AgentInterfaces
}

// GetAgentInterfacesOk returns a tuple with the AgentInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetAgentInterfacesOk() (*AgentInterfaces, bool) {
	if o == nil || utils.IsNil(o.AgentInterfaces) {
		return nil, false
	}
	return o.AgentInterfaces, true
}

// HasAgentInterfaces returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasAgentInterfaces() bool {
	if o != nil && !utils.IsNil(o.AgentInterfaces) {
		return true
	}

	return false
}

// SetAgentInterfaces gets a reference to the given AgentInterfaces and assigns it to the AgentInterfaces field.
func (o *HttpServerTestResponse) SetAgentInterfaces(v AgentInterfaces) {
	o.AgentInterfaces = &v
}

// GetBandwidthMeasurements returns the BandwidthMeasurements field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetBandwidthMeasurements() bool {
	if o == nil || utils.IsNil(o.BandwidthMeasurements) {
		var ret bool
		return ret
	}
	return *o.BandwidthMeasurements
}

// GetBandwidthMeasurementsOk returns a tuple with the BandwidthMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetBandwidthMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.BandwidthMeasurements) {
		return nil, false
	}
	return o.BandwidthMeasurements, true
}

// HasBandwidthMeasurements returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasBandwidthMeasurements() bool {
	if o != nil && !utils.IsNil(o.BandwidthMeasurements) {
		return true
	}

	return false
}

// SetBandwidthMeasurements gets a reference to the given bool and assigns it to the BandwidthMeasurements field.
func (o *HttpServerTestResponse) SetBandwidthMeasurements(v bool) {
	o.BandwidthMeasurements = &v
}

// GetClientCertificate returns the ClientCertificate field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetClientCertificate() string {
	if o == nil || utils.IsNil(o.ClientCertificate) {
		var ret string
		return ret
	}
	return *o.ClientCertificate
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetClientCertificateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ClientCertificate) {
		return nil, false
	}
	return o.ClientCertificate, true
}

// HasClientCertificate returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasClientCertificate() bool {
	if o != nil && !utils.IsNil(o.ClientCertificate) {
		return true
	}

	return false
}

// SetClientCertificate gets a reference to the given string and assigns it to the ClientCertificate field.
func (o *HttpServerTestResponse) SetClientCertificate(v string) {
	o.ClientCertificate = &v
}

// GetContentRegex returns the ContentRegex field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetContentRegex() string {
	if o == nil || utils.IsNil(o.ContentRegex) {
		var ret string
		return ret
	}
	return *o.ContentRegex
}

// GetContentRegexOk returns a tuple with the ContentRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetContentRegexOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ContentRegex) {
		return nil, false
	}
	return o.ContentRegex, true
}

// HasContentRegex returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasContentRegex() bool {
	if o != nil && !utils.IsNil(o.ContentRegex) {
		return true
	}

	return false
}

// SetContentRegex gets a reference to the given string and assigns it to the ContentRegex field.
func (o *HttpServerTestResponse) SetContentRegex(v string) {
	o.ContentRegex = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetCustomHeaders() TestCustomHeaders {
	if o == nil || utils.IsNil(o.CustomHeaders) {
		var ret TestCustomHeaders
		return ret
	}
	return *o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetCustomHeadersOk() (*TestCustomHeaders, bool) {
	if o == nil || utils.IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasCustomHeaders() bool {
	if o != nil && !utils.IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given TestCustomHeaders and assigns it to the CustomHeaders field.
func (o *HttpServerTestResponse) SetCustomHeaders(v TestCustomHeaders) {
	o.CustomHeaders = &v
}

// GetDesiredStatusCode returns the DesiredStatusCode field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetDesiredStatusCode() string {
	if o == nil || utils.IsNil(o.DesiredStatusCode) {
		var ret string
		return ret
	}
	return *o.DesiredStatusCode
}

// GetDesiredStatusCodeOk returns a tuple with the DesiredStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetDesiredStatusCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DesiredStatusCode) {
		return nil, false
	}
	return o.DesiredStatusCode, true
}

// HasDesiredStatusCode returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasDesiredStatusCode() bool {
	if o != nil && !utils.IsNil(o.DesiredStatusCode) {
		return true
	}

	return false
}

// SetDesiredStatusCode gets a reference to the given string and assigns it to the DesiredStatusCode field.
func (o *HttpServerTestResponse) SetDesiredStatusCode(v string) {
	o.DesiredStatusCode = &v
}

// GetDownloadLimit returns the DownloadLimit field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetDownloadLimit() int32 {
	if o == nil || utils.IsNil(o.DownloadLimit) {
		var ret int32
		return ret
	}
	return *o.DownloadLimit
}

// GetDownloadLimitOk returns a tuple with the DownloadLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetDownloadLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DownloadLimit) {
		return nil, false
	}
	return o.DownloadLimit, true
}

// HasDownloadLimit returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasDownloadLimit() bool {
	if o != nil && !utils.IsNil(o.DownloadLimit) {
		return true
	}

	return false
}

// SetDownloadLimit gets a reference to the given int32 and assigns it to the DownloadLimit field.
func (o *HttpServerTestResponse) SetDownloadLimit(v int32) {
	o.DownloadLimit = &v
}

// GetDnsOverride returns the DnsOverride field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetDnsOverride() string {
	if o == nil || utils.IsNil(o.DnsOverride) {
		var ret string
		return ret
	}
	return *o.DnsOverride
}

// GetDnsOverrideOk returns a tuple with the DnsOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetDnsOverrideOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DnsOverride) {
		return nil, false
	}
	return o.DnsOverride, true
}

// HasDnsOverride returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasDnsOverride() bool {
	if o != nil && !utils.IsNil(o.DnsOverride) {
		return true
	}

	return false
}

// SetDnsOverride gets a reference to the given string and assigns it to the DnsOverride field.
func (o *HttpServerTestResponse) SetDnsOverride(v string) {
	o.DnsOverride = &v
}

// GetHttpTargetTime returns the HttpTargetTime field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetHttpTargetTime() int32 {
	if o == nil || utils.IsNil(o.HttpTargetTime) {
		var ret int32
		return ret
	}
	return *o.HttpTargetTime
}

// GetHttpTargetTimeOk returns a tuple with the HttpTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetHttpTargetTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTargetTime) {
		return nil, false
	}
	return o.HttpTargetTime, true
}

// HasHttpTargetTime returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasHttpTargetTime() bool {
	if o != nil && !utils.IsNil(o.HttpTargetTime) {
		return true
	}

	return false
}

// SetHttpTargetTime gets a reference to the given int32 and assigns it to the HttpTargetTime field.
func (o *HttpServerTestResponse) SetHttpTargetTime(v int32) {
	o.HttpTargetTime = &v
}

// GetHttpTimeLimit returns the HttpTimeLimit field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetHttpTimeLimit() int32 {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		var ret int32
		return ret
	}
	return *o.HttpTimeLimit
}

// GetHttpTimeLimitOk returns a tuple with the HttpTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetHttpTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		return nil, false
	}
	return o.HttpTimeLimit, true
}

// HasHttpTimeLimit returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasHttpTimeLimit() bool {
	if o != nil && !utils.IsNil(o.HttpTimeLimit) {
		return true
	}

	return false
}

// SetHttpTimeLimit gets a reference to the given int32 and assigns it to the HttpTimeLimit field.
func (o *HttpServerTestResponse) SetHttpTimeLimit(v int32) {
	o.HttpTimeLimit = &v
}

// GetHttpVersion returns the HttpVersion field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetHttpVersion() int32 {
	if o == nil || utils.IsNil(o.HttpVersion) {
		var ret int32
		return ret
	}
	return *o.HttpVersion
}

// GetHttpVersionOk returns a tuple with the HttpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetHttpVersionOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpVersion) {
		return nil, false
	}
	return o.HttpVersion, true
}

// HasHttpVersion returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasHttpVersion() bool {
	if o != nil && !utils.IsNil(o.HttpVersion) {
		return true
	}

	return false
}

// SetHttpVersion gets a reference to the given int32 and assigns it to the HttpVersion field.
func (o *HttpServerTestResponse) SetHttpVersion(v int32) {
	o.HttpVersion = &v
}

// GetIncludeHeaders returns the IncludeHeaders field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetIncludeHeaders() bool {
	if o == nil || utils.IsNil(o.IncludeHeaders) {
		var ret bool
		return ret
	}
	return *o.IncludeHeaders
}

// GetIncludeHeadersOk returns a tuple with the IncludeHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetIncludeHeadersOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IncludeHeaders) {
		return nil, false
	}
	return o.IncludeHeaders, true
}

// HasIncludeHeaders returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasIncludeHeaders() bool {
	if o != nil && !utils.IsNil(o.IncludeHeaders) {
		return true
	}

	return false
}

// SetIncludeHeaders gets a reference to the given bool and assigns it to the IncludeHeaders field.
func (o *HttpServerTestResponse) SetIncludeHeaders(v bool) {
	o.IncludeHeaders = &v
}

// GetMtuMeasurements returns the MtuMeasurements field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetMtuMeasurements() bool {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		var ret bool
		return ret
	}
	return *o.MtuMeasurements
}

// GetMtuMeasurementsOk returns a tuple with the MtuMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetMtuMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		return nil, false
	}
	return o.MtuMeasurements, true
}

// HasMtuMeasurements returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasMtuMeasurements() bool {
	if o != nil && !utils.IsNil(o.MtuMeasurements) {
		return true
	}

	return false
}

// SetMtuMeasurements gets a reference to the given bool and assigns it to the MtuMeasurements field.
func (o *HttpServerTestResponse) SetMtuMeasurements(v bool) {
	o.MtuMeasurements = &v
}

// GetNetworkMeasurements returns the NetworkMeasurements field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetNetworkMeasurements() bool {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		var ret bool
		return ret
	}
	return *o.NetworkMeasurements
}

// GetNetworkMeasurementsOk returns a tuple with the NetworkMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetNetworkMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		return nil, false
	}
	return o.NetworkMeasurements, true
}

// HasNetworkMeasurements returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasNetworkMeasurements() bool {
	if o != nil && !utils.IsNil(o.NetworkMeasurements) {
		return true
	}

	return false
}

// SetNetworkMeasurements gets a reference to the given bool and assigns it to the NetworkMeasurements field.
func (o *HttpServerTestResponse) SetNetworkMeasurements(v bool) {
	o.NetworkMeasurements = &v
}

// GetNumPathTraces returns the NumPathTraces field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetNumPathTraces() int32 {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		var ret int32
		return ret
	}
	return *o.NumPathTraces
}

// GetNumPathTracesOk returns a tuple with the NumPathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetNumPathTracesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		return nil, false
	}
	return o.NumPathTraces, true
}

// HasNumPathTraces returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasNumPathTraces() bool {
	if o != nil && !utils.IsNil(o.NumPathTraces) {
		return true
	}

	return false
}

// SetNumPathTraces gets a reference to the given int32 and assigns it to the NumPathTraces field.
func (o *HttpServerTestResponse) SetNumPathTraces(v int32) {
	o.NumPathTraces = &v
}

// GetOAuth returns the OAuth field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetOAuth() OAuth {
	if o == nil || utils.IsNil(o.OAuth) {
		var ret OAuth
		return ret
	}
	return *o.OAuth
}

// GetOAuthOk returns a tuple with the OAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetOAuthOk() (*OAuth, bool) {
	if o == nil || utils.IsNil(o.OAuth) {
		return nil, false
	}
	return o.OAuth, true
}

// HasOAuth returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasOAuth() bool {
	if o != nil && !utils.IsNil(o.OAuth) {
		return true
	}

	return false
}

// SetOAuth gets a reference to the given OAuth and assigns it to the OAuth field.
func (o *HttpServerTestResponse) SetOAuth(v OAuth) {
	o.OAuth = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetPassword() string {
	if o == nil || utils.IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *HttpServerTestResponse) SetPassword(v string) {
	o.Password = &v
}

// GetPathTraceMode returns the PathTraceMode field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetPathTraceMode() TestPathTraceMode {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		var ret TestPathTraceMode
		return ret
	}
	return *o.PathTraceMode
}

// GetPathTraceModeOk returns a tuple with the PathTraceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetPathTraceModeOk() (*TestPathTraceMode, bool) {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		return nil, false
	}
	return o.PathTraceMode, true
}

// HasPathTraceMode returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasPathTraceMode() bool {
	if o != nil && !utils.IsNil(o.PathTraceMode) {
		return true
	}

	return false
}

// SetPathTraceMode gets a reference to the given TestPathTraceMode and assigns it to the PathTraceMode field.
func (o *HttpServerTestResponse) SetPathTraceMode(v TestPathTraceMode) {
	o.PathTraceMode = &v
}

// GetProbeMode returns the ProbeMode field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetProbeMode() TestProbeMode {
	if o == nil || utils.IsNil(o.ProbeMode) {
		var ret TestProbeMode
		return ret
	}
	return *o.ProbeMode
}

// GetProbeModeOk returns a tuple with the ProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetProbeModeOk() (*TestProbeMode, bool) {
	if o == nil || utils.IsNil(o.ProbeMode) {
		return nil, false
	}
	return o.ProbeMode, true
}

// HasProbeMode returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasProbeMode() bool {
	if o != nil && !utils.IsNil(o.ProbeMode) {
		return true
	}

	return false
}

// SetProbeMode gets a reference to the given TestProbeMode and assigns it to the ProbeMode field.
func (o *HttpServerTestResponse) SetProbeMode(v TestProbeMode) {
	o.ProbeMode = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetProtocol() TestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret TestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetProtocolOk() (*TestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given TestProtocol and assigns it to the Protocol field.
func (o *HttpServerTestResponse) SetProtocol(v TestProtocol) {
	o.Protocol = &v
}

// GetSslVersion returns the SslVersion field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetSslVersion() string {
	if o == nil || utils.IsNil(o.SslVersion) {
		var ret string
		return ret
	}
	return *o.SslVersion
}

// GetSslVersionOk returns a tuple with the SslVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetSslVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SslVersion) {
		return nil, false
	}
	return o.SslVersion, true
}

// HasSslVersion returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasSslVersion() bool {
	if o != nil && !utils.IsNil(o.SslVersion) {
		return true
	}

	return false
}

// SetSslVersion gets a reference to the given string and assigns it to the SslVersion field.
func (o *HttpServerTestResponse) SetSslVersion(v string) {
	o.SslVersion = &v
}

// GetSslVersionId returns the SslVersionId field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetSslVersionId() TestSslVersionId {
	if o == nil || utils.IsNil(o.SslVersionId) {
		var ret TestSslVersionId
		return ret
	}
	return *o.SslVersionId
}

// GetSslVersionIdOk returns a tuple with the SslVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetSslVersionIdOk() (*TestSslVersionId, bool) {
	if o == nil || utils.IsNil(o.SslVersionId) {
		return nil, false
	}
	return o.SslVersionId, true
}

// HasSslVersionId returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasSslVersionId() bool {
	if o != nil && !utils.IsNil(o.SslVersionId) {
		return true
	}

	return false
}

// SetSslVersionId gets a reference to the given TestSslVersionId and assigns it to the SslVersionId field.
func (o *HttpServerTestResponse) SetSslVersionId(v TestSslVersionId) {
	o.SslVersionId = &v
}

// GetUrl returns the Url field value
func (o *HttpServerTestResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *HttpServerTestResponse) SetUrl(v string) {
	o.Url = v
}

// GetUseNtlm returns the UseNtlm field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetUseNtlm() bool {
	if o == nil || utils.IsNil(o.UseNtlm) {
		var ret bool
		return ret
	}
	return *o.UseNtlm
}

// GetUseNtlmOk returns a tuple with the UseNtlm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetUseNtlmOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.UseNtlm) {
		return nil, false
	}
	return o.UseNtlm, true
}

// HasUseNtlm returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasUseNtlm() bool {
	if o != nil && !utils.IsNil(o.UseNtlm) {
		return true
	}

	return false
}

// SetUseNtlm gets a reference to the given bool and assigns it to the UseNtlm field.
func (o *HttpServerTestResponse) SetUseNtlm(v bool) {
	o.UseNtlm = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetUserAgent() string {
	if o == nil || utils.IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetUserAgentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasUserAgent() bool {
	if o != nil && !utils.IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *HttpServerTestResponse) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetUsername() string {
	if o == nil || utils.IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *HttpServerTestResponse) SetUsername(v string) {
	o.Username = &v
}

// GetVerifyCertificate returns the VerifyCertificate field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetVerifyCertificate() bool {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		var ret bool
		return ret
	}
	return *o.VerifyCertificate
}

// GetVerifyCertificateOk returns a tuple with the VerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetVerifyCertificateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		return nil, false
	}
	return o.VerifyCertificate, true
}

// HasVerifyCertificate returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasVerifyCertificate() bool {
	if o != nil && !utils.IsNil(o.VerifyCertificate) {
		return true
	}

	return false
}

// SetVerifyCertificate gets a reference to the given bool and assigns it to the VerifyCertificate field.
func (o *HttpServerTestResponse) SetVerifyCertificate(v bool) {
	o.VerifyCertificate = &v
}

// GetAllowUnsafeLegacyRenegotiation returns the AllowUnsafeLegacyRenegotiation field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetAllowUnsafeLegacyRenegotiation() bool {
	if o == nil || utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		var ret bool
		return ret
	}
	return *o.AllowUnsafeLegacyRenegotiation
}

// GetAllowUnsafeLegacyRenegotiationOk returns a tuple with the AllowUnsafeLegacyRenegotiation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetAllowUnsafeLegacyRenegotiationOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		return nil, false
	}
	return o.AllowUnsafeLegacyRenegotiation, true
}

// HasAllowUnsafeLegacyRenegotiation returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasAllowUnsafeLegacyRenegotiation() bool {
	if o != nil && !utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		return true
	}

	return false
}

// SetAllowUnsafeLegacyRenegotiation gets a reference to the given bool and assigns it to the AllowUnsafeLegacyRenegotiation field.
func (o *HttpServerTestResponse) SetAllowUnsafeLegacyRenegotiation(v bool) {
	o.AllowUnsafeLegacyRenegotiation = &v
}

// GetFollowRedirects returns the FollowRedirects field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetFollowRedirects() bool {
	if o == nil || utils.IsNil(o.FollowRedirects) {
		var ret bool
		return ret
	}
	return *o.FollowRedirects
}

// GetFollowRedirectsOk returns a tuple with the FollowRedirects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetFollowRedirectsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.FollowRedirects) {
		return nil, false
	}
	return o.FollowRedirects, true
}

// HasFollowRedirects returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasFollowRedirects() bool {
	if o != nil && !utils.IsNil(o.FollowRedirects) {
		return true
	}

	return false
}

// SetFollowRedirects gets a reference to the given bool and assigns it to the FollowRedirects field.
func (o *HttpServerTestResponse) SetFollowRedirects(v bool) {
	o.FollowRedirects = &v
}

// GetFixedPacketRate returns the FixedPacketRate field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetFixedPacketRate() int32 {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		var ret int32
		return ret
	}
	return *o.FixedPacketRate
}

// GetFixedPacketRateOk returns a tuple with the FixedPacketRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetFixedPacketRateOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		return nil, false
	}
	return o.FixedPacketRate, true
}

// HasFixedPacketRate returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasFixedPacketRate() bool {
	if o != nil && !utils.IsNil(o.FixedPacketRate) {
		return true
	}

	return false
}

// SetFixedPacketRate gets a reference to the given int32 and assigns it to the FixedPacketRate field.
func (o *HttpServerTestResponse) SetFixedPacketRate(v int32) {
	o.FixedPacketRate = &v
}

// GetOverrideAgentProxy returns the OverrideAgentProxy field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetOverrideAgentProxy() bool {
	if o == nil || utils.IsNil(o.OverrideAgentProxy) {
		var ret bool
		return ret
	}
	return *o.OverrideAgentProxy
}

// GetOverrideAgentProxyOk returns a tuple with the OverrideAgentProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetOverrideAgentProxyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.OverrideAgentProxy) {
		return nil, false
	}
	return o.OverrideAgentProxy, true
}

// HasOverrideAgentProxy returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasOverrideAgentProxy() bool {
	if o != nil && !utils.IsNil(o.OverrideAgentProxy) {
		return true
	}

	return false
}

// SetOverrideAgentProxy gets a reference to the given bool and assigns it to the OverrideAgentProxy field.
func (o *HttpServerTestResponse) SetOverrideAgentProxy(v bool) {
	o.OverrideAgentProxy = &v
}

// GetOverrideProxyId returns the OverrideProxyId field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetOverrideProxyId() string {
	if o == nil || utils.IsNil(o.OverrideProxyId) {
		var ret string
		return ret
	}
	return *o.OverrideProxyId
}

// GetOverrideProxyIdOk returns a tuple with the OverrideProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetOverrideProxyIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OverrideProxyId) {
		return nil, false
	}
	return o.OverrideProxyId, true
}

// HasOverrideProxyId returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasOverrideProxyId() bool {
	if o != nil && !utils.IsNil(o.OverrideProxyId) {
		return true
	}

	return false
}

// SetOverrideProxyId gets a reference to the given string and assigns it to the OverrideProxyId field.
func (o *HttpServerTestResponse) SetOverrideProxyId(v string) {
	o.OverrideProxyId = &v
}

// GetCollectProxyNetworkData returns the CollectProxyNetworkData field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetCollectProxyNetworkData() bool {
	if o == nil || utils.IsNil(o.CollectProxyNetworkData) {
		var ret bool
		return ret
	}
	return *o.CollectProxyNetworkData
}

// GetCollectProxyNetworkDataOk returns a tuple with the CollectProxyNetworkData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetCollectProxyNetworkDataOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.CollectProxyNetworkData) {
		return nil, false
	}
	return o.CollectProxyNetworkData, true
}

// HasCollectProxyNetworkData returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasCollectProxyNetworkData() bool {
	if o != nil && !utils.IsNil(o.CollectProxyNetworkData) {
		return true
	}

	return false
}

// SetCollectProxyNetworkData gets a reference to the given bool and assigns it to the CollectProxyNetworkData field.
func (o *HttpServerTestResponse) SetCollectProxyNetworkData(v bool) {
	o.CollectProxyNetworkData = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetHeaders() []string {
	if o == nil || utils.IsNil(o.Headers) {
		var ret []string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetHeadersOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasHeaders() bool {
	if o != nil && !utils.IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []string and assigns it to the Headers field.
func (o *HttpServerTestResponse) SetHeaders(v []string) {
	o.Headers = v
}

// GetRandomizedStartTime returns the RandomizedStartTime field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetRandomizedStartTime() bool {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		var ret bool
		return ret
	}
	return *o.RandomizedStartTime
}

// GetRandomizedStartTimeOk returns a tuple with the RandomizedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetRandomizedStartTimeOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		return nil, false
	}
	return o.RandomizedStartTime, true
}

// HasRandomizedStartTime returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasRandomizedStartTime() bool {
	if o != nil && !utils.IsNil(o.RandomizedStartTime) {
		return true
	}

	return false
}

// SetRandomizedStartTime gets a reference to the given bool and assigns it to the RandomizedStartTime field.
func (o *HttpServerTestResponse) SetRandomizedStartTime(v bool) {
	o.RandomizedStartTime = &v
}

// GetPostBody returns the PostBody field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetPostBody() string {
	if o == nil || utils.IsNil(o.PostBody) {
		var ret string
		return ret
	}
	return *o.PostBody
}

// GetPostBodyOk returns a tuple with the PostBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetPostBodyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PostBody) {
		return nil, false
	}
	return o.PostBody, true
}

// HasPostBody returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasPostBody() bool {
	if o != nil && !utils.IsNil(o.PostBody) {
		return true
	}

	return false
}

// SetPostBody gets a reference to the given string and assigns it to the PostBody field.
func (o *HttpServerTestResponse) SetPostBody(v string) {
	o.PostBody = &v
}

// GetIpv6Policy returns the Ipv6Policy field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetIpv6Policy() TestIpv6Policy {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		var ret TestIpv6Policy
		return ret
	}
	return *o.Ipv6Policy
}

// GetIpv6PolicyOk returns a tuple with the Ipv6Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetIpv6PolicyOk() (*TestIpv6Policy, bool) {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		return nil, false
	}
	return o.Ipv6Policy, true
}

// HasIpv6Policy returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasIpv6Policy() bool {
	if o != nil && !utils.IsNil(o.Ipv6Policy) {
		return true
	}

	return false
}

// SetIpv6Policy gets a reference to the given TestIpv6Policy and assigns it to the Ipv6Policy field.
func (o *HttpServerTestResponse) SetIpv6Policy(v TestIpv6Policy) {
	o.Ipv6Policy = &v
}

// GetBgpMeasurements returns the BgpMeasurements field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetBgpMeasurements() bool {
	if o == nil || utils.IsNil(o.BgpMeasurements) {
		var ret bool
		return ret
	}
	return *o.BgpMeasurements
}

// GetBgpMeasurementsOk returns a tuple with the BgpMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetBgpMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.BgpMeasurements) {
		return nil, false
	}
	return o.BgpMeasurements, true
}

// HasBgpMeasurements returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasBgpMeasurements() bool {
	if o != nil && !utils.IsNil(o.BgpMeasurements) {
		return true
	}

	return false
}

// SetBgpMeasurements gets a reference to the given bool and assigns it to the BgpMeasurements field.
func (o *HttpServerTestResponse) SetBgpMeasurements(v bool) {
	o.BgpMeasurements = &v
}

// GetUsePublicBgp returns the UsePublicBgp field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetUsePublicBgp() bool {
	if o == nil || utils.IsNil(o.UsePublicBgp) {
		var ret bool
		return ret
	}
	return *o.UsePublicBgp
}

// GetUsePublicBgpOk returns a tuple with the UsePublicBgp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetUsePublicBgpOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.UsePublicBgp) {
		return nil, false
	}
	return o.UsePublicBgp, true
}

// HasUsePublicBgp returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasUsePublicBgp() bool {
	if o != nil && !utils.IsNil(o.UsePublicBgp) {
		return true
	}

	return false
}

// SetUsePublicBgp gets a reference to the given bool and assigns it to the UsePublicBgp field.
func (o *HttpServerTestResponse) SetUsePublicBgp(v bool) {
	o.UsePublicBgp = &v
}

// GetMonitors returns the Monitors field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetMonitors() []Monitor {
	if o == nil || utils.IsNil(o.Monitors) {
		var ret []Monitor
		return ret
	}
	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetMonitorsOk() ([]Monitor, bool) {
	if o == nil || utils.IsNil(o.Monitors) {
		return nil, false
	}
	return o.Monitors, true
}

// HasMonitors returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasMonitors() bool {
	if o != nil && !utils.IsNil(o.Monitors) {
		return true
	}

	return false
}

// SetMonitors gets a reference to the given []Monitor and assigns it to the Monitors field.
func (o *HttpServerTestResponse) SetMonitors(v []Monitor) {
	o.Monitors = v
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *HttpServerTestResponse) GetAgents() []AgentResponse {
	if o == nil || utils.IsNil(o.Agents) {
		var ret []AgentResponse
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpServerTestResponse) GetAgentsOk() ([]AgentResponse, bool) {
	if o == nil || utils.IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *HttpServerTestResponse) HasAgents() bool {
	if o != nil && !utils.IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []AgentResponse and assigns it to the Agents field.
func (o *HttpServerTestResponse) SetAgents(v []AgentResponse) {
	o.Agents = v
}

func (o HttpServerTestResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpServerTestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interval"] = o.Interval
	if !utils.IsNil(o.AlertsEnabled) {
		toSerialize["alertsEnabled"] = o.AlertsEnabled
	}
	if !utils.IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !utils.IsNil(o.AlertRules) {
		toSerialize["alertRules"] = o.AlertRules
	}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !utils.IsNil(o.LiveShare) {
		toSerialize["liveShare"] = o.LiveShare
	}
	if !utils.IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !utils.IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !utils.IsNil(o.SavedEvent) {
		toSerialize["savedEvent"] = o.SavedEvent
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.SharedWithAccounts) {
		toSerialize["sharedWithAccounts"] = o.SharedWithAccounts
	}
	if !utils.IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !utils.IsNil(o.AgentInterfaces) {
		toSerialize["agentInterfaces"] = o.AgentInterfaces
	}
	if !utils.IsNil(o.BandwidthMeasurements) {
		toSerialize["bandwidthMeasurements"] = o.BandwidthMeasurements
	}
	if !utils.IsNil(o.ClientCertificate) {
		toSerialize["clientCertificate"] = o.ClientCertificate
	}
	if !utils.IsNil(o.ContentRegex) {
		toSerialize["contentRegex"] = o.ContentRegex
	}
	if !utils.IsNil(o.CustomHeaders) {
		toSerialize["customHeaders"] = o.CustomHeaders
	}
	if !utils.IsNil(o.DesiredStatusCode) {
		toSerialize["desiredStatusCode"] = o.DesiredStatusCode
	}
	if !utils.IsNil(o.DownloadLimit) {
		toSerialize["downloadLimit"] = o.DownloadLimit
	}
	if !utils.IsNil(o.DnsOverride) {
		toSerialize["dnsOverride"] = o.DnsOverride
	}
	if !utils.IsNil(o.HttpTargetTime) {
		toSerialize["httpTargetTime"] = o.HttpTargetTime
	}
	if !utils.IsNil(o.HttpTimeLimit) {
		toSerialize["httpTimeLimit"] = o.HttpTimeLimit
	}
	if !utils.IsNil(o.HttpVersion) {
		toSerialize["httpVersion"] = o.HttpVersion
	}
	if !utils.IsNil(o.IncludeHeaders) {
		toSerialize["includeHeaders"] = o.IncludeHeaders
	}
	if !utils.IsNil(o.MtuMeasurements) {
		toSerialize["mtuMeasurements"] = o.MtuMeasurements
	}
	if !utils.IsNil(o.NetworkMeasurements) {
		toSerialize["networkMeasurements"] = o.NetworkMeasurements
	}
	if !utils.IsNil(o.NumPathTraces) {
		toSerialize["numPathTraces"] = o.NumPathTraces
	}
	if !utils.IsNil(o.OAuth) {
		toSerialize["oAuth"] = o.OAuth
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !utils.IsNil(o.PathTraceMode) {
		toSerialize["pathTraceMode"] = o.PathTraceMode
	}
	if !utils.IsNil(o.ProbeMode) {
		toSerialize["probeMode"] = o.ProbeMode
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.SslVersion) {
		toSerialize["sslVersion"] = o.SslVersion
	}
	if !utils.IsNil(o.SslVersionId) {
		toSerialize["sslVersionId"] = o.SslVersionId
	}
	toSerialize["url"] = o.Url
	if !utils.IsNil(o.UseNtlm) {
		toSerialize["useNtlm"] = o.UseNtlm
	}
	if !utils.IsNil(o.UserAgent) {
		toSerialize["userAgent"] = o.UserAgent
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.VerifyCertificate) {
		toSerialize["verifyCertificate"] = o.VerifyCertificate
	}
	if !utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		toSerialize["allowUnsafeLegacyRenegotiation"] = o.AllowUnsafeLegacyRenegotiation
	}
	if !utils.IsNil(o.FollowRedirects) {
		toSerialize["followRedirects"] = o.FollowRedirects
	}
	if !utils.IsNil(o.FixedPacketRate) {
		toSerialize["fixedPacketRate"] = o.FixedPacketRate
	}
	if !utils.IsNil(o.OverrideAgentProxy) {
		toSerialize["overrideAgentProxy"] = o.OverrideAgentProxy
	}
	if !utils.IsNil(o.OverrideProxyId) {
		toSerialize["overrideProxyId"] = o.OverrideProxyId
	}
	if !utils.IsNil(o.CollectProxyNetworkData) {
		toSerialize["collectProxyNetworkData"] = o.CollectProxyNetworkData
	}
	if !utils.IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !utils.IsNil(o.RandomizedStartTime) {
		toSerialize["randomizedStartTime"] = o.RandomizedStartTime
	}
	if !utils.IsNil(o.PostBody) {
		toSerialize["postBody"] = o.PostBody
	}
	if !utils.IsNil(o.Ipv6Policy) {
		toSerialize["ipv6Policy"] = o.Ipv6Policy
	}
	if !utils.IsNil(o.BgpMeasurements) {
		toSerialize["bgpMeasurements"] = o.BgpMeasurements
	}
	if !utils.IsNil(o.UsePublicBgp) {
		toSerialize["usePublicBgp"] = o.UsePublicBgp
	}
	if !utils.IsNil(o.Monitors) {
		toSerialize["monitors"] = o.Monitors
	}
	if !utils.IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	return toSerialize, nil
}

func (o *HttpServerTestResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interval",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHttpServerTestResponse := _HttpServerTestResponse{}

    err = json.Unmarshal(data, &varHttpServerTestResponse)

	if err != nil {
		return err
	}

	*o = HttpServerTestResponse(varHttpServerTestResponse)

	return err
}

type NullableHttpServerTestResponse struct {
	value *HttpServerTestResponse
	isSet bool
}

func (v NullableHttpServerTestResponse) Get() *HttpServerTestResponse {
	return v.value
}

func (v *NullableHttpServerTestResponse) Set(val *HttpServerTestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpServerTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpServerTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpServerTestResponse(val *HttpServerTestResponse) *NullableHttpServerTestResponse {
	return &NullableHttpServerTestResponse{value: val, isSet: true}
}

func (v NullableHttpServerTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpServerTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


