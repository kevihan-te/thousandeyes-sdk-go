/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the TestRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestRequest{}

// TestRequest struct for TestRequest
type TestRequest struct {
	// Contains list of test label IDs (get `labelId` from `/labels` endpoint)
	Labels []string `json:"labels,omitempty"`
	// Contains list of account group IDs. Test is shared with the listed account groups (get `aid` from `/account-groups` endpoint)
	SharedWithAccounts []string `json:"sharedWithAccounts,omitempty"`
	// List of alert rules IDs to apply to the test (get `ruleId` from `/alerts/rules` endpoint. If `alertsEnabled` is set to `true` and `alertRules` is not included on test creation or update, applicable user default alert rules will be used)
	AlertRules []string `json:"alertRules,omitempty"`
	// Contains list of Agent IDs (get `agentId` from `/agents` endpoint).
	Agents []TestAgentRequest `json:"agents"`
}

type _TestRequest TestRequest

// NewTestRequest instantiates a new TestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRequest(agents []TestAgentRequest) *TestRequest {
	this := TestRequest{}
	this.Agents = agents
	return &this
}

// NewTestRequestWithDefaults instantiates a new TestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRequestWithDefaults() *TestRequest {
	this := TestRequest{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *TestRequest) GetLabels() []string {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRequest) GetLabelsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *TestRequest) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *TestRequest) SetLabels(v []string) {
	o.Labels = v
}

// GetSharedWithAccounts returns the SharedWithAccounts field value if set, zero value otherwise.
func (o *TestRequest) GetSharedWithAccounts() []string {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		var ret []string
		return ret
	}
	return o.SharedWithAccounts
}

// GetSharedWithAccountsOk returns a tuple with the SharedWithAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRequest) GetSharedWithAccountsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		return nil, false
	}
	return o.SharedWithAccounts, true
}

// HasSharedWithAccounts returns a boolean if a field has been set.
func (o *TestRequest) HasSharedWithAccounts() bool {
	if o != nil && !utils.IsNil(o.SharedWithAccounts) {
		return true
	}

	return false
}

// SetSharedWithAccounts gets a reference to the given []string and assigns it to the SharedWithAccounts field.
func (o *TestRequest) SetSharedWithAccounts(v []string) {
	o.SharedWithAccounts = v
}

// GetAlertRules returns the AlertRules field value if set, zero value otherwise.
func (o *TestRequest) GetAlertRules() []string {
	if o == nil || utils.IsNil(o.AlertRules) {
		var ret []string
		return ret
	}
	return o.AlertRules
}

// GetAlertRulesOk returns a tuple with the AlertRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRequest) GetAlertRulesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AlertRules) {
		return nil, false
	}
	return o.AlertRules, true
}

// HasAlertRules returns a boolean if a field has been set.
func (o *TestRequest) HasAlertRules() bool {
	if o != nil && !utils.IsNil(o.AlertRules) {
		return true
	}

	return false
}

// SetAlertRules gets a reference to the given []string and assigns it to the AlertRules field.
func (o *TestRequest) SetAlertRules(v []string) {
	o.AlertRules = v
}

// GetAgents returns the Agents field value
func (o *TestRequest) GetAgents() []TestAgentRequest {
	if o == nil {
		var ret []TestAgentRequest
		return ret
	}

	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value
// and a boolean to check if the value has been set.
func (o *TestRequest) GetAgentsOk() ([]TestAgentRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Agents, true
}

// SetAgents sets field value
func (o *TestRequest) SetAgents(v []TestAgentRequest) {
	o.Agents = v
}

func (o TestRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.SharedWithAccounts) {
		toSerialize["sharedWithAccounts"] = o.SharedWithAccounts
	}
	if !utils.IsNil(o.AlertRules) {
		toSerialize["alertRules"] = o.AlertRules
	}
	toSerialize["agents"] = o.Agents
	return toSerialize, nil
}

func (o *TestRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestRequest := _TestRequest{}

    err = json.Unmarshal(data, &varTestRequest)

	if err != nil {
		return err
	}

	*o = TestRequest(varTestRequest)

	return err
}

type NullableTestRequest struct {
	value *TestRequest
	isSet bool
}

func (v NullableTestRequest) Get() *TestRequest {
	return v.value
}

func (v *NullableTestRequest) Set(val *TestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRequest(val *TestRequest) *NullableTestRequest {
	return &NullableTestRequest{value: val, isSet: true}
}

func (v NullableTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


