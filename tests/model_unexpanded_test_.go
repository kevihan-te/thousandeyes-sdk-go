/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the UnexpandedTest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UnexpandedTest{}

// UnexpandedTest struct for UnexpandedTest
type UnexpandedTest struct {
	Interval *TestInterval `json:"interval,omitempty"`
	// Indicates if alerts are enabled.
	AlertsEnabled *bool `json:"alertsEnabled,omitempty"`
	// Test is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewUnexpandedTest instantiates a new UnexpandedTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnexpandedTest() *UnexpandedTest {
	this := UnexpandedTest{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewUnexpandedTestWithDefaults instantiates a new UnexpandedTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnexpandedTestWithDefaults() *UnexpandedTest {
	this := UnexpandedTest{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *UnexpandedTest) GetInterval() TestInterval {
	if o == nil || utils.IsNil(o.Interval) {
		var ret TestInterval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpandedTest) GetIntervalOk() (*TestInterval, bool) {
	if o == nil || utils.IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *UnexpandedTest) HasInterval() bool {
	if o != nil && !utils.IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given TestInterval and assigns it to the Interval field.
func (o *UnexpandedTest) SetInterval(v TestInterval) {
	o.Interval = &v
}

// GetAlertsEnabled returns the AlertsEnabled field value if set, zero value otherwise.
func (o *UnexpandedTest) GetAlertsEnabled() bool {
	if o == nil || utils.IsNil(o.AlertsEnabled) {
		var ret bool
		return ret
	}
	return *o.AlertsEnabled
}

// GetAlertsEnabledOk returns a tuple with the AlertsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpandedTest) GetAlertsEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AlertsEnabled) {
		return nil, false
	}
	return o.AlertsEnabled, true
}

// HasAlertsEnabled returns a boolean if a field has been set.
func (o *UnexpandedTest) HasAlertsEnabled() bool {
	if o != nil && !utils.IsNil(o.AlertsEnabled) {
		return true
	}

	return false
}

// SetAlertsEnabled gets a reference to the given bool and assigns it to the AlertsEnabled field.
func (o *UnexpandedTest) SetAlertsEnabled(v bool) {
	o.AlertsEnabled = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UnexpandedTest) GetEnabled() bool {
	if o == nil || utils.IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnexpandedTest) GetEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UnexpandedTest) HasEnabled() bool {
	if o != nil && !utils.IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UnexpandedTest) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o UnexpandedTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnexpandedTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !utils.IsNil(o.AlertsEnabled) {
		toSerialize["alertsEnabled"] = o.AlertsEnabled
	}
	if !utils.IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableUnexpandedTest struct {
	value *UnexpandedTest
	isSet bool
}

func (v NullableUnexpandedTest) Get() *UnexpandedTest {
	return v.value
}

func (v *NullableUnexpandedTest) Set(val *UnexpandedTest) {
	v.value = val
	v.isSet = true
}

func (v NullableUnexpandedTest) IsSet() bool {
	return v.isSet
}

func (v *NullableUnexpandedTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnexpandedTest(val *UnexpandedTest) *NullableUnexpandedTest {
	return &NullableUnexpandedTest{value: val, isSet: true}
}

func (v NullableUnexpandedTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnexpandedTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


