/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the BaseRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BaseRequest{}

// BaseRequest struct for BaseRequest
type BaseRequest struct {
	// Contains list of test label IDs (get `labelId` from `/labels` endpoint)
	Labels []string `json:"labels,omitempty"`
	// Contains list of account group IDs. Test is shared with the listed account groups (get `aid` from `/account-groups` endpoint)
	SharedWithAccounts []string `json:"sharedWithAccounts,omitempty"`
	// List of alert rules IDs to apply to the test (get `ruleId` from `/alerts/rules` endpoint. If `alertsEnabled` is set to `true` and `alertRules` is not included on test creation or update, applicable user default alert rules will be used)
	AlertRules []string `json:"alertRules,omitempty"`
}

// NewBaseRequest instantiates a new BaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseRequest() *BaseRequest {
	this := BaseRequest{}
	return &this
}

// NewBaseRequestWithDefaults instantiates a new BaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseRequestWithDefaults() *BaseRequest {
	this := BaseRequest{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *BaseRequest) GetLabels() []string {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRequest) GetLabelsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *BaseRequest) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *BaseRequest) SetLabels(v []string) {
	o.Labels = v
}

// GetSharedWithAccounts returns the SharedWithAccounts field value if set, zero value otherwise.
func (o *BaseRequest) GetSharedWithAccounts() []string {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		var ret []string
		return ret
	}
	return o.SharedWithAccounts
}

// GetSharedWithAccountsOk returns a tuple with the SharedWithAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRequest) GetSharedWithAccountsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		return nil, false
	}
	return o.SharedWithAccounts, true
}

// HasSharedWithAccounts returns a boolean if a field has been set.
func (o *BaseRequest) HasSharedWithAccounts() bool {
	if o != nil && !utils.IsNil(o.SharedWithAccounts) {
		return true
	}

	return false
}

// SetSharedWithAccounts gets a reference to the given []string and assigns it to the SharedWithAccounts field.
func (o *BaseRequest) SetSharedWithAccounts(v []string) {
	o.SharedWithAccounts = v
}

// GetAlertRules returns the AlertRules field value if set, zero value otherwise.
func (o *BaseRequest) GetAlertRules() []string {
	if o == nil || utils.IsNil(o.AlertRules) {
		var ret []string
		return ret
	}
	return o.AlertRules
}

// GetAlertRulesOk returns a tuple with the AlertRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRequest) GetAlertRulesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AlertRules) {
		return nil, false
	}
	return o.AlertRules, true
}

// HasAlertRules returns a boolean if a field has been set.
func (o *BaseRequest) HasAlertRules() bool {
	if o != nil && !utils.IsNil(o.AlertRules) {
		return true
	}

	return false
}

// SetAlertRules gets a reference to the given []string and assigns it to the AlertRules field.
func (o *BaseRequest) SetAlertRules(v []string) {
	o.AlertRules = v
}

func (o BaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.SharedWithAccounts) {
		toSerialize["sharedWithAccounts"] = o.SharedWithAccounts
	}
	if !utils.IsNil(o.AlertRules) {
		toSerialize["alertRules"] = o.AlertRules
	}
	return toSerialize, nil
}

type NullableBaseRequest struct {
	value *BaseRequest
	isSet bool
}

func (v NullableBaseRequest) Get() *BaseRequest {
	return v.value
}

func (v *NullableBaseRequest) Set(val *BaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseRequest(val *BaseRequest) *NullableBaseRequest {
	return &NullableBaseRequest{value: val, isSet: true}
}

func (v NullableBaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


