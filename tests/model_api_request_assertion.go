/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiRequestAssertion type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiRequestAssertion{}

// ApiRequestAssertion struct for ApiRequestAssertion
type ApiRequestAssertion struct {
	Name *ApiRequestAssertionName `json:"name,omitempty"`
	Operator *ApiRequestAssertionOperator `json:"operator,omitempty"`
	// The value of the assertion. If name = `status-code`, the status code to assert. If name = `response-body`, the lookup value to assert.
	Value *string `json:"value,omitempty"`
}

// NewApiRequestAssertion instantiates a new ApiRequestAssertion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRequestAssertion() *ApiRequestAssertion {
	this := ApiRequestAssertion{}
	return &this
}

// NewApiRequestAssertionWithDefaults instantiates a new ApiRequestAssertion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRequestAssertionWithDefaults() *ApiRequestAssertion {
	this := ApiRequestAssertion{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiRequestAssertion) GetName() ApiRequestAssertionName {
	if o == nil || utils.IsNil(o.Name) {
		var ret ApiRequestAssertionName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequestAssertion) GetNameOk() (*ApiRequestAssertionName, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiRequestAssertion) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given ApiRequestAssertionName and assigns it to the Name field.
func (o *ApiRequestAssertion) SetName(v ApiRequestAssertionName) {
	o.Name = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *ApiRequestAssertion) GetOperator() ApiRequestAssertionOperator {
	if o == nil || utils.IsNil(o.Operator) {
		var ret ApiRequestAssertionOperator
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequestAssertion) GetOperatorOk() (*ApiRequestAssertionOperator, bool) {
	if o == nil || utils.IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *ApiRequestAssertion) HasOperator() bool {
	if o != nil && !utils.IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given ApiRequestAssertionOperator and assigns it to the Operator field.
func (o *ApiRequestAssertion) SetOperator(v ApiRequestAssertionOperator) {
	o.Operator = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApiRequestAssertion) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRequestAssertion) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApiRequestAssertion) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ApiRequestAssertion) SetValue(v string) {
	o.Value = &v
}

func (o ApiRequestAssertion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiRequestAssertion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableApiRequestAssertion struct {
	value *ApiRequestAssertion
	isSet bool
}

func (v NullableApiRequestAssertion) Get() *ApiRequestAssertion {
	return v.value
}

func (v *NullableApiRequestAssertion) Set(val *ApiRequestAssertion) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRequestAssertion) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRequestAssertion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRequestAssertion(val *ApiRequestAssertion) *NullableApiRequestAssertion {
	return &NullableApiRequestAssertion{value: val, isSet: true}
}

func (v NullableApiRequestAssertion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRequestAssertion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


