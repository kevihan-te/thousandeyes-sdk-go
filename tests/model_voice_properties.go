/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the VoiceProperties type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &VoiceProperties{}

// VoiceProperties struct for VoiceProperties
type VoiceProperties struct {
	// Codec label
	Codec *string `json:"codec,omitempty"`
	// Coded ID, [see the list of acceptable values](https://docs.thousandeyes.com/product-documentation/internet-and-wan-monitoring/tests/working-with-test-settings#rtp-stream-advanced-settings-tab)
	CodecId *string `json:"codecId,omitempty"`
	// DSCP label.
	Dscp *string `json:"dscp,omitempty"`
	DscpId *TestDscpId `json:"dscpId,omitempty"`
	// Duration of the test in seconds.
	Duration *int32 `json:"duration,omitempty"`
	// De-jitter buffer size in seconds.
	JitterBuffer *int32 `json:"jitterBuffer,omitempty"`
	// Number of path traces executed by the agent.
	NumPathTraces *int32 `json:"numPathTraces,omitempty"`
	// Port number for the chosen protocol.
	Port *int32 `json:"port,omitempty"`
	// Indicates whether agents should randomize the start time in each test round.
	RandomizedStartTime *bool `json:"randomizedStartTime,omitempty"`
	// Agent ID of the target agent for the test.
	TargetAgentId string `json:"targetAgentId"`
	Type *string `json:"type,omitempty"`
}

type _VoiceProperties VoiceProperties

// NewVoiceProperties instantiates a new VoiceProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoiceProperties(targetAgentId string) *VoiceProperties {
	this := VoiceProperties{}
	var dscpId TestDscpId = TESTDSCPID__0
	this.DscpId = &dscpId
	var duration int32 = 5
	this.Duration = &duration
	var jitterBuffer int32 = 40
	this.JitterBuffer = &jitterBuffer
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	this.TargetAgentId = targetAgentId
	return &this
}

// NewVoicePropertiesWithDefaults instantiates a new VoiceProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoicePropertiesWithDefaults() *VoiceProperties {
	this := VoiceProperties{}
	var dscpId TestDscpId = TESTDSCPID__0
	this.DscpId = &dscpId
	var duration int32 = 5
	this.Duration = &duration
	var jitterBuffer int32 = 40
	this.JitterBuffer = &jitterBuffer
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	return &this
}

// GetCodec returns the Codec field value if set, zero value otherwise.
func (o *VoiceProperties) GetCodec() string {
	if o == nil || utils.IsNil(o.Codec) {
		var ret string
		return ret
	}
	return *o.Codec
}

// GetCodecOk returns a tuple with the Codec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetCodecOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Codec) {
		return nil, false
	}
	return o.Codec, true
}

// HasCodec returns a boolean if a field has been set.
func (o *VoiceProperties) HasCodec() bool {
	if o != nil && !utils.IsNil(o.Codec) {
		return true
	}

	return false
}

// SetCodec gets a reference to the given string and assigns it to the Codec field.
func (o *VoiceProperties) SetCodec(v string) {
	o.Codec = &v
}

// GetCodecId returns the CodecId field value if set, zero value otherwise.
func (o *VoiceProperties) GetCodecId() string {
	if o == nil || utils.IsNil(o.CodecId) {
		var ret string
		return ret
	}
	return *o.CodecId
}

// GetCodecIdOk returns a tuple with the CodecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetCodecIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CodecId) {
		return nil, false
	}
	return o.CodecId, true
}

// HasCodecId returns a boolean if a field has been set.
func (o *VoiceProperties) HasCodecId() bool {
	if o != nil && !utils.IsNil(o.CodecId) {
		return true
	}

	return false
}

// SetCodecId gets a reference to the given string and assigns it to the CodecId field.
func (o *VoiceProperties) SetCodecId(v string) {
	o.CodecId = &v
}

// GetDscp returns the Dscp field value if set, zero value otherwise.
func (o *VoiceProperties) GetDscp() string {
	if o == nil || utils.IsNil(o.Dscp) {
		var ret string
		return ret
	}
	return *o.Dscp
}

// GetDscpOk returns a tuple with the Dscp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetDscpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Dscp) {
		return nil, false
	}
	return o.Dscp, true
}

// HasDscp returns a boolean if a field has been set.
func (o *VoiceProperties) HasDscp() bool {
	if o != nil && !utils.IsNil(o.Dscp) {
		return true
	}

	return false
}

// SetDscp gets a reference to the given string and assigns it to the Dscp field.
func (o *VoiceProperties) SetDscp(v string) {
	o.Dscp = &v
}

// GetDscpId returns the DscpId field value if set, zero value otherwise.
func (o *VoiceProperties) GetDscpId() TestDscpId {
	if o == nil || utils.IsNil(o.DscpId) {
		var ret TestDscpId
		return ret
	}
	return *o.DscpId
}

// GetDscpIdOk returns a tuple with the DscpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetDscpIdOk() (*TestDscpId, bool) {
	if o == nil || utils.IsNil(o.DscpId) {
		return nil, false
	}
	return o.DscpId, true
}

// HasDscpId returns a boolean if a field has been set.
func (o *VoiceProperties) HasDscpId() bool {
	if o != nil && !utils.IsNil(o.DscpId) {
		return true
	}

	return false
}

// SetDscpId gets a reference to the given TestDscpId and assigns it to the DscpId field.
func (o *VoiceProperties) SetDscpId(v TestDscpId) {
	o.DscpId = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *VoiceProperties) GetDuration() int32 {
	if o == nil || utils.IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetDurationOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *VoiceProperties) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *VoiceProperties) SetDuration(v int32) {
	o.Duration = &v
}

// GetJitterBuffer returns the JitterBuffer field value if set, zero value otherwise.
func (o *VoiceProperties) GetJitterBuffer() int32 {
	if o == nil || utils.IsNil(o.JitterBuffer) {
		var ret int32
		return ret
	}
	return *o.JitterBuffer
}

// GetJitterBufferOk returns a tuple with the JitterBuffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetJitterBufferOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.JitterBuffer) {
		return nil, false
	}
	return o.JitterBuffer, true
}

// HasJitterBuffer returns a boolean if a field has been set.
func (o *VoiceProperties) HasJitterBuffer() bool {
	if o != nil && !utils.IsNil(o.JitterBuffer) {
		return true
	}

	return false
}

// SetJitterBuffer gets a reference to the given int32 and assigns it to the JitterBuffer field.
func (o *VoiceProperties) SetJitterBuffer(v int32) {
	o.JitterBuffer = &v
}

// GetNumPathTraces returns the NumPathTraces field value if set, zero value otherwise.
func (o *VoiceProperties) GetNumPathTraces() int32 {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		var ret int32
		return ret
	}
	return *o.NumPathTraces
}

// GetNumPathTracesOk returns a tuple with the NumPathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetNumPathTracesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		return nil, false
	}
	return o.NumPathTraces, true
}

// HasNumPathTraces returns a boolean if a field has been set.
func (o *VoiceProperties) HasNumPathTraces() bool {
	if o != nil && !utils.IsNil(o.NumPathTraces) {
		return true
	}

	return false
}

// SetNumPathTraces gets a reference to the given int32 and assigns it to the NumPathTraces field.
func (o *VoiceProperties) SetNumPathTraces(v int32) {
	o.NumPathTraces = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *VoiceProperties) GetPort() int32 {
	if o == nil || utils.IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *VoiceProperties) HasPort() bool {
	if o != nil && !utils.IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *VoiceProperties) SetPort(v int32) {
	o.Port = &v
}

// GetRandomizedStartTime returns the RandomizedStartTime field value if set, zero value otherwise.
func (o *VoiceProperties) GetRandomizedStartTime() bool {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		var ret bool
		return ret
	}
	return *o.RandomizedStartTime
}

// GetRandomizedStartTimeOk returns a tuple with the RandomizedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetRandomizedStartTimeOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		return nil, false
	}
	return o.RandomizedStartTime, true
}

// HasRandomizedStartTime returns a boolean if a field has been set.
func (o *VoiceProperties) HasRandomizedStartTime() bool {
	if o != nil && !utils.IsNil(o.RandomizedStartTime) {
		return true
	}

	return false
}

// SetRandomizedStartTime gets a reference to the given bool and assigns it to the RandomizedStartTime field.
func (o *VoiceProperties) SetRandomizedStartTime(v bool) {
	o.RandomizedStartTime = &v
}

// GetTargetAgentId returns the TargetAgentId field value
func (o *VoiceProperties) GetTargetAgentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetAgentId
}

// GetTargetAgentIdOk returns a tuple with the TargetAgentId field value
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetTargetAgentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetAgentId, true
}

// SetTargetAgentId sets field value
func (o *VoiceProperties) SetTargetAgentId(v string) {
	o.TargetAgentId = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VoiceProperties) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoiceProperties) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VoiceProperties) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VoiceProperties) SetType(v string) {
	o.Type = &v
}

func (o VoiceProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoiceProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Codec) {
		toSerialize["codec"] = o.Codec
	}
	if !utils.IsNil(o.CodecId) {
		toSerialize["codecId"] = o.CodecId
	}
	if !utils.IsNil(o.Dscp) {
		toSerialize["dscp"] = o.Dscp
	}
	if !utils.IsNil(o.DscpId) {
		toSerialize["dscpId"] = o.DscpId
	}
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !utils.IsNil(o.JitterBuffer) {
		toSerialize["jitterBuffer"] = o.JitterBuffer
	}
	if !utils.IsNil(o.NumPathTraces) {
		toSerialize["numPathTraces"] = o.NumPathTraces
	}
	if !utils.IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !utils.IsNil(o.RandomizedStartTime) {
		toSerialize["randomizedStartTime"] = o.RandomizedStartTime
	}
	toSerialize["targetAgentId"] = o.TargetAgentId
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *VoiceProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetAgentId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVoiceProperties := _VoiceProperties{}

    err = json.Unmarshal(data, &varVoiceProperties)

	if err != nil {
		return err
	}

	*o = VoiceProperties(varVoiceProperties)

	return err
}

type NullableVoiceProperties struct {
	value *VoiceProperties
	isSet bool
}

func (v NullableVoiceProperties) Get() *VoiceProperties {
	return v.value
}

func (v *NullableVoiceProperties) Set(val *VoiceProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableVoiceProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableVoiceProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoiceProperties(val *VoiceProperties) *NullableVoiceProperties {
	return &NullableVoiceProperties{value: val, isSet: true}
}

func (v NullableVoiceProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoiceProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


