/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestSubInterval Subinterval for round-robin testing (in seconds). Must be less than or equal to interval and must evenly divide interval.
type TestSubInterval int32

// List of TestSubInterval
const (
	TESTSUBINTERVAL__60 TestSubInterval = 60
	TESTSUBINTERVAL__120 TestSubInterval = 120
	TESTSUBINTERVAL__300 TestSubInterval = 300
	TESTSUBINTERVAL__600 TestSubInterval = 600
	TESTSUBINTERVAL__900 TestSubInterval = 900
	TESTSUBINTERVAL__1200 TestSubInterval = 1200
	TESTSUBINTERVAL__1800 TestSubInterval = 1800
	TESTSUBINTERVAL__3600 TestSubInterval = 3600
)

// All allowed values of TestSubInterval enum
var AllowedTestSubIntervalEnumValues = []TestSubInterval{
	60,
	120,
	300,
	600,
	900,
	1200,
	1800,
	3600,
}

func (v *TestSubInterval) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestSubInterval(value)
	for _, existing := range AllowedTestSubIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestSubInterval", value)
}

// NewTestSubIntervalFromValue returns a pointer to a valid TestSubInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestSubIntervalFromValue(v int32) (*TestSubInterval, error) {
	ev := TestSubInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestSubInterval: valid values are %v", v, AllowedTestSubIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestSubInterval) IsValid() bool {
	for _, existing := range AllowedTestSubIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestSubInterval value
func (v TestSubInterval) Ptr() *TestSubInterval {
	return &v
}

type NullableTestSubInterval struct {
	value *TestSubInterval
	isSet bool
}

func (v NullableTestSubInterval) Get() *TestSubInterval {
	return v.value
}

func (v *NullableTestSubInterval) Set(val *TestSubInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSubInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSubInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSubInterval(val *TestSubInterval) *NullableTestSubInterval {
	return &NullableTestSubInterval{value: val, isSet: true}
}

func (v NullableTestSubInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSubInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

