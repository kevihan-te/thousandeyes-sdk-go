/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestHttpInterval HTTP test run interval. The interval between HTTP test runs in seconds cannot exceed the specified interval value and defaults to the same value as the interval if not set.
type TestHttpInterval int32

// List of TestHttpInterval
const (
	TESTHTTPINTERVAL__60 TestHttpInterval = 60
	TESTHTTPINTERVAL__120 TestHttpInterval = 120
	TESTHTTPINTERVAL__300 TestHttpInterval = 300
	TESTHTTPINTERVAL__600 TestHttpInterval = 600
	TESTHTTPINTERVAL__900 TestHttpInterval = 900
	TESTHTTPINTERVAL__1800 TestHttpInterval = 1800
	TESTHTTPINTERVAL__3600 TestHttpInterval = 3600
)

// All allowed values of TestHttpInterval enum
var AllowedTestHttpIntervalEnumValues = []TestHttpInterval{
	60,
	120,
	300,
	600,
	900,
	1800,
	3600,
}

func (v *TestHttpInterval) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestHttpInterval(value)
	for _, existing := range AllowedTestHttpIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestHttpInterval", value)
}

// NewTestHttpIntervalFromValue returns a pointer to a valid TestHttpInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestHttpIntervalFromValue(v int32) (*TestHttpInterval, error) {
	ev := TestHttpInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestHttpInterval: valid values are %v", v, AllowedTestHttpIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestHttpInterval) IsValid() bool {
	for _, existing := range AllowedTestHttpIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestHttpInterval value
func (v TestHttpInterval) Ptr() *TestHttpInterval {
	return &v
}

type NullableTestHttpInterval struct {
	value *TestHttpInterval
	isSet bool
}

func (v NullableTestHttpInterval) Get() *TestHttpInterval {
	return v.value
}

func (v *NullableTestHttpInterval) Set(val *TestHttpInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTestHttpInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTestHttpInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestHttpInterval(val *TestHttpInterval) *NullableTestHttpInterval {
	return &NullableTestHttpInterval{value: val, isSet: true}
}

func (v NullableTestHttpInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestHttpInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

