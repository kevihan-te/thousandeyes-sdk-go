/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestIpv6Policy IP version policy. Overrides the IPv6 policy configured at the agent level.
type TestIpv6Policy string

// List of TestIpv6Policy
const (
	TESTIPV6POLICY_FORCE_IPV4 TestIpv6Policy = "force-ipv4"
	TESTIPV6POLICY_PREFER_IPV6 TestIpv6Policy = "prefer-ipv6"
	TESTIPV6POLICY_FORCE_IPV6 TestIpv6Policy = "force-ipv6"
	TESTIPV6POLICY_USE_AGENT_POLICY TestIpv6Policy = "use-agent-policy"
)

// All allowed values of TestIpv6Policy enum
var AllowedTestIpv6PolicyEnumValues = []TestIpv6Policy{
	"force-ipv4",
	"prefer-ipv6",
	"force-ipv6",
	"use-agent-policy",
}

func (v *TestIpv6Policy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestIpv6Policy(value)
	for _, existing := range AllowedTestIpv6PolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestIpv6Policy", value)
}

// NewTestIpv6PolicyFromValue returns a pointer to a valid TestIpv6Policy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestIpv6PolicyFromValue(v string) (*TestIpv6Policy, error) {
	ev := TestIpv6Policy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestIpv6Policy: valid values are %v", v, AllowedTestIpv6PolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestIpv6Policy) IsValid() bool {
	for _, existing := range AllowedTestIpv6PolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestIpv6Policy value
func (v TestIpv6Policy) Ptr() *TestIpv6Policy {
	return &v
}

type NullableTestIpv6Policy struct {
	value *TestIpv6Policy
	isSet bool
}

func (v NullableTestIpv6Policy) Get() *TestIpv6Policy {
	return v.value
}

func (v *NullableTestIpv6Policy) Set(val *TestIpv6Policy) {
	v.value = val
	v.isSet = true
}

func (v NullableTestIpv6Policy) IsSet() bool {
	return v.isSet
}

func (v *NullableTestIpv6Policy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestIpv6Policy(val *TestIpv6Policy) *NullableTestIpv6Policy {
	return &NullableTestIpv6Policy{value: val, isSet: true}
}

func (v NullableTestIpv6Policy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestIpv6Policy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

