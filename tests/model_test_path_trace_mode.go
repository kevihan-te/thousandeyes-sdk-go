/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestPathTraceMode Select `inSession` to perform the path trace within a TCP session.
type TestPathTraceMode string

// List of TestPathTraceMode
const (
	TESTPATHTRACEMODE_CLASSIC TestPathTraceMode = "classic"
	TESTPATHTRACEMODE_IN_SESSION TestPathTraceMode = "in-session"
)

// All allowed values of TestPathTraceMode enum
var AllowedTestPathTraceModeEnumValues = []TestPathTraceMode{
	"classic",
	"in-session",
}

func (v *TestPathTraceMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestPathTraceMode(value)
	for _, existing := range AllowedTestPathTraceModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestPathTraceMode", value)
}

// NewTestPathTraceModeFromValue returns a pointer to a valid TestPathTraceMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestPathTraceModeFromValue(v string) (*TestPathTraceMode, error) {
	ev := TestPathTraceMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestPathTraceMode: valid values are %v", v, AllowedTestPathTraceModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestPathTraceMode) IsValid() bool {
	for _, existing := range AllowedTestPathTraceModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestPathTraceMode value
func (v TestPathTraceMode) Ptr() *TestPathTraceMode {
	return &v
}

type NullableTestPathTraceMode struct {
	value *TestPathTraceMode
	isSet bool
}

func (v NullableTestPathTraceMode) Get() *TestPathTraceMode {
	return v.value
}

func (v *NullableTestPathTraceMode) Set(val *TestPathTraceMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPathTraceMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPathTraceMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPathTraceMode(val *TestPathTraceMode) *NullableTestPathTraceMode {
	return &NullableTestPathTraceMode{value: val, isSet: true}
}

func (v NullableTestPathTraceMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPathTraceMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

