/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Monitor type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Monitor{}

// Monitor struct for Monitor
type Monitor struct {
	// Country ID
	CountryId *string `json:"countryId,omitempty"`
	// BGP monitor ID
	MonitorId *string `json:"monitorId,omitempty"`
	// IP address of the BGP monitor
	IpAddress *string `json:"ipAddress,omitempty"`
	// Name of the autonomous system in which the monitor is found
	Network *string `json:"network,omitempty"`
	MonitorType *MonitorType `json:"monitorType,omitempty"`
	// Display name of the BGP monitor
	MonitorName *string `json:"monitorName,omitempty"`
}

// NewMonitor instantiates a new Monitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitor() *Monitor {
	this := Monitor{}
	return &this
}

// NewMonitorWithDefaults instantiates a new Monitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorWithDefaults() *Monitor {
	this := Monitor{}
	return &this
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *Monitor) GetCountryId() string {
	if o == nil || utils.IsNil(o.CountryId) {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetCountryIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *Monitor) HasCountryId() bool {
	if o != nil && !utils.IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *Monitor) SetCountryId(v string) {
	o.CountryId = &v
}

// GetMonitorId returns the MonitorId field value if set, zero value otherwise.
func (o *Monitor) GetMonitorId() string {
	if o == nil || utils.IsNil(o.MonitorId) {
		var ret string
		return ret
	}
	return *o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetMonitorIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MonitorId) {
		return nil, false
	}
	return o.MonitorId, true
}

// HasMonitorId returns a boolean if a field has been set.
func (o *Monitor) HasMonitorId() bool {
	if o != nil && !utils.IsNil(o.MonitorId) {
		return true
	}

	return false
}

// SetMonitorId gets a reference to the given string and assigns it to the MonitorId field.
func (o *Monitor) SetMonitorId(v string) {
	o.MonitorId = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *Monitor) GetIpAddress() string {
	if o == nil || utils.IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetIpAddressOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Monitor) HasIpAddress() bool {
	if o != nil && !utils.IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *Monitor) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Monitor) GetNetwork() string {
	if o == nil || utils.IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetNetworkOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Monitor) HasNetwork() bool {
	if o != nil && !utils.IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *Monitor) SetNetwork(v string) {
	o.Network = &v
}

// GetMonitorType returns the MonitorType field value if set, zero value otherwise.
func (o *Monitor) GetMonitorType() MonitorType {
	if o == nil || utils.IsNil(o.MonitorType) {
		var ret MonitorType
		return ret
	}
	return *o.MonitorType
}

// GetMonitorTypeOk returns a tuple with the MonitorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetMonitorTypeOk() (*MonitorType, bool) {
	if o == nil || utils.IsNil(o.MonitorType) {
		return nil, false
	}
	return o.MonitorType, true
}

// HasMonitorType returns a boolean if a field has been set.
func (o *Monitor) HasMonitorType() bool {
	if o != nil && !utils.IsNil(o.MonitorType) {
		return true
	}

	return false
}

// SetMonitorType gets a reference to the given MonitorType and assigns it to the MonitorType field.
func (o *Monitor) SetMonitorType(v MonitorType) {
	o.MonitorType = &v
}

// GetMonitorName returns the MonitorName field value if set, zero value otherwise.
func (o *Monitor) GetMonitorName() string {
	if o == nil || utils.IsNil(o.MonitorName) {
		var ret string
		return ret
	}
	return *o.MonitorName
}

// GetMonitorNameOk returns a tuple with the MonitorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Monitor) GetMonitorNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MonitorName) {
		return nil, false
	}
	return o.MonitorName, true
}

// HasMonitorName returns a boolean if a field has been set.
func (o *Monitor) HasMonitorName() bool {
	if o != nil && !utils.IsNil(o.MonitorName) {
		return true
	}

	return false
}

// SetMonitorName gets a reference to the given string and assigns it to the MonitorName field.
func (o *Monitor) SetMonitorName(v string) {
	o.MonitorName = &v
}

func (o Monitor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Monitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CountryId) {
		toSerialize["countryId"] = o.CountryId
	}
	if !utils.IsNil(o.MonitorId) {
		toSerialize["monitorId"] = o.MonitorId
	}
	if !utils.IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !utils.IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !utils.IsNil(o.MonitorType) {
		toSerialize["monitorType"] = o.MonitorType
	}
	if !utils.IsNil(o.MonitorName) {
		toSerialize["monitorName"] = o.MonitorName
	}
	return toSerialize, nil
}

type NullableMonitor struct {
	value *Monitor
	isSet bool
}

func (v NullableMonitor) Get() *Monitor {
	return v.value
}

func (v *NullableMonitor) Set(val *Monitor) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitor(val *Monitor) *NullableMonitor {
	return &NullableMonitor{value: val, isSet: true}
}

func (v NullableMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


