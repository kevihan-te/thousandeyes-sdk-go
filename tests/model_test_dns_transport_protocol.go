/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestDnsTransportProtocol Transport protocol used for DNS requests.
type TestDnsTransportProtocol string

// List of TestDnsTransportProtocol
const (
	TESTDNSTRANSPORTPROTOCOL_UDP TestDnsTransportProtocol = "udp"
	TESTDNSTRANSPORTPROTOCOL_TCP TestDnsTransportProtocol = "tcp"
)

// All allowed values of TestDnsTransportProtocol enum
var AllowedTestDnsTransportProtocolEnumValues = []TestDnsTransportProtocol{
	"udp",
	"tcp",
}

func (v *TestDnsTransportProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestDnsTransportProtocol(value)
	for _, existing := range AllowedTestDnsTransportProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestDnsTransportProtocol", value)
}

// NewTestDnsTransportProtocolFromValue returns a pointer to a valid TestDnsTransportProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestDnsTransportProtocolFromValue(v string) (*TestDnsTransportProtocol, error) {
	ev := TestDnsTransportProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestDnsTransportProtocol: valid values are %v", v, AllowedTestDnsTransportProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestDnsTransportProtocol) IsValid() bool {
	for _, existing := range AllowedTestDnsTransportProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestDnsTransportProtocol value
func (v TestDnsTransportProtocol) Ptr() *TestDnsTransportProtocol {
	return &v
}

type NullableTestDnsTransportProtocol struct {
	value *TestDnsTransportProtocol
	isSet bool
}

func (v NullableTestDnsTransportProtocol) Get() *TestDnsTransportProtocol {
	return v.value
}

func (v *NullableTestDnsTransportProtocol) Set(val *TestDnsTransportProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableTestDnsTransportProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableTestDnsTransportProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestDnsTransportProtocol(val *TestDnsTransportProtocol) *NullableTestDnsTransportProtocol {
	return &NullableTestDnsTransportProtocol{value: val, isSet: true}
}

func (v NullableTestDnsTransportProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestDnsTransportProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

