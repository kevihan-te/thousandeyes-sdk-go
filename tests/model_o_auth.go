/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the OAuth type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &OAuth{}

// OAuth Use this only if you want to use OAuth as the authentication mechanism.
type OAuth struct {
	// The ID of the OAuth configuration.
	ConfigId *string `json:"configId,omitempty"`
	// Target for the test.
	TestUrl *string `json:"testUrl,omitempty"`
	RequestMethod *RequestMethod `json:"requestMethod,omitempty"`
	// Enter the OAuth body for the HTTP POST request in this field when using OAuth as the authentication mechanism. No special escaping is required. If content is provided in the post body, the `requestMethod` is automatically set to POST.
	PostBody *string `json:"postBody,omitempty"`
	// Request headers used for OAuth.
	Headers *string `json:"headers,omitempty"`
	AuthType *TestAuthType `json:"authType,omitempty"`
	// OAuth username
	Username *string `json:"username,omitempty"`
	// OAuth password
	Password *string `json:"password,omitempty"`
}

// NewOAuth instantiates a new OAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth() *OAuth {
	this := OAuth{}
	var authType TestAuthType = TESTAUTHTYPE_NONE
	this.AuthType = &authType
	return &this
}

// NewOAuthWithDefaults instantiates a new OAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthWithDefaults() *OAuth {
	this := OAuth{}
	var authType TestAuthType = TESTAUTHTYPE_NONE
	this.AuthType = &authType
	return &this
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise.
func (o *OAuth) GetConfigId() string {
	if o == nil || utils.IsNil(o.ConfigId) {
		var ret string
		return ret
	}
	return *o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetConfigIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ConfigId) {
		return nil, false
	}
	return o.ConfigId, true
}

// HasConfigId returns a boolean if a field has been set.
func (o *OAuth) HasConfigId() bool {
	if o != nil && !utils.IsNil(o.ConfigId) {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given string and assigns it to the ConfigId field.
func (o *OAuth) SetConfigId(v string) {
	o.ConfigId = &v
}

// GetTestUrl returns the TestUrl field value if set, zero value otherwise.
func (o *OAuth) GetTestUrl() string {
	if o == nil || utils.IsNil(o.TestUrl) {
		var ret string
		return ret
	}
	return *o.TestUrl
}

// GetTestUrlOk returns a tuple with the TestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetTestUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestUrl) {
		return nil, false
	}
	return o.TestUrl, true
}

// HasTestUrl returns a boolean if a field has been set.
func (o *OAuth) HasTestUrl() bool {
	if o != nil && !utils.IsNil(o.TestUrl) {
		return true
	}

	return false
}

// SetTestUrl gets a reference to the given string and assigns it to the TestUrl field.
func (o *OAuth) SetTestUrl(v string) {
	o.TestUrl = &v
}

// GetRequestMethod returns the RequestMethod field value if set, zero value otherwise.
func (o *OAuth) GetRequestMethod() RequestMethod {
	if o == nil || utils.IsNil(o.RequestMethod) {
		var ret RequestMethod
		return ret
	}
	return *o.RequestMethod
}

// GetRequestMethodOk returns a tuple with the RequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetRequestMethodOk() (*RequestMethod, bool) {
	if o == nil || utils.IsNil(o.RequestMethod) {
		return nil, false
	}
	return o.RequestMethod, true
}

// HasRequestMethod returns a boolean if a field has been set.
func (o *OAuth) HasRequestMethod() bool {
	if o != nil && !utils.IsNil(o.RequestMethod) {
		return true
	}

	return false
}

// SetRequestMethod gets a reference to the given RequestMethod and assigns it to the RequestMethod field.
func (o *OAuth) SetRequestMethod(v RequestMethod) {
	o.RequestMethod = &v
}

// GetPostBody returns the PostBody field value if set, zero value otherwise.
func (o *OAuth) GetPostBody() string {
	if o == nil || utils.IsNil(o.PostBody) {
		var ret string
		return ret
	}
	return *o.PostBody
}

// GetPostBodyOk returns a tuple with the PostBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetPostBodyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PostBody) {
		return nil, false
	}
	return o.PostBody, true
}

// HasPostBody returns a boolean if a field has been set.
func (o *OAuth) HasPostBody() bool {
	if o != nil && !utils.IsNil(o.PostBody) {
		return true
	}

	return false
}

// SetPostBody gets a reference to the given string and assigns it to the PostBody field.
func (o *OAuth) SetPostBody(v string) {
	o.PostBody = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *OAuth) GetHeaders() string {
	if o == nil || utils.IsNil(o.Headers) {
		var ret string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetHeadersOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *OAuth) HasHeaders() bool {
	if o != nil && !utils.IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given string and assigns it to the Headers field.
func (o *OAuth) SetHeaders(v string) {
	o.Headers = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *OAuth) GetAuthType() TestAuthType {
	if o == nil || utils.IsNil(o.AuthType) {
		var ret TestAuthType
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetAuthTypeOk() (*TestAuthType, bool) {
	if o == nil || utils.IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *OAuth) HasAuthType() bool {
	if o != nil && !utils.IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given TestAuthType and assigns it to the AuthType field.
func (o *OAuth) SetAuthType(v TestAuthType) {
	o.AuthType = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *OAuth) GetUsername() string {
	if o == nil || utils.IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *OAuth) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *OAuth) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *OAuth) GetPassword() string {
	if o == nil || utils.IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *OAuth) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *OAuth) SetPassword(v string) {
	o.Password = &v
}

func (o OAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ConfigId) {
		toSerialize["configId"] = o.ConfigId
	}
	if !utils.IsNil(o.TestUrl) {
		toSerialize["testUrl"] = o.TestUrl
	}
	if !utils.IsNil(o.RequestMethod) {
		toSerialize["requestMethod"] = o.RequestMethod
	}
	if !utils.IsNil(o.PostBody) {
		toSerialize["postBody"] = o.PostBody
	}
	if !utils.IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !utils.IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableOAuth struct {
	value *OAuth
	isSet bool
}

func (v NullableOAuth) Get() *OAuth {
	return v.value
}

func (v *NullableOAuth) Set(val *OAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth(val *OAuth) *NullableOAuth {
	return &NullableOAuth{value: val, isSet: true}
}

func (v NullableOAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


