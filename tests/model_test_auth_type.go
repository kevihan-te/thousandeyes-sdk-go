/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestAuthType HTTP authentication type.
type TestAuthType string

// List of TestAuthType
const (
	TESTAUTHTYPE_NONE TestAuthType = "none"
	TESTAUTHTYPE_BASIC TestAuthType = "basic"
	TESTAUTHTYPE_NTLM TestAuthType = "ntlm"
	TESTAUTHTYPE_KERBEROS TestAuthType = "kerberos"
	TESTAUTHTYPE_OAUTH TestAuthType = "oauth"
)

// All allowed values of TestAuthType enum
var AllowedTestAuthTypeEnumValues = []TestAuthType{
	"none",
	"basic",
	"ntlm",
	"kerberos",
	"oauth",
}

func (v *TestAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestAuthType(value)
	for _, existing := range AllowedTestAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestAuthType", value)
}

// NewTestAuthTypeFromValue returns a pointer to a valid TestAuthType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestAuthTypeFromValue(v string) (*TestAuthType, error) {
	ev := TestAuthType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestAuthType: valid values are %v", v, AllowedTestAuthTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestAuthType) IsValid() bool {
	for _, existing := range AllowedTestAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestAuthType value
func (v TestAuthType) Ptr() *TestAuthType {
	return &v
}

type NullableTestAuthType struct {
	value *TestAuthType
	isSet bool
}

func (v NullableTestAuthType) Get() *TestAuthType {
	return v.value
}

func (v *NullableTestAuthType) Set(val *TestAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestAuthType(val *TestAuthType) *NullableTestAuthType {
	return &NullableTestAuthType{value: val, isSet: true}
}

func (v NullableTestAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

