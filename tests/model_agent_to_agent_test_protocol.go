/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// AgentToAgentTestProtocol the model 'AgentToAgentTestProtocol'
type AgentToAgentTestProtocol string

// List of AgentToAgentTestProtocol
const (
	AGENTTOAGENTTESTPROTOCOL_TCP AgentToAgentTestProtocol = "tcp"
	AGENTTOAGENTTESTPROTOCOL_UDP AgentToAgentTestProtocol = "udp"
)

// All allowed values of AgentToAgentTestProtocol enum
var AllowedAgentToAgentTestProtocolEnumValues = []AgentToAgentTestProtocol{
	"tcp",
	"udp",
}

func (v *AgentToAgentTestProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentToAgentTestProtocol(value)
	for _, existing := range AllowedAgentToAgentTestProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentToAgentTestProtocol", value)
}

// NewAgentToAgentTestProtocolFromValue returns a pointer to a valid AgentToAgentTestProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentToAgentTestProtocolFromValue(v string) (*AgentToAgentTestProtocol, error) {
	ev := AgentToAgentTestProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentToAgentTestProtocol: valid values are %v", v, AllowedAgentToAgentTestProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentToAgentTestProtocol) IsValid() bool {
	for _, existing := range AllowedAgentToAgentTestProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentToAgentTestProtocol value
func (v AgentToAgentTestProtocol) Ptr() *AgentToAgentTestProtocol {
	return &v
}

type NullableAgentToAgentTestProtocol struct {
	value *AgentToAgentTestProtocol
	isSet bool
}

func (v NullableAgentToAgentTestProtocol) Get() *AgentToAgentTestProtocol {
	return v.value
}

func (v *NullableAgentToAgentTestProtocol) Set(val *AgentToAgentTestProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentToAgentTestProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentToAgentTestProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentToAgentTestProtocol(val *AgentToAgentTestProtocol) *NullableAgentToAgentTestProtocol {
	return &NullableAgentToAgentTestProtocol{value: val, isSet: true}
}

func (v NullableAgentToAgentTestProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentToAgentTestProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

