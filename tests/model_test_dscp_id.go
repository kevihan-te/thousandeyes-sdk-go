/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// TestDscpId DSCP ID [to see list for acceptable values](https://docs.thousandeyes.com/product-documentation/tests/dscp-options-in-network-tests)
type TestDscpId string

// List of TestDscpId
const (
	TESTDSCPID__0 TestDscpId = "0"
	TESTDSCPID__8 TestDscpId = "8"
	TESTDSCPID__16 TestDscpId = "16"
	TESTDSCPID__24 TestDscpId = "24"
	TESTDSCPID__32 TestDscpId = "32"
	TESTDSCPID__40 TestDscpId = "40"
	TESTDSCPID__48 TestDscpId = "48"
	TESTDSCPID__56 TestDscpId = "56"
	TESTDSCPID__10 TestDscpId = "10"
	TESTDSCPID__12 TestDscpId = "12"
	TESTDSCPID__14 TestDscpId = "14"
	TESTDSCPID__18 TestDscpId = "18"
	TESTDSCPID__20 TestDscpId = "20"
	TESTDSCPID__22 TestDscpId = "22"
	TESTDSCPID__26 TestDscpId = "26"
	TESTDSCPID__28 TestDscpId = "28"
	TESTDSCPID__30 TestDscpId = "30"
	TESTDSCPID__34 TestDscpId = "34"
	TESTDSCPID__36 TestDscpId = "36"
	TESTDSCPID__38 TestDscpId = "38"
	TESTDSCPID__46 TestDscpId = "46"
	TESTDSCPID__44 TestDscpId = "44"
)

// All allowed values of TestDscpId enum
var AllowedTestDscpIdEnumValues = []TestDscpId{
	"0",
	"8",
	"16",
	"24",
	"32",
	"40",
	"48",
	"56",
	"10",
	"12",
	"14",
	"18",
	"20",
	"22",
	"26",
	"28",
	"30",
	"34",
	"36",
	"38",
	"46",
	"44",
}

func (v *TestDscpId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestDscpId(value)
	for _, existing := range AllowedTestDscpIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestDscpId", value)
}

// NewTestDscpIdFromValue returns a pointer to a valid TestDscpId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestDscpIdFromValue(v string) (*TestDscpId, error) {
	ev := TestDscpId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestDscpId: valid values are %v", v, AllowedTestDscpIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestDscpId) IsValid() bool {
	for _, existing := range AllowedTestDscpIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestDscpId value
func (v TestDscpId) Ptr() *TestDscpId {
	return &v
}

type NullableTestDscpId struct {
	value *TestDscpId
	isSet bool
}

func (v NullableTestDscpId) Get() *TestDscpId {
	return v.value
}

func (v *NullableTestDscpId) Set(val *TestDscpId) {
	v.value = val
	v.isSet = true
}

func (v NullableTestDscpId) IsSet() bool {
	return v.isSet
}

func (v *NullableTestDscpId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestDscpId(val *TestDscpId) *NullableTestDscpId {
	return &NullableTestDscpId{value: val, isSet: true}
}

func (v NullableTestDscpId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestDscpId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

