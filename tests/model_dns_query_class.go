/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
	"fmt"
)

// DnsQueryClass Domain class used by this test. 'in' stands for Internet, while 'ch' stands for Chaos.
type DnsQueryClass string

// List of DnsQueryClass
const (
	DNSQUERYCLASS_IN DnsQueryClass = "in"
	DNSQUERYCLASS_CH DnsQueryClass = "ch"
)

// All allowed values of DnsQueryClass enum
var AllowedDnsQueryClassEnumValues = []DnsQueryClass{
	"in",
	"ch",
}

func (v *DnsQueryClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DnsQueryClass(value)
	for _, existing := range AllowedDnsQueryClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DnsQueryClass", value)
}

// NewDnsQueryClassFromValue returns a pointer to a valid DnsQueryClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDnsQueryClassFromValue(v string) (*DnsQueryClass, error) {
	ev := DnsQueryClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DnsQueryClass: valid values are %v", v, AllowedDnsQueryClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DnsQueryClass) IsValid() bool {
	for _, existing := range AllowedDnsQueryClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DnsQueryClass value
func (v DnsQueryClass) Ptr() *DnsQueryClass {
	return &v
}

type NullableDnsQueryClass struct {
	value *DnsQueryClass
	isSet bool
}

func (v NullableDnsQueryClass) Get() *DnsQueryClass {
	return v.value
}

func (v *NullableDnsQueryClass) Set(val *DnsQueryClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsQueryClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsQueryClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsQueryClass(val *DnsQueryClass) *NullableDnsQueryClass {
	return &NullableDnsQueryClass{value: val, isSet: true}
}

func (v NullableDnsQueryClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsQueryClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

