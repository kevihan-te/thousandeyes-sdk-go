/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the BaseTest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BaseTest{}

// BaseTest struct for BaseTest
type BaseTest struct {
	Interval *TestInterval `json:"interval,omitempty"`
	// Indicates if alerts are enabled.
	AlertsEnabled *bool `json:"alertsEnabled,omitempty"`
	// Test is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Contains list of enabled alert rule objects.
	AlertRules []AlertRule `json:"alertRules,omitempty"`
}

// NewBaseTest instantiates a new BaseTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTest() *BaseTest {
	this := BaseTest{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewBaseTestWithDefaults instantiates a new BaseTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTestWithDefaults() *BaseTest {
	this := BaseTest{}
	var interval TestInterval = TESTINTERVAL__60
	this.Interval = &interval
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *BaseTest) GetInterval() TestInterval {
	if o == nil || utils.IsNil(o.Interval) {
		var ret TestInterval
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTest) GetIntervalOk() (*TestInterval, bool) {
	if o == nil || utils.IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *BaseTest) HasInterval() bool {
	if o != nil && !utils.IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given TestInterval and assigns it to the Interval field.
func (o *BaseTest) SetInterval(v TestInterval) {
	o.Interval = &v
}

// GetAlertsEnabled returns the AlertsEnabled field value if set, zero value otherwise.
func (o *BaseTest) GetAlertsEnabled() bool {
	if o == nil || utils.IsNil(o.AlertsEnabled) {
		var ret bool
		return ret
	}
	return *o.AlertsEnabled
}

// GetAlertsEnabledOk returns a tuple with the AlertsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTest) GetAlertsEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AlertsEnabled) {
		return nil, false
	}
	return o.AlertsEnabled, true
}

// HasAlertsEnabled returns a boolean if a field has been set.
func (o *BaseTest) HasAlertsEnabled() bool {
	if o != nil && !utils.IsNil(o.AlertsEnabled) {
		return true
	}

	return false
}

// SetAlertsEnabled gets a reference to the given bool and assigns it to the AlertsEnabled field.
func (o *BaseTest) SetAlertsEnabled(v bool) {
	o.AlertsEnabled = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *BaseTest) GetEnabled() bool {
	if o == nil || utils.IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTest) GetEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BaseTest) HasEnabled() bool {
	if o != nil && !utils.IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *BaseTest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAlertRules returns the AlertRules field value if set, zero value otherwise.
func (o *BaseTest) GetAlertRules() []AlertRule {
	if o == nil || utils.IsNil(o.AlertRules) {
		var ret []AlertRule
		return ret
	}
	return o.AlertRules
}

// GetAlertRulesOk returns a tuple with the AlertRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTest) GetAlertRulesOk() ([]AlertRule, bool) {
	if o == nil || utils.IsNil(o.AlertRules) {
		return nil, false
	}
	return o.AlertRules, true
}

// HasAlertRules returns a boolean if a field has been set.
func (o *BaseTest) HasAlertRules() bool {
	if o != nil && !utils.IsNil(o.AlertRules) {
		return true
	}

	return false
}

// SetAlertRules gets a reference to the given []AlertRule and assigns it to the AlertRules field.
func (o *BaseTest) SetAlertRules(v []AlertRule) {
	o.AlertRules = v
}

func (o BaseTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !utils.IsNil(o.AlertsEnabled) {
		toSerialize["alertsEnabled"] = o.AlertsEnabled
	}
	if !utils.IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !utils.IsNil(o.AlertRules) {
		toSerialize["alertRules"] = o.AlertRules
	}
	return toSerialize, nil
}

type NullableBaseTest struct {
	value *BaseTest
	isSet bool
}

func (v NullableBaseTest) Get() *BaseTest {
	return v.value
}

func (v *NullableBaseTest) Set(val *BaseTest) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTest) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTest(val *BaseTest) *NullableBaseTest {
	return &NullableBaseTest{value: val, isSet: true}
}

func (v NullableBaseTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


