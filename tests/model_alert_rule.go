/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AlertRule type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AlertRule{}

// AlertRule struct for AlertRule
type AlertRule struct {
	// Unique ID of the rule.
	RuleId *string `json:"ruleId,omitempty"`
	// Name of the alert rule
	RuleName *string `json:"ruleName,omitempty"`
	// String expression of alert rule
	Expression *string `json:"expression,omitempty"`
	Direction *AlertDirection `json:"direction,omitempty"`
	// Alert rules allow up to 1 alert rule to be selected as a default for each type. By checking the default option, this alert rule will be automatically included on subsequently created tests that test a metric used in alerting here
	IsDefault *bool `json:"isDefault,omitempty"`
	AlertType *AlertType `json:"alertType,omitempty"`
	// The minimum number of agents or monitors that must meet the specified criteria in order to trigger the alert
	MinimumSources *int32 `json:"minimumSources,omitempty"`
	// the minimum percentage of all assigned agents or monitors that must meet the specified criteria in order to trigger the alert
	MinimumSourcesPct *int32 `json:"minimumSourcesPct,omitempty"`
	RoundsViolatingMode *AlertRoundsViolationMode `json:"roundsViolatingMode,omitempty"`
	// Specifies the divisor (y value) for the “X of Y times” condition.
	RoundsViolatingOutOf *int32 `json:"roundsViolatingOutOf,omitempty"`
	// Specifies the numerator (x value) for the “X of Y times” condition
	RoundsViolatingRequired *int32 `json:"roundsViolatingRequired,omitempty"`
	SensitivityLevel *SensitivityLevel `json:"sensitivityLevel,omitempty"`
	Severity *Severity `json:"severity,omitempty"`
}

// NewAlertRule instantiates a new AlertRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRule() *AlertRule {
	this := AlertRule{}
	return &this
}

// NewAlertRuleWithDefaults instantiates a new AlertRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRuleWithDefaults() *AlertRule {
	this := AlertRule{}
	return &this
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *AlertRule) GetRuleId() string {
	if o == nil || utils.IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetRuleIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *AlertRule) HasRuleId() bool {
	if o != nil && !utils.IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *AlertRule) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleName returns the RuleName field value if set, zero value otherwise.
func (o *AlertRule) GetRuleName() string {
	if o == nil || utils.IsNil(o.RuleName) {
		var ret string
		return ret
	}
	return *o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetRuleNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RuleName) {
		return nil, false
	}
	return o.RuleName, true
}

// HasRuleName returns a boolean if a field has been set.
func (o *AlertRule) HasRuleName() bool {
	if o != nil && !utils.IsNil(o.RuleName) {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given string and assigns it to the RuleName field.
func (o *AlertRule) SetRuleName(v string) {
	o.RuleName = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *AlertRule) GetExpression() string {
	if o == nil || utils.IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetExpressionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *AlertRule) HasExpression() bool {
	if o != nil && !utils.IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *AlertRule) SetExpression(v string) {
	o.Expression = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *AlertRule) GetDirection() AlertDirection {
	if o == nil || utils.IsNil(o.Direction) {
		var ret AlertDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetDirectionOk() (*AlertDirection, bool) {
	if o == nil || utils.IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *AlertRule) HasDirection() bool {
	if o != nil && !utils.IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given AlertDirection and assigns it to the Direction field.
func (o *AlertRule) SetDirection(v AlertDirection) {
	o.Direction = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *AlertRule) GetIsDefault() bool {
	if o == nil || utils.IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetIsDefaultOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *AlertRule) HasIsDefault() bool {
	if o != nil && !utils.IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *AlertRule) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *AlertRule) GetAlertType() AlertType {
	if o == nil || utils.IsNil(o.AlertType) {
		var ret AlertType
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetAlertTypeOk() (*AlertType, bool) {
	if o == nil || utils.IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *AlertRule) HasAlertType() bool {
	if o != nil && !utils.IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given AlertType and assigns it to the AlertType field.
func (o *AlertRule) SetAlertType(v AlertType) {
	o.AlertType = &v
}

// GetMinimumSources returns the MinimumSources field value if set, zero value otherwise.
func (o *AlertRule) GetMinimumSources() int32 {
	if o == nil || utils.IsNil(o.MinimumSources) {
		var ret int32
		return ret
	}
	return *o.MinimumSources
}

// GetMinimumSourcesOk returns a tuple with the MinimumSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetMinimumSourcesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.MinimumSources) {
		return nil, false
	}
	return o.MinimumSources, true
}

// HasMinimumSources returns a boolean if a field has been set.
func (o *AlertRule) HasMinimumSources() bool {
	if o != nil && !utils.IsNil(o.MinimumSources) {
		return true
	}

	return false
}

// SetMinimumSources gets a reference to the given int32 and assigns it to the MinimumSources field.
func (o *AlertRule) SetMinimumSources(v int32) {
	o.MinimumSources = &v
}

// GetMinimumSourcesPct returns the MinimumSourcesPct field value if set, zero value otherwise.
func (o *AlertRule) GetMinimumSourcesPct() int32 {
	if o == nil || utils.IsNil(o.MinimumSourcesPct) {
		var ret int32
		return ret
	}
	return *o.MinimumSourcesPct
}

// GetMinimumSourcesPctOk returns a tuple with the MinimumSourcesPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetMinimumSourcesPctOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.MinimumSourcesPct) {
		return nil, false
	}
	return o.MinimumSourcesPct, true
}

// HasMinimumSourcesPct returns a boolean if a field has been set.
func (o *AlertRule) HasMinimumSourcesPct() bool {
	if o != nil && !utils.IsNil(o.MinimumSourcesPct) {
		return true
	}

	return false
}

// SetMinimumSourcesPct gets a reference to the given int32 and assigns it to the MinimumSourcesPct field.
func (o *AlertRule) SetMinimumSourcesPct(v int32) {
	o.MinimumSourcesPct = &v
}

// GetRoundsViolatingMode returns the RoundsViolatingMode field value if set, zero value otherwise.
func (o *AlertRule) GetRoundsViolatingMode() AlertRoundsViolationMode {
	if o == nil || utils.IsNil(o.RoundsViolatingMode) {
		var ret AlertRoundsViolationMode
		return ret
	}
	return *o.RoundsViolatingMode
}

// GetRoundsViolatingModeOk returns a tuple with the RoundsViolatingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetRoundsViolatingModeOk() (*AlertRoundsViolationMode, bool) {
	if o == nil || utils.IsNil(o.RoundsViolatingMode) {
		return nil, false
	}
	return o.RoundsViolatingMode, true
}

// HasRoundsViolatingMode returns a boolean if a field has been set.
func (o *AlertRule) HasRoundsViolatingMode() bool {
	if o != nil && !utils.IsNil(o.RoundsViolatingMode) {
		return true
	}

	return false
}

// SetRoundsViolatingMode gets a reference to the given AlertRoundsViolationMode and assigns it to the RoundsViolatingMode field.
func (o *AlertRule) SetRoundsViolatingMode(v AlertRoundsViolationMode) {
	o.RoundsViolatingMode = &v
}

// GetRoundsViolatingOutOf returns the RoundsViolatingOutOf field value if set, zero value otherwise.
func (o *AlertRule) GetRoundsViolatingOutOf() int32 {
	if o == nil || utils.IsNil(o.RoundsViolatingOutOf) {
		var ret int32
		return ret
	}
	return *o.RoundsViolatingOutOf
}

// GetRoundsViolatingOutOfOk returns a tuple with the RoundsViolatingOutOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetRoundsViolatingOutOfOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundsViolatingOutOf) {
		return nil, false
	}
	return o.RoundsViolatingOutOf, true
}

// HasRoundsViolatingOutOf returns a boolean if a field has been set.
func (o *AlertRule) HasRoundsViolatingOutOf() bool {
	if o != nil && !utils.IsNil(o.RoundsViolatingOutOf) {
		return true
	}

	return false
}

// SetRoundsViolatingOutOf gets a reference to the given int32 and assigns it to the RoundsViolatingOutOf field.
func (o *AlertRule) SetRoundsViolatingOutOf(v int32) {
	o.RoundsViolatingOutOf = &v
}

// GetRoundsViolatingRequired returns the RoundsViolatingRequired field value if set, zero value otherwise.
func (o *AlertRule) GetRoundsViolatingRequired() int32 {
	if o == nil || utils.IsNil(o.RoundsViolatingRequired) {
		var ret int32
		return ret
	}
	return *o.RoundsViolatingRequired
}

// GetRoundsViolatingRequiredOk returns a tuple with the RoundsViolatingRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetRoundsViolatingRequiredOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundsViolatingRequired) {
		return nil, false
	}
	return o.RoundsViolatingRequired, true
}

// HasRoundsViolatingRequired returns a boolean if a field has been set.
func (o *AlertRule) HasRoundsViolatingRequired() bool {
	if o != nil && !utils.IsNil(o.RoundsViolatingRequired) {
		return true
	}

	return false
}

// SetRoundsViolatingRequired gets a reference to the given int32 and assigns it to the RoundsViolatingRequired field.
func (o *AlertRule) SetRoundsViolatingRequired(v int32) {
	o.RoundsViolatingRequired = &v
}

// GetSensitivityLevel returns the SensitivityLevel field value if set, zero value otherwise.
func (o *AlertRule) GetSensitivityLevel() SensitivityLevel {
	if o == nil || utils.IsNil(o.SensitivityLevel) {
		var ret SensitivityLevel
		return ret
	}
	return *o.SensitivityLevel
}

// GetSensitivityLevelOk returns a tuple with the SensitivityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetSensitivityLevelOk() (*SensitivityLevel, bool) {
	if o == nil || utils.IsNil(o.SensitivityLevel) {
		return nil, false
	}
	return o.SensitivityLevel, true
}

// HasSensitivityLevel returns a boolean if a field has been set.
func (o *AlertRule) HasSensitivityLevel() bool {
	if o != nil && !utils.IsNil(o.SensitivityLevel) {
		return true
	}

	return false
}

// SetSensitivityLevel gets a reference to the given SensitivityLevel and assigns it to the SensitivityLevel field.
func (o *AlertRule) SetSensitivityLevel(v SensitivityLevel) {
	o.SensitivityLevel = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AlertRule) GetSeverity() Severity {
	if o == nil || utils.IsNil(o.Severity) {
		var ret Severity
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRule) GetSeverityOk() (*Severity, bool) {
	if o == nil || utils.IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AlertRule) HasSeverity() bool {
	if o != nil && !utils.IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given Severity and assigns it to the Severity field.
func (o *AlertRule) SetSeverity(v Severity) {
	o.Severity = &v
}

func (o AlertRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	if !utils.IsNil(o.RuleName) {
		toSerialize["ruleName"] = o.RuleName
	}
	if !utils.IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !utils.IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !utils.IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !utils.IsNil(o.AlertType) {
		toSerialize["alertType"] = o.AlertType
	}
	if !utils.IsNil(o.MinimumSources) {
		toSerialize["minimumSources"] = o.MinimumSources
	}
	if !utils.IsNil(o.MinimumSourcesPct) {
		toSerialize["minimumSourcesPct"] = o.MinimumSourcesPct
	}
	if !utils.IsNil(o.RoundsViolatingMode) {
		toSerialize["roundsViolatingMode"] = o.RoundsViolatingMode
	}
	if !utils.IsNil(o.RoundsViolatingOutOf) {
		toSerialize["roundsViolatingOutOf"] = o.RoundsViolatingOutOf
	}
	if !utils.IsNil(o.RoundsViolatingRequired) {
		toSerialize["roundsViolatingRequired"] = o.RoundsViolatingRequired
	}
	if !utils.IsNil(o.SensitivityLevel) {
		toSerialize["sensitivityLevel"] = o.SensitivityLevel
	}
	if !utils.IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	return toSerialize, nil
}

type NullableAlertRule struct {
	value *AlertRule
	isSet bool
}

func (v NullableAlertRule) Get() *AlertRule {
	return v.value
}

func (v *NullableAlertRule) Set(val *AlertRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRule(val *AlertRule) *NullableAlertRule {
	return &NullableAlertRule{value: val, isSet: true}
}

func (v NullableAlertRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


