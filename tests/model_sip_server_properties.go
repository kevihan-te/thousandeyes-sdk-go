/*
Tests API

This API supports listing, creating, editing, and deleting Cloud and Enterprise Agent (CEA) based tests. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the SipServerProperties type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SipServerProperties{}

// SipServerProperties struct for SipServerProperties
type SipServerProperties struct {
	// Set `true` to measure MTU sizes on network from agents to the target.
	MtuMeasurements *bool `json:"mtuMeasurements,omitempty"`
	// Enable or disable network measurements. Set to true to enable or false to disable network measurements.
	NetworkMeasurements *bool `json:"networkMeasurements,omitempty"`
	// Number of path traces executed by the agent.
	NumPathTraces *int32 `json:"numPathTraces,omitempty"`
	// Options regex, this field does not require escaping.
	OptionsRegex *string `json:"optionsRegex,omitempty"`
	PathTraceMode *TestPathTraceMode `json:"pathTraceMode,omitempty"`
	ProbeMode *TestProbeMode `json:"probeMode,omitempty"`
	// Indicates whether agents should randomize the start time in each test round.
	RandomizedStartTime *bool `json:"randomizedStartTime,omitempty"`
	// Set to true to perform SIP registration on the test target with the SIP REGISTER command.
	RegisterEnabled *bool `json:"registerEnabled,omitempty"`
	// Target time for test completion in milliseconds.
	SipTargetTime *int32 `json:"sipTargetTime,omitempty"`
	// Time limit in milliseconds.
	SipTimeLimit *int32 `json:"sipTimeLimit,omitempty"`
	// Sets packets rate sent to measure the network in packets per second.
	FixedPacketRate *int32 `json:"fixedPacketRate,omitempty"`
	Ipv6Policy *TestIpv6Policy `json:"ipv6Policy,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewSipServerProperties instantiates a new SipServerProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSipServerProperties() *SipServerProperties {
	this := SipServerProperties{}
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	var registerEnabled bool = false
	this.RegisterEnabled = &registerEnabled
	var sipTimeLimit int32 = 5
	this.SipTimeLimit = &sipTimeLimit
	var ipv6Policy TestIpv6Policy = TESTIPV6POLICY_USE_AGENT_POLICY
	this.Ipv6Policy = &ipv6Policy
	return &this
}

// NewSipServerPropertiesWithDefaults instantiates a new SipServerProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSipServerPropertiesWithDefaults() *SipServerProperties {
	this := SipServerProperties{}
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	var registerEnabled bool = false
	this.RegisterEnabled = &registerEnabled
	var sipTimeLimit int32 = 5
	this.SipTimeLimit = &sipTimeLimit
	var ipv6Policy TestIpv6Policy = TESTIPV6POLICY_USE_AGENT_POLICY
	this.Ipv6Policy = &ipv6Policy
	return &this
}

// GetMtuMeasurements returns the MtuMeasurements field value if set, zero value otherwise.
func (o *SipServerProperties) GetMtuMeasurements() bool {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		var ret bool
		return ret
	}
	return *o.MtuMeasurements
}

// GetMtuMeasurementsOk returns a tuple with the MtuMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetMtuMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		return nil, false
	}
	return o.MtuMeasurements, true
}

// HasMtuMeasurements returns a boolean if a field has been set.
func (o *SipServerProperties) HasMtuMeasurements() bool {
	if o != nil && !utils.IsNil(o.MtuMeasurements) {
		return true
	}

	return false
}

// SetMtuMeasurements gets a reference to the given bool and assigns it to the MtuMeasurements field.
func (o *SipServerProperties) SetMtuMeasurements(v bool) {
	o.MtuMeasurements = &v
}

// GetNetworkMeasurements returns the NetworkMeasurements field value if set, zero value otherwise.
func (o *SipServerProperties) GetNetworkMeasurements() bool {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		var ret bool
		return ret
	}
	return *o.NetworkMeasurements
}

// GetNetworkMeasurementsOk returns a tuple with the NetworkMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetNetworkMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		return nil, false
	}
	return o.NetworkMeasurements, true
}

// HasNetworkMeasurements returns a boolean if a field has been set.
func (o *SipServerProperties) HasNetworkMeasurements() bool {
	if o != nil && !utils.IsNil(o.NetworkMeasurements) {
		return true
	}

	return false
}

// SetNetworkMeasurements gets a reference to the given bool and assigns it to the NetworkMeasurements field.
func (o *SipServerProperties) SetNetworkMeasurements(v bool) {
	o.NetworkMeasurements = &v
}

// GetNumPathTraces returns the NumPathTraces field value if set, zero value otherwise.
func (o *SipServerProperties) GetNumPathTraces() int32 {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		var ret int32
		return ret
	}
	return *o.NumPathTraces
}

// GetNumPathTracesOk returns a tuple with the NumPathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetNumPathTracesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		return nil, false
	}
	return o.NumPathTraces, true
}

// HasNumPathTraces returns a boolean if a field has been set.
func (o *SipServerProperties) HasNumPathTraces() bool {
	if o != nil && !utils.IsNil(o.NumPathTraces) {
		return true
	}

	return false
}

// SetNumPathTraces gets a reference to the given int32 and assigns it to the NumPathTraces field.
func (o *SipServerProperties) SetNumPathTraces(v int32) {
	o.NumPathTraces = &v
}

// GetOptionsRegex returns the OptionsRegex field value if set, zero value otherwise.
func (o *SipServerProperties) GetOptionsRegex() string {
	if o == nil || utils.IsNil(o.OptionsRegex) {
		var ret string
		return ret
	}
	return *o.OptionsRegex
}

// GetOptionsRegexOk returns a tuple with the OptionsRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetOptionsRegexOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OptionsRegex) {
		return nil, false
	}
	return o.OptionsRegex, true
}

// HasOptionsRegex returns a boolean if a field has been set.
func (o *SipServerProperties) HasOptionsRegex() bool {
	if o != nil && !utils.IsNil(o.OptionsRegex) {
		return true
	}

	return false
}

// SetOptionsRegex gets a reference to the given string and assigns it to the OptionsRegex field.
func (o *SipServerProperties) SetOptionsRegex(v string) {
	o.OptionsRegex = &v
}

// GetPathTraceMode returns the PathTraceMode field value if set, zero value otherwise.
func (o *SipServerProperties) GetPathTraceMode() TestPathTraceMode {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		var ret TestPathTraceMode
		return ret
	}
	return *o.PathTraceMode
}

// GetPathTraceModeOk returns a tuple with the PathTraceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetPathTraceModeOk() (*TestPathTraceMode, bool) {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		return nil, false
	}
	return o.PathTraceMode, true
}

// HasPathTraceMode returns a boolean if a field has been set.
func (o *SipServerProperties) HasPathTraceMode() bool {
	if o != nil && !utils.IsNil(o.PathTraceMode) {
		return true
	}

	return false
}

// SetPathTraceMode gets a reference to the given TestPathTraceMode and assigns it to the PathTraceMode field.
func (o *SipServerProperties) SetPathTraceMode(v TestPathTraceMode) {
	o.PathTraceMode = &v
}

// GetProbeMode returns the ProbeMode field value if set, zero value otherwise.
func (o *SipServerProperties) GetProbeMode() TestProbeMode {
	if o == nil || utils.IsNil(o.ProbeMode) {
		var ret TestProbeMode
		return ret
	}
	return *o.ProbeMode
}

// GetProbeModeOk returns a tuple with the ProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetProbeModeOk() (*TestProbeMode, bool) {
	if o == nil || utils.IsNil(o.ProbeMode) {
		return nil, false
	}
	return o.ProbeMode, true
}

// HasProbeMode returns a boolean if a field has been set.
func (o *SipServerProperties) HasProbeMode() bool {
	if o != nil && !utils.IsNil(o.ProbeMode) {
		return true
	}

	return false
}

// SetProbeMode gets a reference to the given TestProbeMode and assigns it to the ProbeMode field.
func (o *SipServerProperties) SetProbeMode(v TestProbeMode) {
	o.ProbeMode = &v
}

// GetRandomizedStartTime returns the RandomizedStartTime field value if set, zero value otherwise.
func (o *SipServerProperties) GetRandomizedStartTime() bool {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		var ret bool
		return ret
	}
	return *o.RandomizedStartTime
}

// GetRandomizedStartTimeOk returns a tuple with the RandomizedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetRandomizedStartTimeOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		return nil, false
	}
	return o.RandomizedStartTime, true
}

// HasRandomizedStartTime returns a boolean if a field has been set.
func (o *SipServerProperties) HasRandomizedStartTime() bool {
	if o != nil && !utils.IsNil(o.RandomizedStartTime) {
		return true
	}

	return false
}

// SetRandomizedStartTime gets a reference to the given bool and assigns it to the RandomizedStartTime field.
func (o *SipServerProperties) SetRandomizedStartTime(v bool) {
	o.RandomizedStartTime = &v
}

// GetRegisterEnabled returns the RegisterEnabled field value if set, zero value otherwise.
func (o *SipServerProperties) GetRegisterEnabled() bool {
	if o == nil || utils.IsNil(o.RegisterEnabled) {
		var ret bool
		return ret
	}
	return *o.RegisterEnabled
}

// GetRegisterEnabledOk returns a tuple with the RegisterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetRegisterEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RegisterEnabled) {
		return nil, false
	}
	return o.RegisterEnabled, true
}

// HasRegisterEnabled returns a boolean if a field has been set.
func (o *SipServerProperties) HasRegisterEnabled() bool {
	if o != nil && !utils.IsNil(o.RegisterEnabled) {
		return true
	}

	return false
}

// SetRegisterEnabled gets a reference to the given bool and assigns it to the RegisterEnabled field.
func (o *SipServerProperties) SetRegisterEnabled(v bool) {
	o.RegisterEnabled = &v
}

// GetSipTargetTime returns the SipTargetTime field value if set, zero value otherwise.
func (o *SipServerProperties) GetSipTargetTime() int32 {
	if o == nil || utils.IsNil(o.SipTargetTime) {
		var ret int32
		return ret
	}
	return *o.SipTargetTime
}

// GetSipTargetTimeOk returns a tuple with the SipTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetSipTargetTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.SipTargetTime) {
		return nil, false
	}
	return o.SipTargetTime, true
}

// HasSipTargetTime returns a boolean if a field has been set.
func (o *SipServerProperties) HasSipTargetTime() bool {
	if o != nil && !utils.IsNil(o.SipTargetTime) {
		return true
	}

	return false
}

// SetSipTargetTime gets a reference to the given int32 and assigns it to the SipTargetTime field.
func (o *SipServerProperties) SetSipTargetTime(v int32) {
	o.SipTargetTime = &v
}

// GetSipTimeLimit returns the SipTimeLimit field value if set, zero value otherwise.
func (o *SipServerProperties) GetSipTimeLimit() int32 {
	if o == nil || utils.IsNil(o.SipTimeLimit) {
		var ret int32
		return ret
	}
	return *o.SipTimeLimit
}

// GetSipTimeLimitOk returns a tuple with the SipTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetSipTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.SipTimeLimit) {
		return nil, false
	}
	return o.SipTimeLimit, true
}

// HasSipTimeLimit returns a boolean if a field has been set.
func (o *SipServerProperties) HasSipTimeLimit() bool {
	if o != nil && !utils.IsNil(o.SipTimeLimit) {
		return true
	}

	return false
}

// SetSipTimeLimit gets a reference to the given int32 and assigns it to the SipTimeLimit field.
func (o *SipServerProperties) SetSipTimeLimit(v int32) {
	o.SipTimeLimit = &v
}

// GetFixedPacketRate returns the FixedPacketRate field value if set, zero value otherwise.
func (o *SipServerProperties) GetFixedPacketRate() int32 {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		var ret int32
		return ret
	}
	return *o.FixedPacketRate
}

// GetFixedPacketRateOk returns a tuple with the FixedPacketRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetFixedPacketRateOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		return nil, false
	}
	return o.FixedPacketRate, true
}

// HasFixedPacketRate returns a boolean if a field has been set.
func (o *SipServerProperties) HasFixedPacketRate() bool {
	if o != nil && !utils.IsNil(o.FixedPacketRate) {
		return true
	}

	return false
}

// SetFixedPacketRate gets a reference to the given int32 and assigns it to the FixedPacketRate field.
func (o *SipServerProperties) SetFixedPacketRate(v int32) {
	o.FixedPacketRate = &v
}

// GetIpv6Policy returns the Ipv6Policy field value if set, zero value otherwise.
func (o *SipServerProperties) GetIpv6Policy() TestIpv6Policy {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		var ret TestIpv6Policy
		return ret
	}
	return *o.Ipv6Policy
}

// GetIpv6PolicyOk returns a tuple with the Ipv6Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetIpv6PolicyOk() (*TestIpv6Policy, bool) {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		return nil, false
	}
	return o.Ipv6Policy, true
}

// HasIpv6Policy returns a boolean if a field has been set.
func (o *SipServerProperties) HasIpv6Policy() bool {
	if o != nil && !utils.IsNil(o.Ipv6Policy) {
		return true
	}

	return false
}

// SetIpv6Policy gets a reference to the given TestIpv6Policy and assigns it to the Ipv6Policy field.
func (o *SipServerProperties) SetIpv6Policy(v TestIpv6Policy) {
	o.Ipv6Policy = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SipServerProperties) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerProperties) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SipServerProperties) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SipServerProperties) SetType(v string) {
	o.Type = &v
}

func (o SipServerProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SipServerProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MtuMeasurements) {
		toSerialize["mtuMeasurements"] = o.MtuMeasurements
	}
	if !utils.IsNil(o.NetworkMeasurements) {
		toSerialize["networkMeasurements"] = o.NetworkMeasurements
	}
	if !utils.IsNil(o.NumPathTraces) {
		toSerialize["numPathTraces"] = o.NumPathTraces
	}
	if !utils.IsNil(o.OptionsRegex) {
		toSerialize["optionsRegex"] = o.OptionsRegex
	}
	if !utils.IsNil(o.PathTraceMode) {
		toSerialize["pathTraceMode"] = o.PathTraceMode
	}
	if !utils.IsNil(o.ProbeMode) {
		toSerialize["probeMode"] = o.ProbeMode
	}
	if !utils.IsNil(o.RandomizedStartTime) {
		toSerialize["randomizedStartTime"] = o.RandomizedStartTime
	}
	if !utils.IsNil(o.RegisterEnabled) {
		toSerialize["registerEnabled"] = o.RegisterEnabled
	}
	if !utils.IsNil(o.SipTargetTime) {
		toSerialize["sipTargetTime"] = o.SipTargetTime
	}
	if !utils.IsNil(o.SipTimeLimit) {
		toSerialize["sipTimeLimit"] = o.SipTimeLimit
	}
	if !utils.IsNil(o.FixedPacketRate) {
		toSerialize["fixedPacketRate"] = o.FixedPacketRate
	}
	if !utils.IsNil(o.Ipv6Policy) {
		toSerialize["ipv6Policy"] = o.Ipv6Policy
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSipServerProperties struct {
	value *SipServerProperties
	isSet bool
}

func (v NullableSipServerProperties) Get() *SipServerProperties {
	return v.value
}

func (v *NullableSipServerProperties) Set(val *SipServerProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableSipServerProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableSipServerProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipServerProperties(val *SipServerProperties) *NullableSipServerProperties {
	return &NullableSipServerProperties{value: val, isSet: true}
}

func (v NullableSipServerProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipServerProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


