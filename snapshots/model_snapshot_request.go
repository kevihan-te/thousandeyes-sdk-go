/*
Test Snapshots API

Creates a new test snapshot in ThousandEyes.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package snapshots

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
	"fmt"
)

// checks if the SnapshotRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SnapshotRequest{}

// SnapshotRequest struct for SnapshotRequest
type SnapshotRequest struct {
	// Snapshot title.
	DisplayName string `json:"displayName"`
	// The start date for the snapshot in UTC time, formatted in ISO date-time.
	StartDate time.Time `json:"startDate"`
	// The end date for the snapshot in UTC time, formatted in ISO date-time.
	EndDate time.Time `json:"endDate"`
	// Set to `true` for saved events and `false` for share links. Its default value is `false`.
	IsPublic *bool `json:"isPublic,omitempty"`
}

type _SnapshotRequest SnapshotRequest

// NewSnapshotRequest instantiates a new SnapshotRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotRequest(displayName string, startDate time.Time, endDate time.Time) *SnapshotRequest {
	this := SnapshotRequest{}
	this.DisplayName = displayName
	this.StartDate = startDate
	this.EndDate = endDate
	return &this
}

// NewSnapshotRequestWithDefaults instantiates a new SnapshotRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotRequestWithDefaults() *SnapshotRequest {
	this := SnapshotRequest{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *SnapshotRequest) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *SnapshotRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *SnapshotRequest) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetStartDate returns the StartDate field value
func (o *SnapshotRequest) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *SnapshotRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *SnapshotRequest) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *SnapshotRequest) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *SnapshotRequest) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *SnapshotRequest) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *SnapshotRequest) GetIsPublic() bool {
	if o == nil || utils.IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotRequest) GetIsPublicOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *SnapshotRequest) HasIsPublic() bool {
	if o != nil && !utils.IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *SnapshotRequest) SetIsPublic(v bool) {
	o.IsPublic = &v
}

func (o SnapshotRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate
	if !utils.IsNil(o.IsPublic) {
		toSerialize["isPublic"] = o.IsPublic
	}
	return toSerialize, nil
}

func (o *SnapshotRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"startDate",
		"endDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotRequest := _SnapshotRequest{}

    err = json.Unmarshal(data, &varSnapshotRequest)

	if err != nil {
		return err
	}

	*o = SnapshotRequest(varSnapshotRequest)

	return err
}

type NullableSnapshotRequest struct {
	value *SnapshotRequest
	isSet bool
}

func (v NullableSnapshotRequest) Get() *SnapshotRequest {
	return v.value
}

func (v *NullableSnapshotRequest) Set(val *SnapshotRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotRequest(val *SnapshotRequest) *NullableSnapshotRequest {
	return &NullableSnapshotRequest{value: val, isSet: true}
}

func (v NullableSnapshotRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


