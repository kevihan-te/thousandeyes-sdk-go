/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NetworkDynamicEndpointTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NetworkDynamicEndpointTestResult{}

// NetworkDynamicEndpointTestResult struct for NetworkDynamicEndpointTestResult
type NetworkDynamicEndpointTestResult struct {
	// A unique identifier associated with your account group. You can retrieve your `AccountGroupId` from the `/account-groups` endpoint.
	Aid *string `json:"aid,omitempty"`
	// Unique ID of endpoint test.
	TestId *string `json:"testId,omitempty"`
	// Unique ID of endpoint agent, from `/endpoint/agents` endpoint.
	AgentId *string `json:"agentId,omitempty"`
	// Epoch time (seconds) indicating the start time of the round.
	RoundId *int32 `json:"roundId,omitempty"`
	// IP address of target server.
	ServerIp *string `json:"serverIp,omitempty"`
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`
	SystemMetrics *SystemMetrics `json:"systemMetrics,omitempty"`
	OriginalTargetProfile *TargetProfile `json:"originalTargetProfile,omitempty"`
	VpnProfile *VpnProfile `json:"vpnProfile,omitempty"`
	// Average RTT for packets sent to destination.
	AvgLatency *float64 `json:"avgLatency,omitempty"`
	// Error details, if an error was encountered.
	ErrorDetails *string `json:"errorDetails,omitempty"`
	// Standard deviation of latency.
	Jitter *float64 `json:"jitter,omitempty"`
	// Set to `true` if network target is blocking ICMP echo (ping) queries.
	IsIcmpBlocked *bool `json:"isIcmpBlocked,omitempty"`
	// Percentage of packets not reaching destination.
	Loss *float64 `json:"loss,omitempty"`
	// Maximum RTT for packets sent to destination.
	MaxLatency *float64 `json:"maxLatency,omitempty"`
	// Minimum RTT for packets sent to destination.
	MinLatency *float64 `json:"minLatency,omitempty"`
	// Which supported application to monitor, can be one of `webex`, `zoom`, `microsoft-teams`.
	Application *string `json:"application,omitempty"`
	Protocol *EndpointTestResultProtocol `json:"protocol,omitempty"`
	TcpProbeMode *TestProbeModeResponse `json:"tcpProbeMode,omitempty"`
	UdpProbeMode *UdpProbeModeResponse `json:"udpProbeMode,omitempty"`
	Webex *DynamicEndpointTestWebex `json:"webex,omitempty"`
}

// NewNetworkDynamicEndpointTestResult instantiates a new NetworkDynamicEndpointTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDynamicEndpointTestResult() *NetworkDynamicEndpointTestResult {
	this := NetworkDynamicEndpointTestResult{}
	var protocol EndpointTestResultProtocol = ENDPOINTTESTRESULTPROTOCOL_UNKNOWN
	this.Protocol = &protocol
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var udpProbeMode UdpProbeModeResponse = UDPPROBEMODERESPONSE_UNKNOWN
	this.UdpProbeMode = &udpProbeMode
	return &this
}

// NewNetworkDynamicEndpointTestResultWithDefaults instantiates a new NetworkDynamicEndpointTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDynamicEndpointTestResultWithDefaults() *NetworkDynamicEndpointTestResult {
	this := NetworkDynamicEndpointTestResult{}
	var protocol EndpointTestResultProtocol = ENDPOINTTESTRESULTPROTOCOL_UNKNOWN
	this.Protocol = &protocol
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var udpProbeMode UdpProbeModeResponse = UDPPROBEMODERESPONSE_UNKNOWN
	this.UdpProbeMode = &udpProbeMode
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *NetworkDynamicEndpointTestResult) SetAid(v string) {
	o.Aid = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *NetworkDynamicEndpointTestResult) SetTestId(v string) {
	o.TestId = &v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetAgentId() string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetAgentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *NetworkDynamicEndpointTestResult) SetAgentId(v string) {
	o.AgentId = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *NetworkDynamicEndpointTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetServerIp() string {
	if o == nil || utils.IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetServerIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasServerIp() bool {
	if o != nil && !utils.IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *NetworkDynamicEndpointTestResult) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetNetworkProfile returns the NetworkProfile field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetNetworkProfile() NetworkProfile {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		var ret NetworkProfile
		return ret
	}
	return *o.NetworkProfile
}

// GetNetworkProfileOk returns a tuple with the NetworkProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetNetworkProfileOk() (*NetworkProfile, bool) {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		return nil, false
	}
	return o.NetworkProfile, true
}

// HasNetworkProfile returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasNetworkProfile() bool {
	if o != nil && !utils.IsNil(o.NetworkProfile) {
		return true
	}

	return false
}

// SetNetworkProfile gets a reference to the given NetworkProfile and assigns it to the NetworkProfile field.
func (o *NetworkDynamicEndpointTestResult) SetNetworkProfile(v NetworkProfile) {
	o.NetworkProfile = &v
}

// GetSystemMetrics returns the SystemMetrics field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetSystemMetrics() SystemMetrics {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		var ret SystemMetrics
		return ret
	}
	return *o.SystemMetrics
}

// GetSystemMetricsOk returns a tuple with the SystemMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetSystemMetricsOk() (*SystemMetrics, bool) {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		return nil, false
	}
	return o.SystemMetrics, true
}

// HasSystemMetrics returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasSystemMetrics() bool {
	if o != nil && !utils.IsNil(o.SystemMetrics) {
		return true
	}

	return false
}

// SetSystemMetrics gets a reference to the given SystemMetrics and assigns it to the SystemMetrics field.
func (o *NetworkDynamicEndpointTestResult) SetSystemMetrics(v SystemMetrics) {
	o.SystemMetrics = &v
}

// GetOriginalTargetProfile returns the OriginalTargetProfile field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetOriginalTargetProfile() TargetProfile {
	if o == nil || utils.IsNil(o.OriginalTargetProfile) {
		var ret TargetProfile
		return ret
	}
	return *o.OriginalTargetProfile
}

// GetOriginalTargetProfileOk returns a tuple with the OriginalTargetProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetOriginalTargetProfileOk() (*TargetProfile, bool) {
	if o == nil || utils.IsNil(o.OriginalTargetProfile) {
		return nil, false
	}
	return o.OriginalTargetProfile, true
}

// HasOriginalTargetProfile returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasOriginalTargetProfile() bool {
	if o != nil && !utils.IsNil(o.OriginalTargetProfile) {
		return true
	}

	return false
}

// SetOriginalTargetProfile gets a reference to the given TargetProfile and assigns it to the OriginalTargetProfile field.
func (o *NetworkDynamicEndpointTestResult) SetOriginalTargetProfile(v TargetProfile) {
	o.OriginalTargetProfile = &v
}

// GetVpnProfile returns the VpnProfile field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetVpnProfile() VpnProfile {
	if o == nil || utils.IsNil(o.VpnProfile) {
		var ret VpnProfile
		return ret
	}
	return *o.VpnProfile
}

// GetVpnProfileOk returns a tuple with the VpnProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetVpnProfileOk() (*VpnProfile, bool) {
	if o == nil || utils.IsNil(o.VpnProfile) {
		return nil, false
	}
	return o.VpnProfile, true
}

// HasVpnProfile returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasVpnProfile() bool {
	if o != nil && !utils.IsNil(o.VpnProfile) {
		return true
	}

	return false
}

// SetVpnProfile gets a reference to the given VpnProfile and assigns it to the VpnProfile field.
func (o *NetworkDynamicEndpointTestResult) SetVpnProfile(v VpnProfile) {
	o.VpnProfile = &v
}

// GetAvgLatency returns the AvgLatency field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetAvgLatency() float64 {
	if o == nil || utils.IsNil(o.AvgLatency) {
		var ret float64
		return ret
	}
	return *o.AvgLatency
}

// GetAvgLatencyOk returns a tuple with the AvgLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetAvgLatencyOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.AvgLatency) {
		return nil, false
	}
	return o.AvgLatency, true
}

// HasAvgLatency returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasAvgLatency() bool {
	if o != nil && !utils.IsNil(o.AvgLatency) {
		return true
	}

	return false
}

// SetAvgLatency gets a reference to the given float64 and assigns it to the AvgLatency field.
func (o *NetworkDynamicEndpointTestResult) SetAvgLatency(v float64) {
	o.AvgLatency = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetErrorDetails() string {
	if o == nil || utils.IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetErrorDetailsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasErrorDetails() bool {
	if o != nil && !utils.IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *NetworkDynamicEndpointTestResult) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

// GetJitter returns the Jitter field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetJitter() float64 {
	if o == nil || utils.IsNil(o.Jitter) {
		var ret float64
		return ret
	}
	return *o.Jitter
}

// GetJitterOk returns a tuple with the Jitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetJitterOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Jitter) {
		return nil, false
	}
	return o.Jitter, true
}

// HasJitter returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasJitter() bool {
	if o != nil && !utils.IsNil(o.Jitter) {
		return true
	}

	return false
}

// SetJitter gets a reference to the given float64 and assigns it to the Jitter field.
func (o *NetworkDynamicEndpointTestResult) SetJitter(v float64) {
	o.Jitter = &v
}

// GetIsIcmpBlocked returns the IsIcmpBlocked field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetIsIcmpBlocked() bool {
	if o == nil || utils.IsNil(o.IsIcmpBlocked) {
		var ret bool
		return ret
	}
	return *o.IsIcmpBlocked
}

// GetIsIcmpBlockedOk returns a tuple with the IsIcmpBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetIsIcmpBlockedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsIcmpBlocked) {
		return nil, false
	}
	return o.IsIcmpBlocked, true
}

// HasIsIcmpBlocked returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasIsIcmpBlocked() bool {
	if o != nil && !utils.IsNil(o.IsIcmpBlocked) {
		return true
	}

	return false
}

// SetIsIcmpBlocked gets a reference to the given bool and assigns it to the IsIcmpBlocked field.
func (o *NetworkDynamicEndpointTestResult) SetIsIcmpBlocked(v bool) {
	o.IsIcmpBlocked = &v
}

// GetLoss returns the Loss field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetLoss() float64 {
	if o == nil || utils.IsNil(o.Loss) {
		var ret float64
		return ret
	}
	return *o.Loss
}

// GetLossOk returns a tuple with the Loss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetLossOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Loss) {
		return nil, false
	}
	return o.Loss, true
}

// HasLoss returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasLoss() bool {
	if o != nil && !utils.IsNil(o.Loss) {
		return true
	}

	return false
}

// SetLoss gets a reference to the given float64 and assigns it to the Loss field.
func (o *NetworkDynamicEndpointTestResult) SetLoss(v float64) {
	o.Loss = &v
}

// GetMaxLatency returns the MaxLatency field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetMaxLatency() float64 {
	if o == nil || utils.IsNil(o.MaxLatency) {
		var ret float64
		return ret
	}
	return *o.MaxLatency
}

// GetMaxLatencyOk returns a tuple with the MaxLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetMaxLatencyOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.MaxLatency) {
		return nil, false
	}
	return o.MaxLatency, true
}

// HasMaxLatency returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasMaxLatency() bool {
	if o != nil && !utils.IsNil(o.MaxLatency) {
		return true
	}

	return false
}

// SetMaxLatency gets a reference to the given float64 and assigns it to the MaxLatency field.
func (o *NetworkDynamicEndpointTestResult) SetMaxLatency(v float64) {
	o.MaxLatency = &v
}

// GetMinLatency returns the MinLatency field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetMinLatency() float64 {
	if o == nil || utils.IsNil(o.MinLatency) {
		var ret float64
		return ret
	}
	return *o.MinLatency
}

// GetMinLatencyOk returns a tuple with the MinLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetMinLatencyOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.MinLatency) {
		return nil, false
	}
	return o.MinLatency, true
}

// HasMinLatency returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasMinLatency() bool {
	if o != nil && !utils.IsNil(o.MinLatency) {
		return true
	}

	return false
}

// SetMinLatency gets a reference to the given float64 and assigns it to the MinLatency field.
func (o *NetworkDynamicEndpointTestResult) SetMinLatency(v float64) {
	o.MinLatency = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetApplication() string {
	if o == nil || utils.IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetApplicationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasApplication() bool {
	if o != nil && !utils.IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *NetworkDynamicEndpointTestResult) SetApplication(v string) {
	o.Application = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetProtocol() EndpointTestResultProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestResultProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetProtocolOk() (*EndpointTestResultProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestResultProtocol and assigns it to the Protocol field.
func (o *NetworkDynamicEndpointTestResult) SetProtocol(v EndpointTestResultProtocol) {
	o.Protocol = &v
}

// GetTcpProbeMode returns the TcpProbeMode field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetTcpProbeMode() TestProbeModeResponse {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		var ret TestProbeModeResponse
		return ret
	}
	return *o.TcpProbeMode
}

// GetTcpProbeModeOk returns a tuple with the TcpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetTcpProbeModeOk() (*TestProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		return nil, false
	}
	return o.TcpProbeMode, true
}

// HasTcpProbeMode returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasTcpProbeMode() bool {
	if o != nil && !utils.IsNil(o.TcpProbeMode) {
		return true
	}

	return false
}

// SetTcpProbeMode gets a reference to the given TestProbeModeResponse and assigns it to the TcpProbeMode field.
func (o *NetworkDynamicEndpointTestResult) SetTcpProbeMode(v TestProbeModeResponse) {
	o.TcpProbeMode = &v
}

// GetUdpProbeMode returns the UdpProbeMode field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetUdpProbeMode() UdpProbeModeResponse {
	if o == nil || utils.IsNil(o.UdpProbeMode) {
		var ret UdpProbeModeResponse
		return ret
	}
	return *o.UdpProbeMode
}

// GetUdpProbeModeOk returns a tuple with the UdpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetUdpProbeModeOk() (*UdpProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.UdpProbeMode) {
		return nil, false
	}
	return o.UdpProbeMode, true
}

// HasUdpProbeMode returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasUdpProbeMode() bool {
	if o != nil && !utils.IsNil(o.UdpProbeMode) {
		return true
	}

	return false
}

// SetUdpProbeMode gets a reference to the given UdpProbeModeResponse and assigns it to the UdpProbeMode field.
func (o *NetworkDynamicEndpointTestResult) SetUdpProbeMode(v UdpProbeModeResponse) {
	o.UdpProbeMode = &v
}

// GetWebex returns the Webex field value if set, zero value otherwise.
func (o *NetworkDynamicEndpointTestResult) GetWebex() DynamicEndpointTestWebex {
	if o == nil || utils.IsNil(o.Webex) {
		var ret DynamicEndpointTestWebex
		return ret
	}
	return *o.Webex
}

// GetWebexOk returns a tuple with the Webex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDynamicEndpointTestResult) GetWebexOk() (*DynamicEndpointTestWebex, bool) {
	if o == nil || utils.IsNil(o.Webex) {
		return nil, false
	}
	return o.Webex, true
}

// HasWebex returns a boolean if a field has been set.
func (o *NetworkDynamicEndpointTestResult) HasWebex() bool {
	if o != nil && !utils.IsNil(o.Webex) {
		return true
	}

	return false
}

// SetWebex gets a reference to the given DynamicEndpointTestWebex and assigns it to the Webex field.
func (o *NetworkDynamicEndpointTestResult) SetWebex(v DynamicEndpointTestWebex) {
	o.Webex = &v
}

func (o NetworkDynamicEndpointTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDynamicEndpointTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.ServerIp) {
		toSerialize["serverIp"] = o.ServerIp
	}
	if !utils.IsNil(o.NetworkProfile) {
		toSerialize["networkProfile"] = o.NetworkProfile
	}
	if !utils.IsNil(o.SystemMetrics) {
		toSerialize["systemMetrics"] = o.SystemMetrics
	}
	if !utils.IsNil(o.OriginalTargetProfile) {
		toSerialize["originalTargetProfile"] = o.OriginalTargetProfile
	}
	if !utils.IsNil(o.VpnProfile) {
		toSerialize["vpnProfile"] = o.VpnProfile
	}
	if !utils.IsNil(o.AvgLatency) {
		toSerialize["avgLatency"] = o.AvgLatency
	}
	if !utils.IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !utils.IsNil(o.Jitter) {
		toSerialize["jitter"] = o.Jitter
	}
	if !utils.IsNil(o.IsIcmpBlocked) {
		toSerialize["isIcmpBlocked"] = o.IsIcmpBlocked
	}
	if !utils.IsNil(o.Loss) {
		toSerialize["loss"] = o.Loss
	}
	if !utils.IsNil(o.MaxLatency) {
		toSerialize["maxLatency"] = o.MaxLatency
	}
	if !utils.IsNil(o.MinLatency) {
		toSerialize["minLatency"] = o.MinLatency
	}
	if !utils.IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.TcpProbeMode) {
		toSerialize["tcpProbeMode"] = o.TcpProbeMode
	}
	if !utils.IsNil(o.UdpProbeMode) {
		toSerialize["udpProbeMode"] = o.UdpProbeMode
	}
	if !utils.IsNil(o.Webex) {
		toSerialize["webex"] = o.Webex
	}
	return toSerialize, nil
}

type NullableNetworkDynamicEndpointTestResult struct {
	value *NetworkDynamicEndpointTestResult
	isSet bool
}

func (v NullableNetworkDynamicEndpointTestResult) Get() *NetworkDynamicEndpointTestResult {
	return v.value
}

func (v *NullableNetworkDynamicEndpointTestResult) Set(val *NetworkDynamicEndpointTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDynamicEndpointTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDynamicEndpointTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDynamicEndpointTestResult(val *NetworkDynamicEndpointTestResult) *NullableNetworkDynamicEndpointTestResult {
	return &NullableNetworkDynamicEndpointTestResult{value: val, isSet: true}
}

func (v NullableNetworkDynamicEndpointTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDynamicEndpointTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


