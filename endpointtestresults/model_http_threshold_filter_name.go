/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// HttpThresholdFilterName Metric on which the threshold filter is applied.
type HttpThresholdFilterName string

// List of HttpThresholdFilterName
const (
	HTTPTHRESHOLDFILTERNAME_RESPONSE_TIME HttpThresholdFilterName = "response-time"
	HTTPTHRESHOLDFILTERNAME_DNS_TIME HttpThresholdFilterName = "dns-time"
	HTTPTHRESHOLDFILTERNAME_CONNECT_TIME HttpThresholdFilterName = "connect-time"
	HTTPTHRESHOLDFILTERNAME_SSL_TIME HttpThresholdFilterName = "ssl-time"
	HTTPTHRESHOLDFILTERNAME_WAIT_TIME HttpThresholdFilterName = "wait-time"
)

// All allowed values of HttpThresholdFilterName enum
var AllowedHttpThresholdFilterNameEnumValues = []HttpThresholdFilterName{
	"response-time",
	"dns-time",
	"connect-time",
	"ssl-time",
	"wait-time",
}

func (v *HttpThresholdFilterName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpThresholdFilterName(value)
	for _, existing := range AllowedHttpThresholdFilterNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpThresholdFilterName", value)
}

// NewHttpThresholdFilterNameFromValue returns a pointer to a valid HttpThresholdFilterName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpThresholdFilterNameFromValue(v string) (*HttpThresholdFilterName, error) {
	ev := HttpThresholdFilterName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpThresholdFilterName: valid values are %v", v, AllowedHttpThresholdFilterNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpThresholdFilterName) IsValid() bool {
	for _, existing := range AllowedHttpThresholdFilterNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpThresholdFilterName value
func (v HttpThresholdFilterName) Ptr() *HttpThresholdFilterName {
	return &v
}

type NullableHttpThresholdFilterName struct {
	value *HttpThresholdFilterName
	isSet bool
}

func (v NullableHttpThresholdFilterName) Get() *HttpThresholdFilterName {
	return v.value
}

func (v *NullableHttpThresholdFilterName) Set(val *HttpThresholdFilterName) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpThresholdFilterName) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpThresholdFilterName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpThresholdFilterName(val *HttpThresholdFilterName) *NullableHttpThresholdFilterName {
	return &NullableHttpThresholdFilterName{value: val, isSet: true}
}

func (v NullableHttpThresholdFilterName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpThresholdFilterName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

