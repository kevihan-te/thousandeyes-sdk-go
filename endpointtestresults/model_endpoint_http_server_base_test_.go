/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EndpointHttpServerBaseTest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointHttpServerBaseTest{}

// EndpointHttpServerBaseTest struct for EndpointHttpServerBaseTest
type EndpointHttpServerBaseTest struct {
	AuthType *EndpointTestAuthType `json:"authType,omitempty"`
	// Enables \"in session\" path trace. When enabled, this option initiates a TCP session with the target server and sends path trace packets within the established TCP session.
	HasPathTraceInSession *bool `json:"hasPathTraceInSession,omitempty"`
	// Maximum amount of time in milliseconds the agents wait before a request times out.
	HttpTimeLimit *int32 `json:"httpTimeLimit,omitempty"`
	Protocol *EndpointTestProtocol `json:"protocol,omitempty"`
	// Username for Basic/NTLM authentication.
	Username *string `json:"username,omitempty"`
	SslVersionId *TestSslVersionId `json:"sslVersionId,omitempty"`
	TcpProbeMode *TestProbeModeResponse `json:"tcpProbeMode,omitempty"`
	// Flag indicating if a certificate should be verified.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty"`
	// The test target URL.
	Url *string `json:"url,omitempty"`
}

// NewEndpointHttpServerBaseTest instantiates a new EndpointHttpServerBaseTest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointHttpServerBaseTest() *EndpointHttpServerBaseTest {
	this := EndpointHttpServerBaseTest{}
	var authType EndpointTestAuthType = ENDPOINTTESTAUTHTYPE_NONE
	this.AuthType = &authType
	var httpTimeLimit int32 = 5000
	this.HttpTimeLimit = &httpTimeLimit
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var verifyCertificate bool = true
	this.VerifyCertificate = &verifyCertificate
	return &this
}

// NewEndpointHttpServerBaseTestWithDefaults instantiates a new EndpointHttpServerBaseTest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointHttpServerBaseTestWithDefaults() *EndpointHttpServerBaseTest {
	this := EndpointHttpServerBaseTest{}
	var authType EndpointTestAuthType = ENDPOINTTESTAUTHTYPE_NONE
	this.AuthType = &authType
	var httpTimeLimit int32 = 5000
	this.HttpTimeLimit = &httpTimeLimit
	var protocol EndpointTestProtocol = ENDPOINTTESTPROTOCOL_ICMP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var verifyCertificate bool = true
	this.VerifyCertificate = &verifyCertificate
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetAuthType() EndpointTestAuthType {
	if o == nil || utils.IsNil(o.AuthType) {
		var ret EndpointTestAuthType
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetAuthTypeOk() (*EndpointTestAuthType, bool) {
	if o == nil || utils.IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasAuthType() bool {
	if o != nil && !utils.IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given EndpointTestAuthType and assigns it to the AuthType field.
func (o *EndpointHttpServerBaseTest) SetAuthType(v EndpointTestAuthType) {
	o.AuthType = &v
}

// GetHasPathTraceInSession returns the HasPathTraceInSession field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetHasPathTraceInSession() bool {
	if o == nil || utils.IsNil(o.HasPathTraceInSession) {
		var ret bool
		return ret
	}
	return *o.HasPathTraceInSession
}

// GetHasPathTraceInSessionOk returns a tuple with the HasPathTraceInSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetHasPathTraceInSessionOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasPathTraceInSession) {
		return nil, false
	}
	return o.HasPathTraceInSession, true
}

// HasHasPathTraceInSession returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasHasPathTraceInSession() bool {
	if o != nil && !utils.IsNil(o.HasPathTraceInSession) {
		return true
	}

	return false
}

// SetHasPathTraceInSession gets a reference to the given bool and assigns it to the HasPathTraceInSession field.
func (o *EndpointHttpServerBaseTest) SetHasPathTraceInSession(v bool) {
	o.HasPathTraceInSession = &v
}

// GetHttpTimeLimit returns the HttpTimeLimit field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetHttpTimeLimit() int32 {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		var ret int32
		return ret
	}
	return *o.HttpTimeLimit
}

// GetHttpTimeLimitOk returns a tuple with the HttpTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetHttpTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		return nil, false
	}
	return o.HttpTimeLimit, true
}

// HasHttpTimeLimit returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasHttpTimeLimit() bool {
	if o != nil && !utils.IsNil(o.HttpTimeLimit) {
		return true
	}

	return false
}

// SetHttpTimeLimit gets a reference to the given int32 and assigns it to the HttpTimeLimit field.
func (o *EndpointHttpServerBaseTest) SetHttpTimeLimit(v int32) {
	o.HttpTimeLimit = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetProtocol() EndpointTestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetProtocolOk() (*EndpointTestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestProtocol and assigns it to the Protocol field.
func (o *EndpointHttpServerBaseTest) SetProtocol(v EndpointTestProtocol) {
	o.Protocol = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetUsername() string {
	if o == nil || utils.IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *EndpointHttpServerBaseTest) SetUsername(v string) {
	o.Username = &v
}

// GetSslVersionId returns the SslVersionId field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetSslVersionId() TestSslVersionId {
	if o == nil || utils.IsNil(o.SslVersionId) {
		var ret TestSslVersionId
		return ret
	}
	return *o.SslVersionId
}

// GetSslVersionIdOk returns a tuple with the SslVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetSslVersionIdOk() (*TestSslVersionId, bool) {
	if o == nil || utils.IsNil(o.SslVersionId) {
		return nil, false
	}
	return o.SslVersionId, true
}

// HasSslVersionId returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasSslVersionId() bool {
	if o != nil && !utils.IsNil(o.SslVersionId) {
		return true
	}

	return false
}

// SetSslVersionId gets a reference to the given TestSslVersionId and assigns it to the SslVersionId field.
func (o *EndpointHttpServerBaseTest) SetSslVersionId(v TestSslVersionId) {
	o.SslVersionId = &v
}

// GetTcpProbeMode returns the TcpProbeMode field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetTcpProbeMode() TestProbeModeResponse {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		var ret TestProbeModeResponse
		return ret
	}
	return *o.TcpProbeMode
}

// GetTcpProbeModeOk returns a tuple with the TcpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetTcpProbeModeOk() (*TestProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		return nil, false
	}
	return o.TcpProbeMode, true
}

// HasTcpProbeMode returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasTcpProbeMode() bool {
	if o != nil && !utils.IsNil(o.TcpProbeMode) {
		return true
	}

	return false
}

// SetTcpProbeMode gets a reference to the given TestProbeModeResponse and assigns it to the TcpProbeMode field.
func (o *EndpointHttpServerBaseTest) SetTcpProbeMode(v TestProbeModeResponse) {
	o.TcpProbeMode = &v
}

// GetVerifyCertificate returns the VerifyCertificate field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetVerifyCertificate() bool {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		var ret bool
		return ret
	}
	return *o.VerifyCertificate
}

// GetVerifyCertificateOk returns a tuple with the VerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetVerifyCertificateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		return nil, false
	}
	return o.VerifyCertificate, true
}

// HasVerifyCertificate returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasVerifyCertificate() bool {
	if o != nil && !utils.IsNil(o.VerifyCertificate) {
		return true
	}

	return false
}

// SetVerifyCertificate gets a reference to the given bool and assigns it to the VerifyCertificate field.
func (o *EndpointHttpServerBaseTest) SetVerifyCertificate(v bool) {
	o.VerifyCertificate = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *EndpointHttpServerBaseTest) GetUrl() string {
	if o == nil || utils.IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointHttpServerBaseTest) GetUrlOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *EndpointHttpServerBaseTest) HasUrl() bool {
	if o != nil && !utils.IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *EndpointHttpServerBaseTest) SetUrl(v string) {
	o.Url = &v
}

func (o EndpointHttpServerBaseTest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointHttpServerBaseTest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !utils.IsNil(o.HasPathTraceInSession) {
		toSerialize["hasPathTraceInSession"] = o.HasPathTraceInSession
	}
	if !utils.IsNil(o.HttpTimeLimit) {
		toSerialize["httpTimeLimit"] = o.HttpTimeLimit
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.SslVersionId) {
		toSerialize["sslVersionId"] = o.SslVersionId
	}
	if !utils.IsNil(o.TcpProbeMode) {
		toSerialize["tcpProbeMode"] = o.TcpProbeMode
	}
	if !utils.IsNil(o.VerifyCertificate) {
		toSerialize["verifyCertificate"] = o.VerifyCertificate
	}
	if !utils.IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableEndpointHttpServerBaseTest struct {
	value *EndpointHttpServerBaseTest
	isSet bool
}

func (v NullableEndpointHttpServerBaseTest) Get() *EndpointHttpServerBaseTest {
	return v.value
}

func (v *NullableEndpointHttpServerBaseTest) Set(val *EndpointHttpServerBaseTest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointHttpServerBaseTest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointHttpServerBaseTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointHttpServerBaseTest(val *EndpointHttpServerBaseTest) *NullableEndpointHttpServerBaseTest {
	return &NullableEndpointHttpServerBaseTest{value: val, isSet: true}
}

func (v NullableEndpointHttpServerBaseTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointHttpServerBaseTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


