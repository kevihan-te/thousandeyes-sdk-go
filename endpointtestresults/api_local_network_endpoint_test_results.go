/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"bytes"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/client"
	internalerror "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/error"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/request"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// LocalNetworkEndpointTestResultsAPIService LocalNetworkEndpointTestResultsAPI service
type LocalNetworkEndpointTestResultsAPIService client.Service

type ApiFilterLocalNetworksTestResultsTopologiesRequest struct {

	ApiService *LocalNetworkEndpointTestResultsAPIService
	aid *string
	window *string
	startDate *time.Time
	endDate *time.Time
	cursor *string
	expand *[]ExpandLocalNetworkTopologyOptions
	endpointNetworkTopologyResultRequest *EndpointNetworkTopologyResultRequest
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) Aid(aid string) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.aid = &aid
	return r
}

// A dynamic time interval up to the current time of the request. Specify the interval as a number followed by an optional type: &#x60;s&#x60; for seconds (default if no type is specified), &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days, and &#x60;w&#x60; for weeks. For a precise date range, use &#x60;startDate&#x60; and &#x60;endDate&#x60;.
func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) Window(window string) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.window = &window
	return r
}

// Use with the &#x60;endDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) StartDate(startDate time.Time) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.startDate = &startDate
	return r
}

// Defaults to current time the request is made. Use with the &#x60;startDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) EndDate(endDate time.Time) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.endDate = &endDate
	return r
}

// (Optional) Opaque cursor used for pagination. Clients should use &#x60;next&#x60; value from &#x60;_links&#x60; instead of this parameter.
func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) Cursor(cursor string) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.cursor = &cursor
	return r
}

// This parameter is optional and determines whether to expand resources related to local network topologies. By default, no expansion occurs when this query parameter is omitted. To expand a specific resource, such as &#x60;systemMetricDetails&#x60;, append  &#x60;?expand&#x3D;system-metric-detail&#x60; to the query.
func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) Expand(expand []ExpandLocalNetworkTopologyOptions) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.expand = &expand
	return r
}

func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) EndpointNetworkTopologyResultRequest(endpointNetworkTopologyResultRequest EndpointNetworkTopologyResultRequest) ApiFilterLocalNetworksTestResultsTopologiesRequest {
	r.endpointNetworkTopologyResultRequest = &endpointNetworkTopologyResultRequest
	return r
}

func (r ApiFilterLocalNetworksTestResultsTopologiesRequest) Execute() (*LocalNetworkTopologyResults, *http.Response, error) {
	return r.ApiService.FilterLocalNetworksTestResultsTopologiesExecute(r)
}

/*
FilterLocalNetworksTestResultsTopologies List endpoint network topologies probes

Returns a list of all endpoint local network topologies probes. 
Results from the last round are provided unless an explicit start and end is provided with `startDate`, `endDate` or `window` optional parameters.

## Request body filters
This endpoint supports complex filtering using the request body.
It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.

### Multiple filter fields
When multiple filter fields are provided, a logical `AND` is applied between the filters.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/local-networks/topologies/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ]
  }}'
```

### Filter field with multiple values
When a filter field contains multiple values, a logical `OR` is applied between the filter values.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/local-networks/topologies/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "networkId": [ "660b34109d12", "660b34109d15" ]
  }}'
```

### Combination of request parameters and body filters
```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/local-networks/topologies/filter?window=12h'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ],
    "networkId": [ "660b34109d12", "660b34109d15" ]
  }}'
```

### Warning
Note that a maximum of 12h worth of data can be retrieved at once. 
If you need more, you need to make multiple requests.

Returns a `results` array of network topology probes. 
Network topology probes shown are from the latest round, or based on the time range specified.



 @return ApiFilterLocalNetworksTestResultsTopologiesRequest
*/
func (a *LocalNetworkEndpointTestResultsAPIService) FilterLocalNetworksTestResultsTopologies() ApiFilterLocalNetworksTestResultsTopologiesRequest {
	return ApiFilterLocalNetworksTestResultsTopologiesRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return LocalNetworkTopologyResults
func (a *LocalNetworkEndpointTestResultsAPIService) FilterLocalNetworksTestResultsTopologiesExecute(r ApiFilterLocalNetworksTestResultsTopologiesRequest) (*LocalNetworkTopologyResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *LocalNetworkTopologyResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/local-networks/topologies/filter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.window != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "window", r.window, "")
	}
	if r.startDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.cursor != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.endpointNetworkTopologyResultRequest
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLocalNetworksTestResultsRequest struct {

	ApiService *LocalNetworkEndpointTestResultsAPIService
	aid *string
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetLocalNetworksTestResultsRequest) Aid(aid string) ApiGetLocalNetworksTestResultsRequest {
	r.aid = &aid
	return r
}

func (r ApiGetLocalNetworksTestResultsRequest) Execute() (*LocalNetworkResults, *http.Response, error) {
	return r.ApiService.GetLocalNetworksTestResultsExecute(r)
}

/*
GetLocalNetworksTestResults List local networks

Returns a list of all the networks used by endpoint agents.

Sends back a `localNetworks` array.



 @return ApiGetLocalNetworksTestResultsRequest
*/
func (a *LocalNetworkEndpointTestResultsAPIService) GetLocalNetworksTestResults() ApiGetLocalNetworksTestResultsRequest {
	return ApiGetLocalNetworksTestResultsRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return LocalNetworkResults
func (a *LocalNetworkEndpointTestResultsAPIService) GetLocalNetworksTestResultsExecute(r ApiGetLocalNetworksTestResultsRequest) (*LocalNetworkResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *LocalNetworkResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/local-networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLocalNetworksTestResultsTopologyRequest struct {

	ApiService *LocalNetworkEndpointTestResultsAPIService
	networkTopologyId string
	aid *string
	expand *[]ExpandLocalNetworkTopologyOptions
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetLocalNetworksTestResultsTopologyRequest) Aid(aid string) ApiGetLocalNetworksTestResultsTopologyRequest {
	r.aid = &aid
	return r
}

// This parameter is optional and determines whether to expand resources related to local network topologies. By default, no expansion occurs when this query parameter is omitted. To expand a specific resource, such as &#x60;systemMetricDetails&#x60;, append  &#x60;?expand&#x3D;system-metric-detail&#x60; to the query.
func (r ApiGetLocalNetworksTestResultsTopologyRequest) Expand(expand []ExpandLocalNetworkTopologyOptions) ApiGetLocalNetworksTestResultsTopologyRequest {
	r.expand = &expand
	return r
}

func (r ApiGetLocalNetworksTestResultsTopologyRequest) Execute() (*LocalNetworkTopologyDetailResults, *http.Response, error) {
	return r.ApiService.GetLocalNetworksTestResultsTopologyExecute(r)
}

/*
GetLocalNetworksTestResultsTopology Retrieve endpoint local network topology

Returns detailed data of a local network topology.


 @param networkTopologyId The network topology ID.
 @return ApiGetLocalNetworksTestResultsTopologyRequest
*/
func (a *LocalNetworkEndpointTestResultsAPIService) GetLocalNetworksTestResultsTopology(networkTopologyId string ) ApiGetLocalNetworksTestResultsTopologyRequest {
	return ApiGetLocalNetworksTestResultsTopologyRequest{
		ApiService: a,
		networkTopologyId: networkTopologyId,
	}
}

// Execute executes the request
//  @return LocalNetworkTopologyDetailResults
func (a *LocalNetworkEndpointTestResultsAPIService) GetLocalNetworksTestResultsTopologyExecute(r ApiGetLocalNetworksTestResultsTopologyRequest) (*LocalNetworkTopologyDetailResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *LocalNetworkTopologyDetailResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/local-networks/topologies/{networkTopologyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkTopologyId"+"}", url.PathEscape(request.ParameterValueToString(r.networkTopologyId, "networkTopologyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *LocalNetworkEndpointTestResultsAPIService) decodeError(v interface{}, localVarBody []byte, localVarHTTPResponse *http.Response, newErr *internalerror.GenericAPIError) {
    err := a.Client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr.ErrorMessage = err.Error()
        return
    }
    newErr.ErrorMessage = internalerror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
    newErr.Model = v
}
