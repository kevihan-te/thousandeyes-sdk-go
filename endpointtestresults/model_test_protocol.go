/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// TestProtocol Protocol used by dependent network tests (end-to-end, path trace, PMTUD).
type TestProtocol string

// List of TestProtocol
const (
	TESTPROTOCOL_TCP TestProtocol = "tcp"
	TESTPROTOCOL_ICMP TestProtocol = "icmp"
	TESTPROTOCOL_UDP TestProtocol = "udp"
)

// All allowed values of TestProtocol enum
var AllowedTestProtocolEnumValues = []TestProtocol{
	"tcp",
	"icmp",
	"udp",
}

func (v *TestProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestProtocol(value)
	for _, existing := range AllowedTestProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestProtocol", value)
}

// NewTestProtocolFromValue returns a pointer to a valid TestProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestProtocolFromValue(v string) (*TestProtocol, error) {
	ev := TestProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestProtocol: valid values are %v", v, AllowedTestProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestProtocol) IsValid() bool {
	for _, existing := range AllowedTestProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestProtocol value
func (v TestProtocol) Ptr() *TestProtocol {
	return &v
}

type NullableTestProtocol struct {
	value *TestProtocol
	isSet bool
}

func (v NullableTestProtocol) Get() *TestProtocol {
	return v.value
}

func (v *NullableTestProtocol) Set(val *TestProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableTestProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableTestProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestProtocol(val *TestProtocol) *NullableTestProtocol {
	return &NullableTestProtocol{value: val, isSet: true}
}

func (v NullableTestProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

