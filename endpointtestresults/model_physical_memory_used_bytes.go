/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the PhysicalMemoryUsedBytes type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PhysicalMemoryUsedBytes{}

// PhysicalMemoryUsedBytes struct for PhysicalMemoryUsedBytes
type PhysicalMemoryUsedBytes struct {
	// The minimum sampled memory usage value recorded during the monitored period.
	Min *float64 `json:"min,omitempty"`
	// The maximum sampled memory usage value recorded during the monitored period.
	Max *float64 `json:"max,omitempty"`
	// The mean (average) value of memory usage sampled over the monitored period.
	Mean *float64 `json:"mean,omitempty"`
	// The median value of memory usage sampled over the monitored period.
	Median *float64 `json:"median,omitempty"`
	// The standard deviation of memory usage sampled during the monitored period.
	StdDev *float64 `json:"stdDev,omitempty"`
	// The total number of samples collected during the monitored period.
	Count *int32 `json:"count,omitempty"`
}

// NewPhysicalMemoryUsedBytes instantiates a new PhysicalMemoryUsedBytes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalMemoryUsedBytes() *PhysicalMemoryUsedBytes {
	this := PhysicalMemoryUsedBytes{}
	return &this
}

// NewPhysicalMemoryUsedBytesWithDefaults instantiates a new PhysicalMemoryUsedBytes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalMemoryUsedBytesWithDefaults() *PhysicalMemoryUsedBytes {
	this := PhysicalMemoryUsedBytes{}
	return &this
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *PhysicalMemoryUsedBytes) GetMin() float64 {
	if o == nil || utils.IsNil(o.Min) {
		var ret float64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMemoryUsedBytes) GetMinOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *PhysicalMemoryUsedBytes) HasMin() bool {
	if o != nil && !utils.IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float64 and assigns it to the Min field.
func (o *PhysicalMemoryUsedBytes) SetMin(v float64) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *PhysicalMemoryUsedBytes) GetMax() float64 {
	if o == nil || utils.IsNil(o.Max) {
		var ret float64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMemoryUsedBytes) GetMaxOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *PhysicalMemoryUsedBytes) HasMax() bool {
	if o != nil && !utils.IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float64 and assigns it to the Max field.
func (o *PhysicalMemoryUsedBytes) SetMax(v float64) {
	o.Max = &v
}

// GetMean returns the Mean field value if set, zero value otherwise.
func (o *PhysicalMemoryUsedBytes) GetMean() float64 {
	if o == nil || utils.IsNil(o.Mean) {
		var ret float64
		return ret
	}
	return *o.Mean
}

// GetMeanOk returns a tuple with the Mean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMemoryUsedBytes) GetMeanOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Mean) {
		return nil, false
	}
	return o.Mean, true
}

// HasMean returns a boolean if a field has been set.
func (o *PhysicalMemoryUsedBytes) HasMean() bool {
	if o != nil && !utils.IsNil(o.Mean) {
		return true
	}

	return false
}

// SetMean gets a reference to the given float64 and assigns it to the Mean field.
func (o *PhysicalMemoryUsedBytes) SetMean(v float64) {
	o.Mean = &v
}

// GetMedian returns the Median field value if set, zero value otherwise.
func (o *PhysicalMemoryUsedBytes) GetMedian() float64 {
	if o == nil || utils.IsNil(o.Median) {
		var ret float64
		return ret
	}
	return *o.Median
}

// GetMedianOk returns a tuple with the Median field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMemoryUsedBytes) GetMedianOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Median) {
		return nil, false
	}
	return o.Median, true
}

// HasMedian returns a boolean if a field has been set.
func (o *PhysicalMemoryUsedBytes) HasMedian() bool {
	if o != nil && !utils.IsNil(o.Median) {
		return true
	}

	return false
}

// SetMedian gets a reference to the given float64 and assigns it to the Median field.
func (o *PhysicalMemoryUsedBytes) SetMedian(v float64) {
	o.Median = &v
}

// GetStdDev returns the StdDev field value if set, zero value otherwise.
func (o *PhysicalMemoryUsedBytes) GetStdDev() float64 {
	if o == nil || utils.IsNil(o.StdDev) {
		var ret float64
		return ret
	}
	return *o.StdDev
}

// GetStdDevOk returns a tuple with the StdDev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMemoryUsedBytes) GetStdDevOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.StdDev) {
		return nil, false
	}
	return o.StdDev, true
}

// HasStdDev returns a boolean if a field has been set.
func (o *PhysicalMemoryUsedBytes) HasStdDev() bool {
	if o != nil && !utils.IsNil(o.StdDev) {
		return true
	}

	return false
}

// SetStdDev gets a reference to the given float64 and assigns it to the StdDev field.
func (o *PhysicalMemoryUsedBytes) SetStdDev(v float64) {
	o.StdDev = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PhysicalMemoryUsedBytes) GetCount() int32 {
	if o == nil || utils.IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalMemoryUsedBytes) GetCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PhysicalMemoryUsedBytes) HasCount() bool {
	if o != nil && !utils.IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PhysicalMemoryUsedBytes) SetCount(v int32) {
	o.Count = &v
}

func (o PhysicalMemoryUsedBytes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalMemoryUsedBytes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !utils.IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !utils.IsNil(o.Mean) {
		toSerialize["mean"] = o.Mean
	}
	if !utils.IsNil(o.Median) {
		toSerialize["median"] = o.Median
	}
	if !utils.IsNil(o.StdDev) {
		toSerialize["stdDev"] = o.StdDev
	}
	if !utils.IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullablePhysicalMemoryUsedBytes struct {
	value *PhysicalMemoryUsedBytes
	isSet bool
}

func (v NullablePhysicalMemoryUsedBytes) Get() *PhysicalMemoryUsedBytes {
	return v.value
}

func (v *NullablePhysicalMemoryUsedBytes) Set(val *PhysicalMemoryUsedBytes) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalMemoryUsedBytes) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalMemoryUsedBytes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalMemoryUsedBytes(val *PhysicalMemoryUsedBytes) *NullablePhysicalMemoryUsedBytes {
	return &NullablePhysicalMemoryUsedBytes{value: val, isSet: true}
}

func (v NullablePhysicalMemoryUsedBytes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalMemoryUsedBytes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


