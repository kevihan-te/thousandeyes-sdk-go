/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// ThresholdFilterName Metric on which the threshold filter is applied.
type ThresholdFilterName string

// List of ThresholdFilterName
const (
	THRESHOLDFILTERNAME_LOSS ThresholdFilterName = "loss"
	THRESHOLDFILTERNAME_LATENCY ThresholdFilterName = "latency"
	THRESHOLDFILTERNAME_JITTER ThresholdFilterName = "jitter"
	THRESHOLDFILTERNAME_CPU ThresholdFilterName = "cpu"
	THRESHOLDFILTERNAME_MEMORY ThresholdFilterName = "memory"
	THRESHOLDFILTERNAME_SIGNAL_QUALITY ThresholdFilterName = "signal-quality"
)

// All allowed values of ThresholdFilterName enum
var AllowedThresholdFilterNameEnumValues = []ThresholdFilterName{
	"loss",
	"latency",
	"jitter",
	"cpu",
	"memory",
	"signal-quality",
}

func (v *ThresholdFilterName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThresholdFilterName(value)
	for _, existing := range AllowedThresholdFilterNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThresholdFilterName", value)
}

// NewThresholdFilterNameFromValue returns a pointer to a valid ThresholdFilterName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThresholdFilterNameFromValue(v string) (*ThresholdFilterName, error) {
	ev := ThresholdFilterName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThresholdFilterName: valid values are %v", v, AllowedThresholdFilterNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThresholdFilterName) IsValid() bool {
	for _, existing := range AllowedThresholdFilterNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThresholdFilterName value
func (v ThresholdFilterName) Ptr() *ThresholdFilterName {
	return &v
}

type NullableThresholdFilterName struct {
	value *ThresholdFilterName
	isSet bool
}

func (v NullableThresholdFilterName) Get() *ThresholdFilterName {
	return v.value
}

func (v *NullableThresholdFilterName) Set(val *ThresholdFilterName) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdFilterName) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdFilterName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdFilterName(val *ThresholdFilterName) *NullableThresholdFilterName {
	return &NullableThresholdFilterName{value: val, isSet: true}
}

func (v NullableThresholdFilterName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdFilterName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

