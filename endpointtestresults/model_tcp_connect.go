/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TcpConnect type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TcpConnect{}

// TcpConnect struct for TcpConnect
type TcpConnect struct {
	// Represents the number of milliseconds required to establish TCP connectivity with the target
	Rtt *float64 `json:"rtt,omitempty"`
	// Only present when there is an error
	ErrorCode *string `json:"errorCode,omitempty"`
	// Only present when there is an error
	Error *string `json:"error,omitempty"`
	InfoFlags []string `json:"infoFlags,omitempty"`
}

// NewTcpConnect instantiates a new TcpConnect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTcpConnect() *TcpConnect {
	this := TcpConnect{}
	return &this
}

// NewTcpConnectWithDefaults instantiates a new TcpConnect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTcpConnectWithDefaults() *TcpConnect {
	this := TcpConnect{}
	return &this
}

// GetRtt returns the Rtt field value if set, zero value otherwise.
func (o *TcpConnect) GetRtt() float64 {
	if o == nil || utils.IsNil(o.Rtt) {
		var ret float64
		return ret
	}
	return *o.Rtt
}

// GetRttOk returns a tuple with the Rtt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TcpConnect) GetRttOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Rtt) {
		return nil, false
	}
	return o.Rtt, true
}

// HasRtt returns a boolean if a field has been set.
func (o *TcpConnect) HasRtt() bool {
	if o != nil && !utils.IsNil(o.Rtt) {
		return true
	}

	return false
}

// SetRtt gets a reference to the given float64 and assigns it to the Rtt field.
func (o *TcpConnect) SetRtt(v float64) {
	o.Rtt = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *TcpConnect) GetErrorCode() string {
	if o == nil || utils.IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TcpConnect) GetErrorCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *TcpConnect) HasErrorCode() bool {
	if o != nil && !utils.IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *TcpConnect) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TcpConnect) GetError() string {
	if o == nil || utils.IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TcpConnect) GetErrorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TcpConnect) HasError() bool {
	if o != nil && !utils.IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *TcpConnect) SetError(v string) {
	o.Error = &v
}

// GetInfoFlags returns the InfoFlags field value if set, zero value otherwise.
func (o *TcpConnect) GetInfoFlags() []string {
	if o == nil || utils.IsNil(o.InfoFlags) {
		var ret []string
		return ret
	}
	return o.InfoFlags
}

// GetInfoFlagsOk returns a tuple with the InfoFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TcpConnect) GetInfoFlagsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.InfoFlags) {
		return nil, false
	}
	return o.InfoFlags, true
}

// HasInfoFlags returns a boolean if a field has been set.
func (o *TcpConnect) HasInfoFlags() bool {
	if o != nil && !utils.IsNil(o.InfoFlags) {
		return true
	}

	return false
}

// SetInfoFlags gets a reference to the given []string and assigns it to the InfoFlags field.
func (o *TcpConnect) SetInfoFlags(v []string) {
	o.InfoFlags = v
}

func (o TcpConnect) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TcpConnect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Rtt) {
		toSerialize["rtt"] = o.Rtt
	}
	if !utils.IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !utils.IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !utils.IsNil(o.InfoFlags) {
		toSerialize["infoFlags"] = o.InfoFlags
	}
	return toSerialize, nil
}

type NullableTcpConnect struct {
	value *TcpConnect
	isSet bool
}

func (v NullableTcpConnect) Get() *TcpConnect {
	return v.value
}

func (v *NullableTcpConnect) Set(val *TcpConnect) {
	v.value = val
	v.isSet = true
}

func (v NullableTcpConnect) IsSet() bool {
	return v.isSet
}

func (v *NullableTcpConnect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTcpConnect(val *TcpConnect) *NullableTcpConnect {
	return &NullableTcpConnect{value: val, isSet: true}
}

func (v NullableTcpConnect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTcpConnect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


