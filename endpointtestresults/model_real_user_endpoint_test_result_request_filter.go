/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the RealUserEndpointTestResultRequestFilter type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RealUserEndpointTestResultRequestFilter{}

// RealUserEndpointTestResultRequestFilter struct for RealUserEndpointTestResultRequestFilter
type RealUserEndpointTestResultRequestFilter struct {
	// Location of the endpoint agent.
	Location []string `json:"location,omitempty"`
	Connection []InterfaceHardwareType `json:"connection,omitempty"`
	Platform []Platform `json:"platform,omitempty"`
	// Endpoint agent default gateway IP address.
	Gateway []string `json:"gateway,omitempty"`
	// Endpoint agent proxy IP address.
	ProxyTarget []string `json:"proxyTarget,omitempty"`
	// Endpoint agent VPN endpoint IP address.
	VpnTarget []string `json:"vpnTarget,omitempty"`
	// Endpoint agent ID.
	AgentId []string `json:"agentId,omitempty"`
	// Network ID.
	NetworkId []string `json:"networkId,omitempty"`
	// WiFi SSID.
	Ssid []string `json:"ssid,omitempty"`
	// WiFi BSSID.
	Bssid []string `json:"bssid,omitempty"`
	// Web site destination IP address.
	DestinationIp []string `json:"destinationIp,omitempty"`
	// Web site base domain visited during the session.
	Domain []string `json:"domain,omitempty"`
	// Real user test trigger.
	Trigger []Trigger `json:"trigger,omitempty"`
	// Web site domain visited during the session.
	VisitedSite []string `json:"visitedSite,omitempty"`
}

// NewRealUserEndpointTestResultRequestFilter instantiates a new RealUserEndpointTestResultRequestFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealUserEndpointTestResultRequestFilter() *RealUserEndpointTestResultRequestFilter {
	this := RealUserEndpointTestResultRequestFilter{}
	return &this
}

// NewRealUserEndpointTestResultRequestFilterWithDefaults instantiates a new RealUserEndpointTestResultRequestFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealUserEndpointTestResultRequestFilterWithDefaults() *RealUserEndpointTestResultRequestFilter {
	this := RealUserEndpointTestResultRequestFilter{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetLocation() []string {
	if o == nil || utils.IsNil(o.Location) {
		var ret []string
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetLocationOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasLocation() bool {
	if o != nil && !utils.IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given []string and assigns it to the Location field.
func (o *RealUserEndpointTestResultRequestFilter) SetLocation(v []string) {
	o.Location = v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetConnection() []InterfaceHardwareType {
	if o == nil || utils.IsNil(o.Connection) {
		var ret []InterfaceHardwareType
		return ret
	}
	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetConnectionOk() ([]InterfaceHardwareType, bool) {
	if o == nil || utils.IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasConnection() bool {
	if o != nil && !utils.IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given []InterfaceHardwareType and assigns it to the Connection field.
func (o *RealUserEndpointTestResultRequestFilter) SetConnection(v []InterfaceHardwareType) {
	o.Connection = v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetPlatform() []Platform {
	if o == nil || utils.IsNil(o.Platform) {
		var ret []Platform
		return ret
	}
	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetPlatformOk() ([]Platform, bool) {
	if o == nil || utils.IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasPlatform() bool {
	if o != nil && !utils.IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given []Platform and assigns it to the Platform field.
func (o *RealUserEndpointTestResultRequestFilter) SetPlatform(v []Platform) {
	o.Platform = v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetGateway() []string {
	if o == nil || utils.IsNil(o.Gateway) {
		var ret []string
		return ret
	}
	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetGatewayOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasGateway() bool {
	if o != nil && !utils.IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given []string and assigns it to the Gateway field.
func (o *RealUserEndpointTestResultRequestFilter) SetGateway(v []string) {
	o.Gateway = v
}

// GetProxyTarget returns the ProxyTarget field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetProxyTarget() []string {
	if o == nil || utils.IsNil(o.ProxyTarget) {
		var ret []string
		return ret
	}
	return o.ProxyTarget
}

// GetProxyTargetOk returns a tuple with the ProxyTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetProxyTargetOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.ProxyTarget) {
		return nil, false
	}
	return o.ProxyTarget, true
}

// HasProxyTarget returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasProxyTarget() bool {
	if o != nil && !utils.IsNil(o.ProxyTarget) {
		return true
	}

	return false
}

// SetProxyTarget gets a reference to the given []string and assigns it to the ProxyTarget field.
func (o *RealUserEndpointTestResultRequestFilter) SetProxyTarget(v []string) {
	o.ProxyTarget = v
}

// GetVpnTarget returns the VpnTarget field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetVpnTarget() []string {
	if o == nil || utils.IsNil(o.VpnTarget) {
		var ret []string
		return ret
	}
	return o.VpnTarget
}

// GetVpnTargetOk returns a tuple with the VpnTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetVpnTargetOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.VpnTarget) {
		return nil, false
	}
	return o.VpnTarget, true
}

// HasVpnTarget returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasVpnTarget() bool {
	if o != nil && !utils.IsNil(o.VpnTarget) {
		return true
	}

	return false
}

// SetVpnTarget gets a reference to the given []string and assigns it to the VpnTarget field.
func (o *RealUserEndpointTestResultRequestFilter) SetVpnTarget(v []string) {
	o.VpnTarget = v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetAgentId() []string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret []string
		return ret
	}
	return o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetAgentIdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given []string and assigns it to the AgentId field.
func (o *RealUserEndpointTestResultRequestFilter) SetAgentId(v []string) {
	o.AgentId = v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetNetworkId() []string {
	if o == nil || utils.IsNil(o.NetworkId) {
		var ret []string
		return ret
	}
	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetNetworkIdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasNetworkId() bool {
	if o != nil && !utils.IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given []string and assigns it to the NetworkId field.
func (o *RealUserEndpointTestResultRequestFilter) SetNetworkId(v []string) {
	o.NetworkId = v
}

// GetSsid returns the Ssid field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetSsid() []string {
	if o == nil || utils.IsNil(o.Ssid) {
		var ret []string
		return ret
	}
	return o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetSsidOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Ssid) {
		return nil, false
	}
	return o.Ssid, true
}

// HasSsid returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasSsid() bool {
	if o != nil && !utils.IsNil(o.Ssid) {
		return true
	}

	return false
}

// SetSsid gets a reference to the given []string and assigns it to the Ssid field.
func (o *RealUserEndpointTestResultRequestFilter) SetSsid(v []string) {
	o.Ssid = v
}

// GetBssid returns the Bssid field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetBssid() []string {
	if o == nil || utils.IsNil(o.Bssid) {
		var ret []string
		return ret
	}
	return o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetBssidOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Bssid) {
		return nil, false
	}
	return o.Bssid, true
}

// HasBssid returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasBssid() bool {
	if o != nil && !utils.IsNil(o.Bssid) {
		return true
	}

	return false
}

// SetBssid gets a reference to the given []string and assigns it to the Bssid field.
func (o *RealUserEndpointTestResultRequestFilter) SetBssid(v []string) {
	o.Bssid = v
}

// GetDestinationIp returns the DestinationIp field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetDestinationIp() []string {
	if o == nil || utils.IsNil(o.DestinationIp) {
		var ret []string
		return ret
	}
	return o.DestinationIp
}

// GetDestinationIpOk returns a tuple with the DestinationIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetDestinationIpOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.DestinationIp) {
		return nil, false
	}
	return o.DestinationIp, true
}

// HasDestinationIp returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasDestinationIp() bool {
	if o != nil && !utils.IsNil(o.DestinationIp) {
		return true
	}

	return false
}

// SetDestinationIp gets a reference to the given []string and assigns it to the DestinationIp field.
func (o *RealUserEndpointTestResultRequestFilter) SetDestinationIp(v []string) {
	o.DestinationIp = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetDomain() []string {
	if o == nil || utils.IsNil(o.Domain) {
		var ret []string
		return ret
	}
	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetDomainOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasDomain() bool {
	if o != nil && !utils.IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given []string and assigns it to the Domain field.
func (o *RealUserEndpointTestResultRequestFilter) SetDomain(v []string) {
	o.Domain = v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetTrigger() []Trigger {
	if o == nil || utils.IsNil(o.Trigger) {
		var ret []Trigger
		return ret
	}
	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetTriggerOk() ([]Trigger, bool) {
	if o == nil || utils.IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasTrigger() bool {
	if o != nil && !utils.IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given []Trigger and assigns it to the Trigger field.
func (o *RealUserEndpointTestResultRequestFilter) SetTrigger(v []Trigger) {
	o.Trigger = v
}

// GetVisitedSite returns the VisitedSite field value if set, zero value otherwise.
func (o *RealUserEndpointTestResultRequestFilter) GetVisitedSite() []string {
	if o == nil || utils.IsNil(o.VisitedSite) {
		var ret []string
		return ret
	}
	return o.VisitedSite
}

// GetVisitedSiteOk returns a tuple with the VisitedSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestResultRequestFilter) GetVisitedSiteOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.VisitedSite) {
		return nil, false
	}
	return o.VisitedSite, true
}

// HasVisitedSite returns a boolean if a field has been set.
func (o *RealUserEndpointTestResultRequestFilter) HasVisitedSite() bool {
	if o != nil && !utils.IsNil(o.VisitedSite) {
		return true
	}

	return false
}

// SetVisitedSite gets a reference to the given []string and assigns it to the VisitedSite field.
func (o *RealUserEndpointTestResultRequestFilter) SetVisitedSite(v []string) {
	o.VisitedSite = v
}

func (o RealUserEndpointTestResultRequestFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealUserEndpointTestResultRequestFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !utils.IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !utils.IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !utils.IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !utils.IsNil(o.ProxyTarget) {
		toSerialize["proxyTarget"] = o.ProxyTarget
	}
	if !utils.IsNil(o.VpnTarget) {
		toSerialize["vpnTarget"] = o.VpnTarget
	}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.NetworkId) {
		toSerialize["networkId"] = o.NetworkId
	}
	if !utils.IsNil(o.Ssid) {
		toSerialize["ssid"] = o.Ssid
	}
	if !utils.IsNil(o.Bssid) {
		toSerialize["bssid"] = o.Bssid
	}
	if !utils.IsNil(o.DestinationIp) {
		toSerialize["destinationIp"] = o.DestinationIp
	}
	if !utils.IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !utils.IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !utils.IsNil(o.VisitedSite) {
		toSerialize["visitedSite"] = o.VisitedSite
	}
	return toSerialize, nil
}

type NullableRealUserEndpointTestResultRequestFilter struct {
	value *RealUserEndpointTestResultRequestFilter
	isSet bool
}

func (v NullableRealUserEndpointTestResultRequestFilter) Get() *RealUserEndpointTestResultRequestFilter {
	return v.value
}

func (v *NullableRealUserEndpointTestResultRequestFilter) Set(val *RealUserEndpointTestResultRequestFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableRealUserEndpointTestResultRequestFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableRealUserEndpointTestResultRequestFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealUserEndpointTestResultRequestFilter(val *RealUserEndpointTestResultRequestFilter) *NullableRealUserEndpointTestResultRequestFilter {
	return &NullableRealUserEndpointTestResultRequestFilter{value: val, isSet: true}
}

func (v NullableRealUserEndpointTestResultRequestFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealUserEndpointTestResultRequestFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


