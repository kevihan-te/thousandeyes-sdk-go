/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// EndpointTestProtocol Protocol requested for the test.
type EndpointTestProtocol string

// List of EndpointTestProtocol
const (
	ENDPOINTTESTPROTOCOL_ICMP EndpointTestProtocol = "icmp"
	ENDPOINTTESTPROTOCOL_ICMP_WITH_TCP_CONNECT EndpointTestProtocol = "icmp-with-tcp-connect"
	ENDPOINTTESTPROTOCOL_TCP EndpointTestProtocol = "tcp"
	ENDPOINTTESTPROTOCOL_PREFER_TCP EndpointTestProtocol = "prefer-tcp"
	ENDPOINTTESTPROTOCOL_AST_AUTODETECT EndpointTestProtocol = "ast-autodetect"
	ENDPOINTTESTPROTOCOL_AUTODETECT EndpointTestProtocol = "autodetect"
)

// All allowed values of EndpointTestProtocol enum
var AllowedEndpointTestProtocolEnumValues = []EndpointTestProtocol{
	"icmp",
	"icmp-with-tcp-connect",
	"tcp",
	"prefer-tcp",
	"ast-autodetect",
	"autodetect",
}

func (v *EndpointTestProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointTestProtocol(value)
	for _, existing := range AllowedEndpointTestProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointTestProtocol", value)
}

// NewEndpointTestProtocolFromValue returns a pointer to a valid EndpointTestProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTestProtocolFromValue(v string) (*EndpointTestProtocol, error) {
	ev := EndpointTestProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointTestProtocol: valid values are %v", v, AllowedEndpointTestProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointTestProtocol) IsValid() bool {
	for _, existing := range AllowedEndpointTestProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointTestProtocol value
func (v EndpointTestProtocol) Ptr() *EndpointTestProtocol {
	return &v
}

type NullableEndpointTestProtocol struct {
	value *EndpointTestProtocol
	isSet bool
}

func (v NullableEndpointTestProtocol) Get() *EndpointTestProtocol {
	return v.value
}

func (v *NullableEndpointTestProtocol) Set(val *EndpointTestProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointTestProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointTestProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointTestProtocol(val *EndpointTestProtocol) *NullableEndpointTestProtocol {
	return &NullableEndpointTestProtocol{value: val, isSet: true}
}

func (v NullableEndpointTestProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointTestProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

