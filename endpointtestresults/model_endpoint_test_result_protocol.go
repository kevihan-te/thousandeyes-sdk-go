/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// EndpointTestResultProtocol Protocol used to perform the test.
type EndpointTestResultProtocol string

// List of EndpointTestResultProtocol
const (
	ENDPOINTTESTRESULTPROTOCOL_ICMP EndpointTestResultProtocol = "icmp"
	ENDPOINTTESTRESULTPROTOCOL_TCP EndpointTestResultProtocol = "tcp"
	ENDPOINTTESTRESULTPROTOCOL_UDP EndpointTestResultProtocol = "udp"
	ENDPOINTTESTRESULTPROTOCOL_PREFER_TCP EndpointTestResultProtocol = "prefer-tcp"
	ENDPOINTTESTRESULTPROTOCOL_AST_AUTODETECT EndpointTestResultProtocol = "ast-autodetect"
	ENDPOINTTESTRESULTPROTOCOL_AUTODETECT EndpointTestResultProtocol = "autodetect"
	ENDPOINTTESTRESULTPROTOCOL_UNKNOWN EndpointTestResultProtocol = "unknown"
)

// All allowed values of EndpointTestResultProtocol enum
var AllowedEndpointTestResultProtocolEnumValues = []EndpointTestResultProtocol{
	"icmp",
	"tcp",
	"udp",
	"prefer-tcp",
	"ast-autodetect",
	"autodetect",
	"unknown",
}

func (v *EndpointTestResultProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointTestResultProtocol(value)
	for _, existing := range AllowedEndpointTestResultProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointTestResultProtocol", value)
}

// NewEndpointTestResultProtocolFromValue returns a pointer to a valid EndpointTestResultProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTestResultProtocolFromValue(v string) (*EndpointTestResultProtocol, error) {
	ev := EndpointTestResultProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointTestResultProtocol: valid values are %v", v, AllowedEndpointTestResultProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointTestResultProtocol) IsValid() bool {
	for _, existing := range AllowedEndpointTestResultProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointTestResultProtocol value
func (v EndpointTestResultProtocol) Ptr() *EndpointTestResultProtocol {
	return &v
}

type NullableEndpointTestResultProtocol struct {
	value *EndpointTestResultProtocol
	isSet bool
}

func (v NullableEndpointTestResultProtocol) Get() *EndpointTestResultProtocol {
	return v.value
}

func (v *NullableEndpointTestResultProtocol) Set(val *EndpointTestResultProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointTestResultProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointTestResultProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointTestResultProtocol(val *EndpointTestResultProtocol) *NullableEndpointTestResultProtocol {
	return &NullableEndpointTestResultProtocol{value: val, isSet: true}
}

func (v NullableEndpointTestResultProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointTestResultProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

