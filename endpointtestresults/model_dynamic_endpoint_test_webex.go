/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the DynamicEndpointTestWebex type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DynamicEndpointTestWebex{}

// DynamicEndpointTestWebex Contains object with webex information. Only returned for webex applications.
type DynamicEndpointTestWebex struct {
	// Webex conference ID.
	ConferenceId *string `json:"conferenceId,omitempty"`
	// Webex conference correlation ID.
	CorrelationId *string `json:"correlationId,omitempty"`
	// Webex calling local sip session ID.
	LocalSipSessionId *string `json:"localSipSessionId,omitempty"`
	// Webex calling remote sip session ID.
	RemoteSipSessionId *string `json:"remoteSipSessionId,omitempty"`
}

// NewDynamicEndpointTestWebex instantiates a new DynamicEndpointTestWebex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicEndpointTestWebex() *DynamicEndpointTestWebex {
	this := DynamicEndpointTestWebex{}
	return &this
}

// NewDynamicEndpointTestWebexWithDefaults instantiates a new DynamicEndpointTestWebex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicEndpointTestWebexWithDefaults() *DynamicEndpointTestWebex {
	this := DynamicEndpointTestWebex{}
	return &this
}

// GetConferenceId returns the ConferenceId field value if set, zero value otherwise.
func (o *DynamicEndpointTestWebex) GetConferenceId() string {
	if o == nil || utils.IsNil(o.ConferenceId) {
		var ret string
		return ret
	}
	return *o.ConferenceId
}

// GetConferenceIdOk returns a tuple with the ConferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicEndpointTestWebex) GetConferenceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ConferenceId) {
		return nil, false
	}
	return o.ConferenceId, true
}

// HasConferenceId returns a boolean if a field has been set.
func (o *DynamicEndpointTestWebex) HasConferenceId() bool {
	if o != nil && !utils.IsNil(o.ConferenceId) {
		return true
	}

	return false
}

// SetConferenceId gets a reference to the given string and assigns it to the ConferenceId field.
func (o *DynamicEndpointTestWebex) SetConferenceId(v string) {
	o.ConferenceId = &v
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *DynamicEndpointTestWebex) GetCorrelationId() string {
	if o == nil || utils.IsNil(o.CorrelationId) {
		var ret string
		return ret
	}
	return *o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicEndpointTestWebex) GetCorrelationIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CorrelationId) {
		return nil, false
	}
	return o.CorrelationId, true
}

// HasCorrelationId returns a boolean if a field has been set.
func (o *DynamicEndpointTestWebex) HasCorrelationId() bool {
	if o != nil && !utils.IsNil(o.CorrelationId) {
		return true
	}

	return false
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *DynamicEndpointTestWebex) SetCorrelationId(v string) {
	o.CorrelationId = &v
}

// GetLocalSipSessionId returns the LocalSipSessionId field value if set, zero value otherwise.
func (o *DynamicEndpointTestWebex) GetLocalSipSessionId() string {
	if o == nil || utils.IsNil(o.LocalSipSessionId) {
		var ret string
		return ret
	}
	return *o.LocalSipSessionId
}

// GetLocalSipSessionIdOk returns a tuple with the LocalSipSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicEndpointTestWebex) GetLocalSipSessionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LocalSipSessionId) {
		return nil, false
	}
	return o.LocalSipSessionId, true
}

// HasLocalSipSessionId returns a boolean if a field has been set.
func (o *DynamicEndpointTestWebex) HasLocalSipSessionId() bool {
	if o != nil && !utils.IsNil(o.LocalSipSessionId) {
		return true
	}

	return false
}

// SetLocalSipSessionId gets a reference to the given string and assigns it to the LocalSipSessionId field.
func (o *DynamicEndpointTestWebex) SetLocalSipSessionId(v string) {
	o.LocalSipSessionId = &v
}

// GetRemoteSipSessionId returns the RemoteSipSessionId field value if set, zero value otherwise.
func (o *DynamicEndpointTestWebex) GetRemoteSipSessionId() string {
	if o == nil || utils.IsNil(o.RemoteSipSessionId) {
		var ret string
		return ret
	}
	return *o.RemoteSipSessionId
}

// GetRemoteSipSessionIdOk returns a tuple with the RemoteSipSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DynamicEndpointTestWebex) GetRemoteSipSessionIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.RemoteSipSessionId) {
		return nil, false
	}
	return o.RemoteSipSessionId, true
}

// HasRemoteSipSessionId returns a boolean if a field has been set.
func (o *DynamicEndpointTestWebex) HasRemoteSipSessionId() bool {
	if o != nil && !utils.IsNil(o.RemoteSipSessionId) {
		return true
	}

	return false
}

// SetRemoteSipSessionId gets a reference to the given string and assigns it to the RemoteSipSessionId field.
func (o *DynamicEndpointTestWebex) SetRemoteSipSessionId(v string) {
	o.RemoteSipSessionId = &v
}

func (o DynamicEndpointTestWebex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicEndpointTestWebex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ConferenceId) {
		toSerialize["conferenceId"] = o.ConferenceId
	}
	if !utils.IsNil(o.CorrelationId) {
		toSerialize["correlationId"] = o.CorrelationId
	}
	if !utils.IsNil(o.LocalSipSessionId) {
		toSerialize["localSipSessionId"] = o.LocalSipSessionId
	}
	if !utils.IsNil(o.RemoteSipSessionId) {
		toSerialize["remoteSipSessionId"] = o.RemoteSipSessionId
	}
	return toSerialize, nil
}

type NullableDynamicEndpointTestWebex struct {
	value *DynamicEndpointTestWebex
	isSet bool
}

func (v NullableDynamicEndpointTestWebex) Get() *DynamicEndpointTestWebex {
	return v.value
}

func (v *NullableDynamicEndpointTestWebex) Set(val *DynamicEndpointTestWebex) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicEndpointTestWebex) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicEndpointTestWebex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicEndpointTestWebex(val *DynamicEndpointTestWebex) *NullableDynamicEndpointTestWebex {
	return &NullableDynamicEndpointTestWebex{value: val, isSet: true}
}

func (v NullableDynamicEndpointTestWebex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicEndpointTestWebex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


