/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// EndpointScheduledTest - struct for EndpointScheduledTest
type EndpointScheduledTest struct {
	EndpointAgentToServerTest *EndpointAgentToServerTest
	EndpointHttpServerTest *EndpointHttpServerTest
}

// EndpointAgentToServerTestAsEndpointScheduledTest is a convenience function that returns EndpointAgentToServerTest wrapped in EndpointScheduledTest
func EndpointAgentToServerTestAsEndpointScheduledTest(v *EndpointAgentToServerTest) EndpointScheduledTest {
	return EndpointScheduledTest{
		EndpointAgentToServerTest: v,
	}
}

// EndpointHttpServerTestAsEndpointScheduledTest is a convenience function that returns EndpointHttpServerTest wrapped in EndpointScheduledTest
func EndpointHttpServerTestAsEndpointScheduledTest(v *EndpointHttpServerTest) EndpointScheduledTest {
	return EndpointScheduledTest{
		EndpointHttpServerTest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EndpointScheduledTest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = utils.NewStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'agent-to-server'
	if jsonDict["type"] == "agent-to-server" {
		// try to unmarshal JSON data into EndpointAgentToServerTest
		err = json.Unmarshal(data, &dst.EndpointAgentToServerTest)
		if err == nil {
			return nil // data stored in dst.EndpointAgentToServerTest, return on the first match
		} else {
			dst.EndpointAgentToServerTest = nil
			return fmt.Errorf("failed to unmarshal EndpointScheduledTest as EndpointAgentToServerTest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'http-server'
	if jsonDict["type"] == "http-server" {
		// try to unmarshal JSON data into EndpointHttpServerTest
		err = json.Unmarshal(data, &dst.EndpointHttpServerTest)
		if err == nil {
			return nil // data stored in dst.EndpointHttpServerTest, return on the first match
		} else {
			dst.EndpointHttpServerTest = nil
			return fmt.Errorf("failed to unmarshal EndpointScheduledTest as EndpointHttpServerTest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EndpointAgentToServerTest'
	if jsonDict["type"] == "EndpointAgentToServerTest" {
		// try to unmarshal JSON data into EndpointAgentToServerTest
		err = json.Unmarshal(data, &dst.EndpointAgentToServerTest)
		if err == nil {
			return nil // data stored in dst.EndpointAgentToServerTest, return on the first match
		} else {
			dst.EndpointAgentToServerTest = nil
			return fmt.Errorf("failed to unmarshal EndpointScheduledTest as EndpointAgentToServerTest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EndpointHttpServerTest'
	if jsonDict["type"] == "EndpointHttpServerTest" {
		// try to unmarshal JSON data into EndpointHttpServerTest
		err = json.Unmarshal(data, &dst.EndpointHttpServerTest)
		if err == nil {
			return nil // data stored in dst.EndpointHttpServerTest, return on the first match
		} else {
			dst.EndpointHttpServerTest = nil
			return fmt.Errorf("failed to unmarshal EndpointScheduledTest as EndpointHttpServerTest: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EndpointScheduledTest) MarshalJSON() ([]byte, error) {
	if src.EndpointAgentToServerTest != nil {
		return json.Marshal(&src.EndpointAgentToServerTest)
	}

	if src.EndpointHttpServerTest != nil {
		return json.Marshal(&src.EndpointHttpServerTest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EndpointScheduledTest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EndpointAgentToServerTest != nil {
		return obj.EndpointAgentToServerTest
	}

	if obj.EndpointHttpServerTest != nil {
		return obj.EndpointHttpServerTest
	}

	// all schemas are nil
	return nil
}

type NullableEndpointScheduledTest struct {
	value *EndpointScheduledTest
	isSet bool
}

func (v NullableEndpointScheduledTest) Get() *EndpointScheduledTest {
	return v.value
}

func (v *NullableEndpointScheduledTest) Set(val *EndpointScheduledTest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointScheduledTest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointScheduledTest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointScheduledTest(val *EndpointScheduledTest) *NullableEndpointScheduledTest {
	return &NullableEndpointScheduledTest{value: val, isSet: true}
}

func (v NullableEndpointScheduledTest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointScheduledTest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


