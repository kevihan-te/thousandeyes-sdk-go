/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// EndpointIpVersionTemplate IP version the test should use for network tests.
type EndpointIpVersionTemplate string

// List of EndpointIpVersionTemplate
const (
	ENDPOINTIPVERSIONTEMPLATE_V4_ONLY EndpointIpVersionTemplate = "V4_ONLY"
	ENDPOINTIPVERSIONTEMPLATE_V6_ONLY EndpointIpVersionTemplate = "V6_ONLY"
	ENDPOINTIPVERSIONTEMPLATE_V6_PREFER EndpointIpVersionTemplate = "V6_PREFER"
	ENDPOINTIPVERSIONTEMPLATE_OS_DEFAULT EndpointIpVersionTemplate = "OS_DEFAULT"
)

// All allowed values of EndpointIpVersionTemplate enum
var AllowedEndpointIpVersionTemplateEnumValues = []EndpointIpVersionTemplate{
	"V4_ONLY",
	"V6_ONLY",
	"V6_PREFER",
	"OS_DEFAULT",
}

func (v *EndpointIpVersionTemplate) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointIpVersionTemplate(value)
	for _, existing := range AllowedEndpointIpVersionTemplateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointIpVersionTemplate", value)
}

// NewEndpointIpVersionTemplateFromValue returns a pointer to a valid EndpointIpVersionTemplate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointIpVersionTemplateFromValue(v string) (*EndpointIpVersionTemplate, error) {
	ev := EndpointIpVersionTemplate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointIpVersionTemplate: valid values are %v", v, AllowedEndpointIpVersionTemplateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointIpVersionTemplate) IsValid() bool {
	for _, existing := range AllowedEndpointIpVersionTemplateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointIpVersionTemplate value
func (v EndpointIpVersionTemplate) Ptr() *EndpointIpVersionTemplate {
	return &v
}

type NullableEndpointIpVersionTemplate struct {
	value *EndpointIpVersionTemplate
	isSet bool
}

func (v NullableEndpointIpVersionTemplate) Get() *EndpointIpVersionTemplate {
	return v.value
}

func (v *NullableEndpointIpVersionTemplate) Set(val *EndpointIpVersionTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointIpVersionTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointIpVersionTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointIpVersionTemplate(val *EndpointIpVersionTemplate) *NullableEndpointIpVersionTemplate {
	return &NullableEndpointIpVersionTemplate{value: val, isSet: true}
}

func (v NullableEndpointIpVersionTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointIpVersionTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

