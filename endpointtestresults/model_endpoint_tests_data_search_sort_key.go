/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// EndpointTestsDataSearchSortKey the model 'EndpointTestsDataSearchSortKey'
type EndpointTestsDataSearchSortKey string

// List of EndpointTestsDataSearchSortKey
const (
	ENDPOINTTESTSDATASEARCHSORTKEY_ROUND_ID EndpointTestsDataSearchSortKey = "round-id"
	ENDPOINTTESTSDATASEARCHSORTKEY_LOSS EndpointTestsDataSearchSortKey = "loss"
	ENDPOINTTESTSDATASEARCHSORTKEY_LATENCY EndpointTestsDataSearchSortKey = "latency"
	ENDPOINTTESTSDATASEARCHSORTKEY_JITTER EndpointTestsDataSearchSortKey = "jitter"
	ENDPOINTTESTSDATASEARCHSORTKEY_CPU EndpointTestsDataSearchSortKey = "cpu"
	ENDPOINTTESTSDATASEARCHSORTKEY_MEMORY EndpointTestsDataSearchSortKey = "memory"
	ENDPOINTTESTSDATASEARCHSORTKEY_SIGNAL_QUALITY EndpointTestsDataSearchSortKey = "signal-quality"
)

// All allowed values of EndpointTestsDataSearchSortKey enum
var AllowedEndpointTestsDataSearchSortKeyEnumValues = []EndpointTestsDataSearchSortKey{
	"round-id",
	"loss",
	"latency",
	"jitter",
	"cpu",
	"memory",
	"signal-quality",
}

func (v *EndpointTestsDataSearchSortKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointTestsDataSearchSortKey(value)
	for _, existing := range AllowedEndpointTestsDataSearchSortKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointTestsDataSearchSortKey", value)
}

// NewEndpointTestsDataSearchSortKeyFromValue returns a pointer to a valid EndpointTestsDataSearchSortKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTestsDataSearchSortKeyFromValue(v string) (*EndpointTestsDataSearchSortKey, error) {
	ev := EndpointTestsDataSearchSortKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointTestsDataSearchSortKey: valid values are %v", v, AllowedEndpointTestsDataSearchSortKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointTestsDataSearchSortKey) IsValid() bool {
	for _, existing := range AllowedEndpointTestsDataSearchSortKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointTestsDataSearchSortKey value
func (v EndpointTestsDataSearchSortKey) Ptr() *EndpointTestsDataSearchSortKey {
	return &v
}

type NullableEndpointTestsDataSearchSortKey struct {
	value *EndpointTestsDataSearchSortKey
	isSet bool
}

func (v NullableEndpointTestsDataSearchSortKey) Get() *EndpointTestsDataSearchSortKey {
	return v.value
}

func (v *NullableEndpointTestsDataSearchSortKey) Set(val *EndpointTestsDataSearchSortKey) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointTestsDataSearchSortKey) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointTestsDataSearchSortKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointTestsDataSearchSortKey(val *EndpointTestsDataSearchSortKey) *NullableEndpointTestsDataSearchSortKey {
	return &NullableEndpointTestsDataSearchSortKey{value: val, isSet: true}
}

func (v NullableEndpointTestsDataSearchSortKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointTestsDataSearchSortKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

