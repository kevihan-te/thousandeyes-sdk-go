/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NetworkProxy type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NetworkProxy{}

// NetworkProxy struct for NetworkProxy
type NetworkProxy struct {
	// Proxy bypass expression.
	Bypass *string `json:"bypass,omitempty"`
	// Proxy mode.
	Proxy *string `json:"proxy,omitempty"`
}

// NewNetworkProxy instantiates a new NetworkProxy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkProxy() *NetworkProxy {
	this := NetworkProxy{}
	return &this
}

// NewNetworkProxyWithDefaults instantiates a new NetworkProxy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkProxyWithDefaults() *NetworkProxy {
	this := NetworkProxy{}
	return &this
}

// GetBypass returns the Bypass field value if set, zero value otherwise.
func (o *NetworkProxy) GetBypass() string {
	if o == nil || utils.IsNil(o.Bypass) {
		var ret string
		return ret
	}
	return *o.Bypass
}

// GetBypassOk returns a tuple with the Bypass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProxy) GetBypassOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Bypass) {
		return nil, false
	}
	return o.Bypass, true
}

// HasBypass returns a boolean if a field has been set.
func (o *NetworkProxy) HasBypass() bool {
	if o != nil && !utils.IsNil(o.Bypass) {
		return true
	}

	return false
}

// SetBypass gets a reference to the given string and assigns it to the Bypass field.
func (o *NetworkProxy) SetBypass(v string) {
	o.Bypass = &v
}

// GetProxy returns the Proxy field value if set, zero value otherwise.
func (o *NetworkProxy) GetProxy() string {
	if o == nil || utils.IsNil(o.Proxy) {
		var ret string
		return ret
	}
	return *o.Proxy
}

// GetProxyOk returns a tuple with the Proxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProxy) GetProxyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Proxy) {
		return nil, false
	}
	return o.Proxy, true
}

// HasProxy returns a boolean if a field has been set.
func (o *NetworkProxy) HasProxy() bool {
	if o != nil && !utils.IsNil(o.Proxy) {
		return true
	}

	return false
}

// SetProxy gets a reference to the given string and assigns it to the Proxy field.
func (o *NetworkProxy) SetProxy(v string) {
	o.Proxy = &v
}

func (o NetworkProxy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkProxy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Bypass) {
		toSerialize["bypass"] = o.Bypass
	}
	if !utils.IsNil(o.Proxy) {
		toSerialize["proxy"] = o.Proxy
	}
	return toSerialize, nil
}

type NullableNetworkProxy struct {
	value *NetworkProxy
	isSet bool
}

func (v NullableNetworkProxy) Get() *NetworkProxy {
	return v.value
}

func (v *NullableNetworkProxy) Set(val *NetworkProxy) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkProxy) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkProxy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkProxy(val *NetworkProxy) *NullableNetworkProxy {
	return &NullableNetworkProxy{value: val, isSet: true}
}

func (v NullableNetworkProxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkProxy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


