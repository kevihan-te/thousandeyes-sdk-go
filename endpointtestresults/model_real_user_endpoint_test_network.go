/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the RealUserEndpointTestNetwork type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RealUserEndpointTestNetwork{}

// RealUserEndpointTestNetwork Contains details about network profile and conditions during session.
type RealUserEndpointTestNetwork struct {
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`
	SystemMetrics *SystemMetrics `json:"systemMetrics,omitempty"`
	GatewayPing *GatewayNetworkPing `json:"gatewayPing,omitempty"`
	Ping *TargetNetworkPing `json:"ping,omitempty"`
	Traceroute *TargetTraceroute `json:"traceroute,omitempty"`
	// Represents the number of milliseconds required to establish TCP connectivity with the target.
	ConnectRtt *float64 `json:"connectRtt,omitempty"`
	// Set to `true` if network target is blocking ICMP echo (ping) queries.
	IsIcmpBlocked *bool `json:"isIcmpBlocked,omitempty"`
	// Array of string representing possible network errors.
	Errors []string `json:"errors,omitempty"`
	VpnPing *VpnNetworkPing `json:"vpnPing,omitempty"`
	VpnTraceroute *VpnTraceroute `json:"vpnTraceroute,omitempty"`
}

// NewRealUserEndpointTestNetwork instantiates a new RealUserEndpointTestNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealUserEndpointTestNetwork() *RealUserEndpointTestNetwork {
	this := RealUserEndpointTestNetwork{}
	return &this
}

// NewRealUserEndpointTestNetworkWithDefaults instantiates a new RealUserEndpointTestNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealUserEndpointTestNetworkWithDefaults() *RealUserEndpointTestNetwork {
	this := RealUserEndpointTestNetwork{}
	return &this
}

// GetNetworkProfile returns the NetworkProfile field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetNetworkProfile() NetworkProfile {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		var ret NetworkProfile
		return ret
	}
	return *o.NetworkProfile
}

// GetNetworkProfileOk returns a tuple with the NetworkProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetNetworkProfileOk() (*NetworkProfile, bool) {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		return nil, false
	}
	return o.NetworkProfile, true
}

// HasNetworkProfile returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasNetworkProfile() bool {
	if o != nil && !utils.IsNil(o.NetworkProfile) {
		return true
	}

	return false
}

// SetNetworkProfile gets a reference to the given NetworkProfile and assigns it to the NetworkProfile field.
func (o *RealUserEndpointTestNetwork) SetNetworkProfile(v NetworkProfile) {
	o.NetworkProfile = &v
}

// GetSystemMetrics returns the SystemMetrics field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetSystemMetrics() SystemMetrics {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		var ret SystemMetrics
		return ret
	}
	return *o.SystemMetrics
}

// GetSystemMetricsOk returns a tuple with the SystemMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetSystemMetricsOk() (*SystemMetrics, bool) {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		return nil, false
	}
	return o.SystemMetrics, true
}

// HasSystemMetrics returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasSystemMetrics() bool {
	if o != nil && !utils.IsNil(o.SystemMetrics) {
		return true
	}

	return false
}

// SetSystemMetrics gets a reference to the given SystemMetrics and assigns it to the SystemMetrics field.
func (o *RealUserEndpointTestNetwork) SetSystemMetrics(v SystemMetrics) {
	o.SystemMetrics = &v
}

// GetGatewayPing returns the GatewayPing field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetGatewayPing() GatewayNetworkPing {
	if o == nil || utils.IsNil(o.GatewayPing) {
		var ret GatewayNetworkPing
		return ret
	}
	return *o.GatewayPing
}

// GetGatewayPingOk returns a tuple with the GatewayPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetGatewayPingOk() (*GatewayNetworkPing, bool) {
	if o == nil || utils.IsNil(o.GatewayPing) {
		return nil, false
	}
	return o.GatewayPing, true
}

// HasGatewayPing returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasGatewayPing() bool {
	if o != nil && !utils.IsNil(o.GatewayPing) {
		return true
	}

	return false
}

// SetGatewayPing gets a reference to the given GatewayNetworkPing and assigns it to the GatewayPing field.
func (o *RealUserEndpointTestNetwork) SetGatewayPing(v GatewayNetworkPing) {
	o.GatewayPing = &v
}

// GetPing returns the Ping field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetPing() TargetNetworkPing {
	if o == nil || utils.IsNil(o.Ping) {
		var ret TargetNetworkPing
		return ret
	}
	return *o.Ping
}

// GetPingOk returns a tuple with the Ping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetPingOk() (*TargetNetworkPing, bool) {
	if o == nil || utils.IsNil(o.Ping) {
		return nil, false
	}
	return o.Ping, true
}

// HasPing returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasPing() bool {
	if o != nil && !utils.IsNil(o.Ping) {
		return true
	}

	return false
}

// SetPing gets a reference to the given TargetNetworkPing and assigns it to the Ping field.
func (o *RealUserEndpointTestNetwork) SetPing(v TargetNetworkPing) {
	o.Ping = &v
}

// GetTraceroute returns the Traceroute field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetTraceroute() TargetTraceroute {
	if o == nil || utils.IsNil(o.Traceroute) {
		var ret TargetTraceroute
		return ret
	}
	return *o.Traceroute
}

// GetTracerouteOk returns a tuple with the Traceroute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetTracerouteOk() (*TargetTraceroute, bool) {
	if o == nil || utils.IsNil(o.Traceroute) {
		return nil, false
	}
	return o.Traceroute, true
}

// HasTraceroute returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasTraceroute() bool {
	if o != nil && !utils.IsNil(o.Traceroute) {
		return true
	}

	return false
}

// SetTraceroute gets a reference to the given TargetTraceroute and assigns it to the Traceroute field.
func (o *RealUserEndpointTestNetwork) SetTraceroute(v TargetTraceroute) {
	o.Traceroute = &v
}

// GetConnectRtt returns the ConnectRtt field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetConnectRtt() float64 {
	if o == nil || utils.IsNil(o.ConnectRtt) {
		var ret float64
		return ret
	}
	return *o.ConnectRtt
}

// GetConnectRttOk returns a tuple with the ConnectRtt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetConnectRttOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.ConnectRtt) {
		return nil, false
	}
	return o.ConnectRtt, true
}

// HasConnectRtt returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasConnectRtt() bool {
	if o != nil && !utils.IsNil(o.ConnectRtt) {
		return true
	}

	return false
}

// SetConnectRtt gets a reference to the given float64 and assigns it to the ConnectRtt field.
func (o *RealUserEndpointTestNetwork) SetConnectRtt(v float64) {
	o.ConnectRtt = &v
}

// GetIsIcmpBlocked returns the IsIcmpBlocked field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetIsIcmpBlocked() bool {
	if o == nil || utils.IsNil(o.IsIcmpBlocked) {
		var ret bool
		return ret
	}
	return *o.IsIcmpBlocked
}

// GetIsIcmpBlockedOk returns a tuple with the IsIcmpBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetIsIcmpBlockedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsIcmpBlocked) {
		return nil, false
	}
	return o.IsIcmpBlocked, true
}

// HasIsIcmpBlocked returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasIsIcmpBlocked() bool {
	if o != nil && !utils.IsNil(o.IsIcmpBlocked) {
		return true
	}

	return false
}

// SetIsIcmpBlocked gets a reference to the given bool and assigns it to the IsIcmpBlocked field.
func (o *RealUserEndpointTestNetwork) SetIsIcmpBlocked(v bool) {
	o.IsIcmpBlocked = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetErrors() []string {
	if o == nil || utils.IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetErrorsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasErrors() bool {
	if o != nil && !utils.IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *RealUserEndpointTestNetwork) SetErrors(v []string) {
	o.Errors = v
}

// GetVpnPing returns the VpnPing field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetVpnPing() VpnNetworkPing {
	if o == nil || utils.IsNil(o.VpnPing) {
		var ret VpnNetworkPing
		return ret
	}
	return *o.VpnPing
}

// GetVpnPingOk returns a tuple with the VpnPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetVpnPingOk() (*VpnNetworkPing, bool) {
	if o == nil || utils.IsNil(o.VpnPing) {
		return nil, false
	}
	return o.VpnPing, true
}

// HasVpnPing returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasVpnPing() bool {
	if o != nil && !utils.IsNil(o.VpnPing) {
		return true
	}

	return false
}

// SetVpnPing gets a reference to the given VpnNetworkPing and assigns it to the VpnPing field.
func (o *RealUserEndpointTestNetwork) SetVpnPing(v VpnNetworkPing) {
	o.VpnPing = &v
}

// GetVpnTraceroute returns the VpnTraceroute field value if set, zero value otherwise.
func (o *RealUserEndpointTestNetwork) GetVpnTraceroute() VpnTraceroute {
	if o == nil || utils.IsNil(o.VpnTraceroute) {
		var ret VpnTraceroute
		return ret
	}
	return *o.VpnTraceroute
}

// GetVpnTracerouteOk returns a tuple with the VpnTraceroute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestNetwork) GetVpnTracerouteOk() (*VpnTraceroute, bool) {
	if o == nil || utils.IsNil(o.VpnTraceroute) {
		return nil, false
	}
	return o.VpnTraceroute, true
}

// HasVpnTraceroute returns a boolean if a field has been set.
func (o *RealUserEndpointTestNetwork) HasVpnTraceroute() bool {
	if o != nil && !utils.IsNil(o.VpnTraceroute) {
		return true
	}

	return false
}

// SetVpnTraceroute gets a reference to the given VpnTraceroute and assigns it to the VpnTraceroute field.
func (o *RealUserEndpointTestNetwork) SetVpnTraceroute(v VpnTraceroute) {
	o.VpnTraceroute = &v
}

func (o RealUserEndpointTestNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealUserEndpointTestNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.NetworkProfile) {
		toSerialize["networkProfile"] = o.NetworkProfile
	}
	if !utils.IsNil(o.SystemMetrics) {
		toSerialize["systemMetrics"] = o.SystemMetrics
	}
	if !utils.IsNil(o.GatewayPing) {
		toSerialize["gatewayPing"] = o.GatewayPing
	}
	if !utils.IsNil(o.Ping) {
		toSerialize["ping"] = o.Ping
	}
	if !utils.IsNil(o.Traceroute) {
		toSerialize["traceroute"] = o.Traceroute
	}
	if !utils.IsNil(o.ConnectRtt) {
		toSerialize["connectRtt"] = o.ConnectRtt
	}
	if !utils.IsNil(o.IsIcmpBlocked) {
		toSerialize["isIcmpBlocked"] = o.IsIcmpBlocked
	}
	if !utils.IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !utils.IsNil(o.VpnPing) {
		toSerialize["vpnPing"] = o.VpnPing
	}
	if !utils.IsNil(o.VpnTraceroute) {
		toSerialize["vpnTraceroute"] = o.VpnTraceroute
	}
	return toSerialize, nil
}

type NullableRealUserEndpointTestNetwork struct {
	value *RealUserEndpointTestNetwork
	isSet bool
}

func (v NullableRealUserEndpointTestNetwork) Get() *RealUserEndpointTestNetwork {
	return v.value
}

func (v *NullableRealUserEndpointTestNetwork) Set(val *RealUserEndpointTestNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableRealUserEndpointTestNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableRealUserEndpointTestNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealUserEndpointTestNetwork(val *RealUserEndpointTestNetwork) *NullableRealUserEndpointTestNetwork {
	return &NullableRealUserEndpointTestNetwork{value: val, isSet: true}
}

func (v NullableRealUserEndpointTestNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealUserEndpointTestNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


