/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// UdpPathTraceModeResponse Path trace mode used by network test. Only valid when the protocol is set to UDP.
type UdpPathTraceModeResponse string

// List of UdpPathTraceModeResponse
const (
	UDPPATHTRACEMODERESPONSE_STUN_PCAP UdpPathTraceModeResponse = "stun-pcap"
	UDPPATHTRACEMODERESPONSE_UNKNOWN UdpPathTraceModeResponse = "unknown"
)

// All allowed values of UdpPathTraceModeResponse enum
var AllowedUdpPathTraceModeResponseEnumValues = []UdpPathTraceModeResponse{
	"stun-pcap",
	"unknown",
}

func (v *UdpPathTraceModeResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UdpPathTraceModeResponse(value)
	for _, existing := range AllowedUdpPathTraceModeResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UdpPathTraceModeResponse", value)
}

// NewUdpPathTraceModeResponseFromValue returns a pointer to a valid UdpPathTraceModeResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUdpPathTraceModeResponseFromValue(v string) (*UdpPathTraceModeResponse, error) {
	ev := UdpPathTraceModeResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UdpPathTraceModeResponse: valid values are %v", v, AllowedUdpPathTraceModeResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UdpPathTraceModeResponse) IsValid() bool {
	for _, existing := range AllowedUdpPathTraceModeResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UdpPathTraceModeResponse value
func (v UdpPathTraceModeResponse) Ptr() *UdpPathTraceModeResponse {
	return &v
}

type NullableUdpPathTraceModeResponse struct {
	value *UdpPathTraceModeResponse
	isSet bool
}

func (v NullableUdpPathTraceModeResponse) Get() *UdpPathTraceModeResponse {
	return v.value
}

func (v *NullableUdpPathTraceModeResponse) Set(val *UdpPathTraceModeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUdpPathTraceModeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUdpPathTraceModeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdpPathTraceModeResponse(val *UdpPathTraceModeResponse) *NullableUdpPathTraceModeResponse {
	return &NullableUdpPathTraceModeResponse{value: val, isSet: true}
}

func (v NullableUdpPathTraceModeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdpPathTraceModeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

