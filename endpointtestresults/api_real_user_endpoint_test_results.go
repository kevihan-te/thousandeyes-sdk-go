/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"bytes"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/client"
	internalerror "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/error"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/request"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// RealUserEndpointTestResultsAPIService RealUserEndpointTestResultsAPI service
type RealUserEndpointTestResultsAPIService client.Service

type ApiFilterRealUserTestsNetworkResultsRequest struct {

	ApiService *RealUserEndpointTestResultsAPIService
	aid *string
	window *string
	startDate *time.Time
	endDate *time.Time
	cursor *string
	realUserEndpointTestResultsRequest *RealUserEndpointTestResultsRequest
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiFilterRealUserTestsNetworkResultsRequest) Aid(aid string) ApiFilterRealUserTestsNetworkResultsRequest {
	r.aid = &aid
	return r
}

// A dynamic time interval up to the current time of the request. Specify the interval as a number followed by an optional type: &#x60;s&#x60; for seconds (default if no type is specified), &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days, and &#x60;w&#x60; for weeks. For a precise date range, use &#x60;startDate&#x60; and &#x60;endDate&#x60;.
func (r ApiFilterRealUserTestsNetworkResultsRequest) Window(window string) ApiFilterRealUserTestsNetworkResultsRequest {
	r.window = &window
	return r
}

// Use with the &#x60;endDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterRealUserTestsNetworkResultsRequest) StartDate(startDate time.Time) ApiFilterRealUserTestsNetworkResultsRequest {
	r.startDate = &startDate
	return r
}

// Defaults to current time the request is made. Use with the &#x60;startDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterRealUserTestsNetworkResultsRequest) EndDate(endDate time.Time) ApiFilterRealUserTestsNetworkResultsRequest {
	r.endDate = &endDate
	return r
}

// (Optional) Opaque cursor used for pagination. Clients should use &#x60;next&#x60; value from &#x60;_links&#x60; instead of this parameter.
func (r ApiFilterRealUserTestsNetworkResultsRequest) Cursor(cursor string) ApiFilterRealUserTestsNetworkResultsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiFilterRealUserTestsNetworkResultsRequest) RealUserEndpointTestResultsRequest(realUserEndpointTestResultsRequest RealUserEndpointTestResultsRequest) ApiFilterRealUserTestsNetworkResultsRequest {
	r.realUserEndpointTestResultsRequest = &realUserEndpointTestResultsRequest
	return r
}

func (r ApiFilterRealUserTestsNetworkResultsRequest) Execute() (*RealUserEndpointTestNetworkResults, *http.Response, error) {
	return r.ApiService.FilterRealUserTestsNetworkResultsExecute(r)
}

/*
FilterRealUserTestsNetworkResults List endpoint real user tests

Returns a list of all endpoint real user tests. 
Sessions from the last round are provided unless an explicit start and end is provided with `startDate`, `endDate` or `window` optional parameters.

## Request body filters
This endpoint supports complex filtering using the request body.
It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.

### Multiple filter fields
When multiple filter fields are provided, a logical `AND` is applied between the filters.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/networks/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
   "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ]
  }}'
```

### Filter field with multiple values
When a filter field contains multiple values, a logical `OR` is applied between the filter values.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/networks/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "networkId": [ "660b34109d12", "660b34109d15" ]
  }}'
```

### Combination of request parameters and body filters
```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/networks/filter?window=1w'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ],
    "networkId": [ "660b34109d12", "660b34109d15" ]
  }}'
```

Returns a `results` array of endpoint real user tests. 
Network sessions shown are from the latest round, or based on the time range specified.



 @return ApiFilterRealUserTestsNetworkResultsRequest
*/
func (a *RealUserEndpointTestResultsAPIService) FilterRealUserTestsNetworkResults() ApiFilterRealUserTestsNetworkResultsRequest {
	return ApiFilterRealUserTestsNetworkResultsRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return RealUserEndpointTestNetworkResults
func (a *RealUserEndpointTestResultsAPIService) FilterRealUserTestsNetworkResultsExecute(r ApiFilterRealUserTestsNetworkResultsRequest) (*RealUserEndpointTestNetworkResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *RealUserEndpointTestNetworkResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/real-user-tests/networks/filter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.window != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "window", r.window, "")
	}
	if r.startDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.cursor != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.realUserEndpointTestResultsRequest
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilterRealUserTestsResultsRequest struct {

	ApiService *RealUserEndpointTestResultsAPIService
	aid *string
	window *string
	startDate *time.Time
	endDate *time.Time
	cursor *string
	realUserEndpointTestResultsRequest *RealUserEndpointTestResultsRequest
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiFilterRealUserTestsResultsRequest) Aid(aid string) ApiFilterRealUserTestsResultsRequest {
	r.aid = &aid
	return r
}

// A dynamic time interval up to the current time of the request. Specify the interval as a number followed by an optional type: &#x60;s&#x60; for seconds (default if no type is specified), &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days, and &#x60;w&#x60; for weeks. For a precise date range, use &#x60;startDate&#x60; and &#x60;endDate&#x60;.
func (r ApiFilterRealUserTestsResultsRequest) Window(window string) ApiFilterRealUserTestsResultsRequest {
	r.window = &window
	return r
}

// Use with the &#x60;endDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterRealUserTestsResultsRequest) StartDate(startDate time.Time) ApiFilterRealUserTestsResultsRequest {
	r.startDate = &startDate
	return r
}

// Defaults to current time the request is made. Use with the &#x60;startDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterRealUserTestsResultsRequest) EndDate(endDate time.Time) ApiFilterRealUserTestsResultsRequest {
	r.endDate = &endDate
	return r
}

// (Optional) Opaque cursor used for pagination. Clients should use &#x60;next&#x60; value from &#x60;_links&#x60; instead of this parameter.
func (r ApiFilterRealUserTestsResultsRequest) Cursor(cursor string) ApiFilterRealUserTestsResultsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiFilterRealUserTestsResultsRequest) RealUserEndpointTestResultsRequest(realUserEndpointTestResultsRequest RealUserEndpointTestResultsRequest) ApiFilterRealUserTestsResultsRequest {
	r.realUserEndpointTestResultsRequest = &realUserEndpointTestResultsRequest
	return r
}

func (r ApiFilterRealUserTestsResultsRequest) Execute() (*RealUserEndpointTestResults, *http.Response, error) {
	return r.ApiService.FilterRealUserTestsResultsExecute(r)
}

/*
FilterRealUserTestsResults List endpoint real user tests

Returns a list of all endpoint real user tests.
Results from the last round are provided unless an explicit start and end is provided with `startDate`, `endDate` or `window` optional parameters.

## Request body filters
This endpoint supports complex filtering using the request body.
It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.

### Multiple filter fields
When multiple filter fields are provided, a logical `AND` is applied between the filters.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ]
  }}'
```

### Filter field with multiple values
When a filter field contains multiple values, a logical `OR` is applied between the filter values.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
    "searchFilters": {
      "networkId": [ "660b34109d12", "660b34109d15" ]
    }
  }'
```

### Combination of request parameters and body filters
```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/filter?window=1w'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
    "searchFilters": {
      "platform": [ "mac" ],
      "domain": [ "thousandeyes.com" ],
      "networkId": [ "660b34109d12", "660b34109d15" ]
    }
  }'
```

Returns a `results` array of endpoint real user tests.
Either the latest results, or based on the time range and body filters specified.



 @return ApiFilterRealUserTestsResultsRequest
*/
func (a *RealUserEndpointTestResultsAPIService) FilterRealUserTestsResults() ApiFilterRealUserTestsResultsRequest {
	return ApiFilterRealUserTestsResultsRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return RealUserEndpointTestResults
func (a *RealUserEndpointTestResultsAPIService) FilterRealUserTestsResultsExecute(r ApiFilterRealUserTestsResultsRequest) (*RealUserEndpointTestResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *RealUserEndpointTestResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/real-user-tests/filter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.window != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "window", r.window, "")
	}
	if r.startDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.cursor != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.realUserEndpointTestResultsRequest
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilterRealUserTestsVisitedPagesResultsRequest struct {

	ApiService *RealUserEndpointTestResultsAPIService
	aid *string
	window *string
	startDate *time.Time
	endDate *time.Time
	cursor *string
	realUserEndpointTestResultRequestFilter *RealUserEndpointTestResultRequestFilter
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) Aid(aid string) ApiFilterRealUserTestsVisitedPagesResultsRequest {
	r.aid = &aid
	return r
}

// A dynamic time interval up to the current time of the request. Specify the interval as a number followed by an optional type: &#x60;s&#x60; for seconds (default if no type is specified), &#x60;m&#x60; for minutes, &#x60;h&#x60; for hours, &#x60;d&#x60; for days, and &#x60;w&#x60; for weeks. For a precise date range, use &#x60;startDate&#x60; and &#x60;endDate&#x60;.
func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) Window(window string) ApiFilterRealUserTestsVisitedPagesResultsRequest {
	r.window = &window
	return r
}

// Use with the &#x60;endDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) StartDate(startDate time.Time) ApiFilterRealUserTestsVisitedPagesResultsRequest {
	r.startDate = &startDate
	return r
}

// Defaults to current time the request is made. Use with the &#x60;startDate&#x60; parameter. Include the complete time (hours, minutes, and seconds) in UTC time zone, following the ISO 8601 date-time format. See the example for reference. Please note that this parameter can&#39;t be used with &#x60;window&#x60;.
func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) EndDate(endDate time.Time) ApiFilterRealUserTestsVisitedPagesResultsRequest {
	r.endDate = &endDate
	return r
}

// (Optional) Opaque cursor used for pagination. Clients should use &#x60;next&#x60; value from &#x60;_links&#x60; instead of this parameter.
func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) Cursor(cursor string) ApiFilterRealUserTestsVisitedPagesResultsRequest {
	r.cursor = &cursor
	return r
}

func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) RealUserEndpointTestResultRequestFilter(realUserEndpointTestResultRequestFilter RealUserEndpointTestResultRequestFilter) ApiFilterRealUserTestsVisitedPagesResultsRequest {
	r.realUserEndpointTestResultRequestFilter = &realUserEndpointTestResultRequestFilter
	return r
}

func (r ApiFilterRealUserTestsVisitedPagesResultsRequest) Execute() (*RealUserEndpointTestPageResults, *http.Response, error) {
	return r.ApiService.FilterRealUserTestsVisitedPagesResultsExecute(r)
}

/*
FilterRealUserTestsVisitedPagesResults List endpoint real user tests visited pages

Returns a list of all endpoint real user tests visited pages. 
Sessions from the last round are provided unless an explicit start and end is provided with `startDate`, `endDate` or `window` optional parameters.

## Request body filters
This endpoint supports complex filtering using the request body.
It is important these filters remain unaltered when making use of pagination, otherwise the results will not be coherent with the original request.

### Multiple filter fields
When multiple filter fields are provided, a logical `AND` is applied between the filters.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/pages/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ]
  }}'
```

### Filter field with multiple values
When a filter field contains multiple values, a logical `OR` is applied between the filter values.
 ```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/pages/filter'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "networkId": [ "660b34109d12", "660b34109d15" ]
  }}'
```

### Combination of request parameters and body filters
```
curl --location --request POST 'https://api.thousandeyes.com/v7/endpoint/test-results/real-user-tests/pages/filter?window=1w'
--header 'Authorization: Bearer $token'
--header 'Content-Type: application/json'
--data-raw '{
  "searchFilters": {
    "platform": [ "mac" ],
    "domain": [ "thousandeyes.com" ],
    "networkId": [ "660b34109d12", "660b34109d15" ]
  }}'
```

Returns a `results` array of user loaded pages in an endpoint real user test. 
Pages shown are from the latest round, or based on the time range specified.



 @return ApiFilterRealUserTestsVisitedPagesResultsRequest
*/
func (a *RealUserEndpointTestResultsAPIService) FilterRealUserTestsVisitedPagesResults() ApiFilterRealUserTestsVisitedPagesResultsRequest {
	return ApiFilterRealUserTestsVisitedPagesResultsRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return RealUserEndpointTestPageResults
func (a *RealUserEndpointTestResultsAPIService) FilterRealUserTestsVisitedPagesResultsExecute(r ApiFilterRealUserTestsVisitedPagesResultsRequest) (*RealUserEndpointTestPageResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *RealUserEndpointTestPageResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/real-user-tests/pages/filter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.window != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "window", r.window, "")
	}
	if r.startDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.cursor != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.realUserEndpointTestResultRequestFilter
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRealUserTestPageResultsRequest struct {

	ApiService *RealUserEndpointTestResultsAPIService
	id string
	pageId string
	aid *string
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetRealUserTestPageResultsRequest) Aid(aid string) ApiGetRealUserTestPageResultsRequest {
	r.aid = &aid
	return r
}

func (r ApiGetRealUserTestPageResultsRequest) Execute() (*RealUserEndpointTestPageDetailResult, *http.Response, error) {
	return r.ApiService.GetRealUserTestPageResultsExecute(r)
}

/*
GetRealUserTestPageResults Retrieve endpoint real user test page

Returns details for endpoint real user test web page request. 
Provides complete waterfall information with all object requests.

Sends back detailed endpoint real user test web page request.

Returned object has a single field: `har` which is an HAR object according to the HTTP Archive 1.2 specifications. 
[You can read more about the specification](http://www.softwareishard.com/blog/har-12-spec/).

In addition to standard fields, the object har includes a custom property `systemMetrics` which contain metrics about CPU and physical memory usage. 
Check `SystemMetrics` on schemas tab for more information.


 @param id The real user test id. @param pageId Web page ID
 @return ApiGetRealUserTestPageResultsRequest
*/
func (a *RealUserEndpointTestResultsAPIService) GetRealUserTestPageResults(id string , pageId string ) ApiGetRealUserTestPageResultsRequest {
	return ApiGetRealUserTestPageResultsRequest{
		ApiService: a,
		id: id,
		pageId: pageId,
	}
}

// Execute executes the request
//  @return RealUserEndpointTestPageDetailResult
func (a *RealUserEndpointTestResultsAPIService) GetRealUserTestPageResultsExecute(r ApiGetRealUserTestPageResultsRequest) (*RealUserEndpointTestPageDetailResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *RealUserEndpointTestPageDetailResult
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/real-user-tests/{id}/pages/{pageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(request.ParameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pageId"+"}", url.PathEscape(request.ParameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRealUserTestResultsRequest struct {

	ApiService *RealUserEndpointTestResultsAPIService
	id string
	aid *string
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetRealUserTestResultsRequest) Aid(aid string) ApiGetRealUserTestResultsRequest {
	r.aid = &aid
	return r
}

func (r ApiGetRealUserTestResultsRequest) Execute() (*RealUserEndpointTestDetailResults, *http.Response, error) {
	return r.ApiService.GetRealUserTestResultsExecute(r)
}

/*
GetRealUserTestResults Retrieve endpoint real user test

Provides details for an endpoint real user test. Returns a results array containing detailed information about endpoint real user tests."


 @param id The real user test id.
 @return ApiGetRealUserTestResultsRequest
*/
func (a *RealUserEndpointTestResultsAPIService) GetRealUserTestResults(id string ) ApiGetRealUserTestResultsRequest {
	return ApiGetRealUserTestResultsRequest{
		ApiService: a,
		id: id,
	}
}

// Execute executes the request
//  @return RealUserEndpointTestDetailResults
func (a *RealUserEndpointTestResultsAPIService) GetRealUserTestResultsExecute(r ApiGetRealUserTestResultsRequest) (*RealUserEndpointTestDetailResults, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *RealUserEndpointTestDetailResults
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/test-results/real-user-tests/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(request.ParameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 502 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *RealUserEndpointTestResultsAPIService) decodeError(v interface{}, localVarBody []byte, localVarHTTPResponse *http.Response, newErr *internalerror.GenericAPIError) {
    err := a.Client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr.ErrorMessage = err.Error()
        return
    }
    newErr.ErrorMessage = internalerror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
    newErr.Model = v
}
