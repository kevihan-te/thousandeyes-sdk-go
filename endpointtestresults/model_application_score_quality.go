/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// ApplicationScoreQuality the model 'ApplicationScoreQuality'
type ApplicationScoreQuality string

// List of ApplicationScoreQuality
const (
	APPLICATIONSCOREQUALITY_GREAT ApplicationScoreQuality = "great"
	APPLICATIONSCOREQUALITY_GOOD ApplicationScoreQuality = "good"
	APPLICATIONSCOREQUALITY_POOR ApplicationScoreQuality = "poor"
)

// All allowed values of ApplicationScoreQuality enum
var AllowedApplicationScoreQualityEnumValues = []ApplicationScoreQuality{
	"great",
	"good",
	"poor",
}

func (v *ApplicationScoreQuality) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationScoreQuality(value)
	for _, existing := range AllowedApplicationScoreQualityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationScoreQuality", value)
}

// NewApplicationScoreQualityFromValue returns a pointer to a valid ApplicationScoreQuality
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationScoreQualityFromValue(v string) (*ApplicationScoreQuality, error) {
	ev := ApplicationScoreQuality(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationScoreQuality: valid values are %v", v, AllowedApplicationScoreQualityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationScoreQuality) IsValid() bool {
	for _, existing := range AllowedApplicationScoreQualityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApplicationScoreQuality value
func (v ApplicationScoreQuality) Ptr() *ApplicationScoreQuality {
	return &v
}

type NullableApplicationScoreQuality struct {
	value *ApplicationScoreQuality
	isSet bool
}

func (v NullableApplicationScoreQuality) Get() *ApplicationScoreQuality {
	return v.value
}

func (v *NullableApplicationScoreQuality) Set(val *ApplicationScoreQuality) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationScoreQuality) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationScoreQuality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationScoreQuality(val *ApplicationScoreQuality) *NullableApplicationScoreQuality {
	return &NullableApplicationScoreQuality{value: val, isSet: true}
}

func (v NullableApplicationScoreQuality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationScoreQuality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

