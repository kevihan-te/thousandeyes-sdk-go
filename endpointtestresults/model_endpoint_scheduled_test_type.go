/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// EndpointScheduledTestType Type of test being queried.
type EndpointScheduledTestType string

// List of EndpointScheduledTestType
const (
	ENDPOINTSCHEDULEDTESTTYPE_AGENT_TO_SERVER EndpointScheduledTestType = "agent-to-server"
	ENDPOINTSCHEDULEDTESTTYPE_HTTP_SERVER EndpointScheduledTestType = "http-server"
)

// All allowed values of EndpointScheduledTestType enum
var AllowedEndpointScheduledTestTypeEnumValues = []EndpointScheduledTestType{
	"agent-to-server",
	"http-server",
}

func (v *EndpointScheduledTestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointScheduledTestType(value)
	for _, existing := range AllowedEndpointScheduledTestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointScheduledTestType", value)
}

// NewEndpointScheduledTestTypeFromValue returns a pointer to a valid EndpointScheduledTestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointScheduledTestTypeFromValue(v string) (*EndpointScheduledTestType, error) {
	ev := EndpointScheduledTestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointScheduledTestType: valid values are %v", v, AllowedEndpointScheduledTestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointScheduledTestType) IsValid() bool {
	for _, existing := range AllowedEndpointScheduledTestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointScheduledTestType value
func (v EndpointScheduledTestType) Ptr() *EndpointScheduledTestType {
	return &v
}

type NullableEndpointScheduledTestType struct {
	value *EndpointScheduledTestType
	isSet bool
}

func (v NullableEndpointScheduledTestType) Get() *EndpointScheduledTestType {
	return v.value
}

func (v *NullableEndpointScheduledTestType) Set(val *EndpointScheduledTestType) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointScheduledTestType) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointScheduledTestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointScheduledTestType(val *EndpointScheduledTestType) *NullableEndpointScheduledTestType {
	return &NullableEndpointScheduledTestType{value: val, isSet: true}
}

func (v NullableEndpointScheduledTestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointScheduledTestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

