/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// TcpPathTraceModeResponse Path trace mode used by network test. Only valid when the protocol is set to TCP.
type TcpPathTraceModeResponse string

// List of TcpPathTraceModeResponse
const (
	TCPPATHTRACEMODERESPONSE_AUTO TcpPathTraceModeResponse = "auto"
	TCPPATHTRACEMODERESPONSE_SYN TcpPathTraceModeResponse = "syn"
	TCPPATHTRACEMODERESPONSE_UNKNOWN TcpPathTraceModeResponse = "unknown"
	TCPPATHTRACEMODERESPONSE_DATA_IN_SESSION_WITH_DECREMENTING_TTL TcpPathTraceModeResponse = "data-in-session-with-decrementing-ttl"
	TCPPATHTRACEMODERESPONSE_DATA_IN_SESSION TcpPathTraceModeResponse = "data-in-session"
)

// All allowed values of TcpPathTraceModeResponse enum
var AllowedTcpPathTraceModeResponseEnumValues = []TcpPathTraceModeResponse{
	"auto",
	"syn",
	"unknown",
	"data-in-session-with-decrementing-ttl",
	"data-in-session",
}

func (v *TcpPathTraceModeResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TcpPathTraceModeResponse(value)
	for _, existing := range AllowedTcpPathTraceModeResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TcpPathTraceModeResponse", value)
}

// NewTcpPathTraceModeResponseFromValue returns a pointer to a valid TcpPathTraceModeResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTcpPathTraceModeResponseFromValue(v string) (*TcpPathTraceModeResponse, error) {
	ev := TcpPathTraceModeResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TcpPathTraceModeResponse: valid values are %v", v, AllowedTcpPathTraceModeResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TcpPathTraceModeResponse) IsValid() bool {
	for _, existing := range AllowedTcpPathTraceModeResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TcpPathTraceModeResponse value
func (v TcpPathTraceModeResponse) Ptr() *TcpPathTraceModeResponse {
	return &v
}

type NullableTcpPathTraceModeResponse struct {
	value *TcpPathTraceModeResponse
	isSet bool
}

func (v NullableTcpPathTraceModeResponse) Get() *TcpPathTraceModeResponse {
	return v.value
}

func (v *NullableTcpPathTraceModeResponse) Set(val *TcpPathTraceModeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTcpPathTraceModeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTcpPathTraceModeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTcpPathTraceModeResponse(val *TcpPathTraceModeResponse) *NullableTcpPathTraceModeResponse {
	return &NullableTcpPathTraceModeResponse{value: val, isSet: true}
}

func (v NullableTcpPathTraceModeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTcpPathTraceModeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

