/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the RealUserEndpointTestCoordinates type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &RealUserEndpointTestCoordinates{}

// RealUserEndpointTestCoordinates Contains approximate GPS location of the endpoint agent, based on endpoint agentâ€™s public IP address.
type RealUserEndpointTestCoordinates struct {
	// Numeric representations of GPS coordinates.
	Latitude *float64 `json:"latitude,omitempty"`
	// Represents named geographical location.
	Location *string `json:"location,omitempty"`
	// Numeric representations of GPS coordinates.
	Longitude *float64 `json:"longitude,omitempty"`
}

// NewRealUserEndpointTestCoordinates instantiates a new RealUserEndpointTestCoordinates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealUserEndpointTestCoordinates() *RealUserEndpointTestCoordinates {
	this := RealUserEndpointTestCoordinates{}
	return &this
}

// NewRealUserEndpointTestCoordinatesWithDefaults instantiates a new RealUserEndpointTestCoordinates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealUserEndpointTestCoordinatesWithDefaults() *RealUserEndpointTestCoordinates {
	this := RealUserEndpointTestCoordinates{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *RealUserEndpointTestCoordinates) GetLatitude() float64 {
	if o == nil || utils.IsNil(o.Latitude) {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestCoordinates) GetLatitudeOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *RealUserEndpointTestCoordinates) HasLatitude() bool {
	if o != nil && !utils.IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *RealUserEndpointTestCoordinates) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *RealUserEndpointTestCoordinates) GetLocation() string {
	if o == nil || utils.IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestCoordinates) GetLocationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *RealUserEndpointTestCoordinates) HasLocation() bool {
	if o != nil && !utils.IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *RealUserEndpointTestCoordinates) SetLocation(v string) {
	o.Location = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *RealUserEndpointTestCoordinates) GetLongitude() float64 {
	if o == nil || utils.IsNil(o.Longitude) {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserEndpointTestCoordinates) GetLongitudeOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *RealUserEndpointTestCoordinates) HasLongitude() bool {
	if o != nil && !utils.IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *RealUserEndpointTestCoordinates) SetLongitude(v float64) {
	o.Longitude = &v
}

func (o RealUserEndpointTestCoordinates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealUserEndpointTestCoordinates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !utils.IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !utils.IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	return toSerialize, nil
}

type NullableRealUserEndpointTestCoordinates struct {
	value *RealUserEndpointTestCoordinates
	isSet bool
}

func (v NullableRealUserEndpointTestCoordinates) Get() *RealUserEndpointTestCoordinates {
	return v.value
}

func (v *NullableRealUserEndpointTestCoordinates) Set(val *RealUserEndpointTestCoordinates) {
	v.value = val
	v.isSet = true
}

func (v NullableRealUserEndpointTestCoordinates) IsSet() bool {
	return v.isSet
}

func (v *NullableRealUserEndpointTestCoordinates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealUserEndpointTestCoordinates(val *RealUserEndpointTestCoordinates) *NullableRealUserEndpointTestCoordinates {
	return &NullableRealUserEndpointTestCoordinates{value: val, isSet: true}
}

func (v NullableRealUserEndpointTestCoordinates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealUserEndpointTestCoordinates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


