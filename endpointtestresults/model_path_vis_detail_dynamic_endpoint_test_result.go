/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the PathVisDetailDynamicEndpointTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PathVisDetailDynamicEndpointTestResult{}

// PathVisDetailDynamicEndpointTestResult struct for PathVisDetailDynamicEndpointTestResult
type PathVisDetailDynamicEndpointTestResult struct {
	// A unique identifier associated with your account group. You can retrieve your `AccountGroupId` from the `/account-groups` endpoint.
	Aid *string `json:"aid,omitempty"`
	// Unique ID of endpoint test.
	TestId *string `json:"testId,omitempty"`
	// Unique ID of endpoint agent, from `/endpoint/agents` endpoint.
	AgentId *string `json:"agentId,omitempty"`
	// Epoch time (seconds) indicating the start time of the round.
	RoundId *int32 `json:"roundId,omitempty"`
	// IP address of target server.
	ServerIp *string `json:"serverIp,omitempty"`
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`
	SystemMetrics *SystemMetrics `json:"systemMetrics,omitempty"`
	OriginalTargetProfile *TargetProfile `json:"originalTargetProfile,omitempty"`
	VpnProfile *VpnProfile `json:"vpnProfile,omitempty"`
	AsnDetails *AsnDetails `json:"asnDetails,omitempty"`
	// Target server, including port.
	Server *string `json:"server,omitempty"`
	// IP address of source endpoint agent.
	SourceIp *string `json:"sourceIp,omitempty"`
	// IP prefix of source endpoint agent.
	SourcePrefix *string `json:"sourcePrefix,omitempty"`
	// Shows iterations of path trace, with each iteration specified by a pathId.
	PathTraces []EndpointPathVisRoute `json:"pathTraces,omitempty"`
	// Shows iterations of the VPN path trace, with each iteration specified by a pathId.
	VpnPathTraces []EndpointPathVisRoute `json:"vpnPathTraces,omitempty"`
	// Which supported application to monitor, can be one of `webex`, `zoom`, `microsoft-teams`.
	Application *string `json:"application,omitempty"`
	Protocol *EndpointTestResultProtocol `json:"protocol,omitempty"`
	TcpProbeMode *TestProbeModeResponse `json:"tcpProbeMode,omitempty"`
	UdpProbeMode *UdpProbeModeResponse `json:"udpProbeMode,omitempty"`
	Webex *DynamicEndpointTestWebex `json:"webex,omitempty"`
}

// NewPathVisDetailDynamicEndpointTestResult instantiates a new PathVisDetailDynamicEndpointTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathVisDetailDynamicEndpointTestResult() *PathVisDetailDynamicEndpointTestResult {
	this := PathVisDetailDynamicEndpointTestResult{}
	var protocol EndpointTestResultProtocol = ENDPOINTTESTRESULTPROTOCOL_UNKNOWN
	this.Protocol = &protocol
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var udpProbeMode UdpProbeModeResponse = UDPPROBEMODERESPONSE_UNKNOWN
	this.UdpProbeMode = &udpProbeMode
	return &this
}

// NewPathVisDetailDynamicEndpointTestResultWithDefaults instantiates a new PathVisDetailDynamicEndpointTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathVisDetailDynamicEndpointTestResultWithDefaults() *PathVisDetailDynamicEndpointTestResult {
	this := PathVisDetailDynamicEndpointTestResult{}
	var protocol EndpointTestResultProtocol = ENDPOINTTESTRESULTPROTOCOL_UNKNOWN
	this.Protocol = &protocol
	var tcpProbeMode TestProbeModeResponse = TESTPROBEMODERESPONSE_AUTO
	this.TcpProbeMode = &tcpProbeMode
	var udpProbeMode UdpProbeModeResponse = UDPPROBEMODERESPONSE_UNKNOWN
	this.UdpProbeMode = &udpProbeMode
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *PathVisDetailDynamicEndpointTestResult) SetAid(v string) {
	o.Aid = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *PathVisDetailDynamicEndpointTestResult) SetTestId(v string) {
	o.TestId = &v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetAgentId() string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetAgentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *PathVisDetailDynamicEndpointTestResult) SetAgentId(v string) {
	o.AgentId = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *PathVisDetailDynamicEndpointTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetServerIp() string {
	if o == nil || utils.IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetServerIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasServerIp() bool {
	if o != nil && !utils.IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *PathVisDetailDynamicEndpointTestResult) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetNetworkProfile returns the NetworkProfile field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetNetworkProfile() NetworkProfile {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		var ret NetworkProfile
		return ret
	}
	return *o.NetworkProfile
}

// GetNetworkProfileOk returns a tuple with the NetworkProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetNetworkProfileOk() (*NetworkProfile, bool) {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		return nil, false
	}
	return o.NetworkProfile, true
}

// HasNetworkProfile returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasNetworkProfile() bool {
	if o != nil && !utils.IsNil(o.NetworkProfile) {
		return true
	}

	return false
}

// SetNetworkProfile gets a reference to the given NetworkProfile and assigns it to the NetworkProfile field.
func (o *PathVisDetailDynamicEndpointTestResult) SetNetworkProfile(v NetworkProfile) {
	o.NetworkProfile = &v
}

// GetSystemMetrics returns the SystemMetrics field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetSystemMetrics() SystemMetrics {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		var ret SystemMetrics
		return ret
	}
	return *o.SystemMetrics
}

// GetSystemMetricsOk returns a tuple with the SystemMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetSystemMetricsOk() (*SystemMetrics, bool) {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		return nil, false
	}
	return o.SystemMetrics, true
}

// HasSystemMetrics returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasSystemMetrics() bool {
	if o != nil && !utils.IsNil(o.SystemMetrics) {
		return true
	}

	return false
}

// SetSystemMetrics gets a reference to the given SystemMetrics and assigns it to the SystemMetrics field.
func (o *PathVisDetailDynamicEndpointTestResult) SetSystemMetrics(v SystemMetrics) {
	o.SystemMetrics = &v
}

// GetOriginalTargetProfile returns the OriginalTargetProfile field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetOriginalTargetProfile() TargetProfile {
	if o == nil || utils.IsNil(o.OriginalTargetProfile) {
		var ret TargetProfile
		return ret
	}
	return *o.OriginalTargetProfile
}

// GetOriginalTargetProfileOk returns a tuple with the OriginalTargetProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetOriginalTargetProfileOk() (*TargetProfile, bool) {
	if o == nil || utils.IsNil(o.OriginalTargetProfile) {
		return nil, false
	}
	return o.OriginalTargetProfile, true
}

// HasOriginalTargetProfile returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasOriginalTargetProfile() bool {
	if o != nil && !utils.IsNil(o.OriginalTargetProfile) {
		return true
	}

	return false
}

// SetOriginalTargetProfile gets a reference to the given TargetProfile and assigns it to the OriginalTargetProfile field.
func (o *PathVisDetailDynamicEndpointTestResult) SetOriginalTargetProfile(v TargetProfile) {
	o.OriginalTargetProfile = &v
}

// GetVpnProfile returns the VpnProfile field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetVpnProfile() VpnProfile {
	if o == nil || utils.IsNil(o.VpnProfile) {
		var ret VpnProfile
		return ret
	}
	return *o.VpnProfile
}

// GetVpnProfileOk returns a tuple with the VpnProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetVpnProfileOk() (*VpnProfile, bool) {
	if o == nil || utils.IsNil(o.VpnProfile) {
		return nil, false
	}
	return o.VpnProfile, true
}

// HasVpnProfile returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasVpnProfile() bool {
	if o != nil && !utils.IsNil(o.VpnProfile) {
		return true
	}

	return false
}

// SetVpnProfile gets a reference to the given VpnProfile and assigns it to the VpnProfile field.
func (o *PathVisDetailDynamicEndpointTestResult) SetVpnProfile(v VpnProfile) {
	o.VpnProfile = &v
}

// GetAsnDetails returns the AsnDetails field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetAsnDetails() AsnDetails {
	if o == nil || utils.IsNil(o.AsnDetails) {
		var ret AsnDetails
		return ret
	}
	return *o.AsnDetails
}

// GetAsnDetailsOk returns a tuple with the AsnDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetAsnDetailsOk() (*AsnDetails, bool) {
	if o == nil || utils.IsNil(o.AsnDetails) {
		return nil, false
	}
	return o.AsnDetails, true
}

// HasAsnDetails returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasAsnDetails() bool {
	if o != nil && !utils.IsNil(o.AsnDetails) {
		return true
	}

	return false
}

// SetAsnDetails gets a reference to the given AsnDetails and assigns it to the AsnDetails field.
func (o *PathVisDetailDynamicEndpointTestResult) SetAsnDetails(v AsnDetails) {
	o.AsnDetails = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetServer() string {
	if o == nil || utils.IsNil(o.Server) {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetServerOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasServer() bool {
	if o != nil && !utils.IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *PathVisDetailDynamicEndpointTestResult) SetServer(v string) {
	o.Server = &v
}

// GetSourceIp returns the SourceIp field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetSourceIp() string {
	if o == nil || utils.IsNil(o.SourceIp) {
		var ret string
		return ret
	}
	return *o.SourceIp
}

// GetSourceIpOk returns a tuple with the SourceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetSourceIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SourceIp) {
		return nil, false
	}
	return o.SourceIp, true
}

// HasSourceIp returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasSourceIp() bool {
	if o != nil && !utils.IsNil(o.SourceIp) {
		return true
	}

	return false
}

// SetSourceIp gets a reference to the given string and assigns it to the SourceIp field.
func (o *PathVisDetailDynamicEndpointTestResult) SetSourceIp(v string) {
	o.SourceIp = &v
}

// GetSourcePrefix returns the SourcePrefix field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetSourcePrefix() string {
	if o == nil || utils.IsNil(o.SourcePrefix) {
		var ret string
		return ret
	}
	return *o.SourcePrefix
}

// GetSourcePrefixOk returns a tuple with the SourcePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetSourcePrefixOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SourcePrefix) {
		return nil, false
	}
	return o.SourcePrefix, true
}

// HasSourcePrefix returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasSourcePrefix() bool {
	if o != nil && !utils.IsNil(o.SourcePrefix) {
		return true
	}

	return false
}

// SetSourcePrefix gets a reference to the given string and assigns it to the SourcePrefix field.
func (o *PathVisDetailDynamicEndpointTestResult) SetSourcePrefix(v string) {
	o.SourcePrefix = &v
}

// GetPathTraces returns the PathTraces field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetPathTraces() []EndpointPathVisRoute {
	if o == nil || utils.IsNil(o.PathTraces) {
		var ret []EndpointPathVisRoute
		return ret
	}
	return o.PathTraces
}

// GetPathTracesOk returns a tuple with the PathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetPathTracesOk() ([]EndpointPathVisRoute, bool) {
	if o == nil || utils.IsNil(o.PathTraces) {
		return nil, false
	}
	return o.PathTraces, true
}

// HasPathTraces returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasPathTraces() bool {
	if o != nil && !utils.IsNil(o.PathTraces) {
		return true
	}

	return false
}

// SetPathTraces gets a reference to the given []EndpointPathVisRoute and assigns it to the PathTraces field.
func (o *PathVisDetailDynamicEndpointTestResult) SetPathTraces(v []EndpointPathVisRoute) {
	o.PathTraces = v
}

// GetVpnPathTraces returns the VpnPathTraces field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetVpnPathTraces() []EndpointPathVisRoute {
	if o == nil || utils.IsNil(o.VpnPathTraces) {
		var ret []EndpointPathVisRoute
		return ret
	}
	return o.VpnPathTraces
}

// GetVpnPathTracesOk returns a tuple with the VpnPathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetVpnPathTracesOk() ([]EndpointPathVisRoute, bool) {
	if o == nil || utils.IsNil(o.VpnPathTraces) {
		return nil, false
	}
	return o.VpnPathTraces, true
}

// HasVpnPathTraces returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasVpnPathTraces() bool {
	if o != nil && !utils.IsNil(o.VpnPathTraces) {
		return true
	}

	return false
}

// SetVpnPathTraces gets a reference to the given []EndpointPathVisRoute and assigns it to the VpnPathTraces field.
func (o *PathVisDetailDynamicEndpointTestResult) SetVpnPathTraces(v []EndpointPathVisRoute) {
	o.VpnPathTraces = v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetApplication() string {
	if o == nil || utils.IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetApplicationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasApplication() bool {
	if o != nil && !utils.IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *PathVisDetailDynamicEndpointTestResult) SetApplication(v string) {
	o.Application = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetProtocol() EndpointTestResultProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestResultProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetProtocolOk() (*EndpointTestResultProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestResultProtocol and assigns it to the Protocol field.
func (o *PathVisDetailDynamicEndpointTestResult) SetProtocol(v EndpointTestResultProtocol) {
	o.Protocol = &v
}

// GetTcpProbeMode returns the TcpProbeMode field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetTcpProbeMode() TestProbeModeResponse {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		var ret TestProbeModeResponse
		return ret
	}
	return *o.TcpProbeMode
}

// GetTcpProbeModeOk returns a tuple with the TcpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetTcpProbeModeOk() (*TestProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.TcpProbeMode) {
		return nil, false
	}
	return o.TcpProbeMode, true
}

// HasTcpProbeMode returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasTcpProbeMode() bool {
	if o != nil && !utils.IsNil(o.TcpProbeMode) {
		return true
	}

	return false
}

// SetTcpProbeMode gets a reference to the given TestProbeModeResponse and assigns it to the TcpProbeMode field.
func (o *PathVisDetailDynamicEndpointTestResult) SetTcpProbeMode(v TestProbeModeResponse) {
	o.TcpProbeMode = &v
}

// GetUdpProbeMode returns the UdpProbeMode field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetUdpProbeMode() UdpProbeModeResponse {
	if o == nil || utils.IsNil(o.UdpProbeMode) {
		var ret UdpProbeModeResponse
		return ret
	}
	return *o.UdpProbeMode
}

// GetUdpProbeModeOk returns a tuple with the UdpProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetUdpProbeModeOk() (*UdpProbeModeResponse, bool) {
	if o == nil || utils.IsNil(o.UdpProbeMode) {
		return nil, false
	}
	return o.UdpProbeMode, true
}

// HasUdpProbeMode returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasUdpProbeMode() bool {
	if o != nil && !utils.IsNil(o.UdpProbeMode) {
		return true
	}

	return false
}

// SetUdpProbeMode gets a reference to the given UdpProbeModeResponse and assigns it to the UdpProbeMode field.
func (o *PathVisDetailDynamicEndpointTestResult) SetUdpProbeMode(v UdpProbeModeResponse) {
	o.UdpProbeMode = &v
}

// GetWebex returns the Webex field value if set, zero value otherwise.
func (o *PathVisDetailDynamicEndpointTestResult) GetWebex() DynamicEndpointTestWebex {
	if o == nil || utils.IsNil(o.Webex) {
		var ret DynamicEndpointTestWebex
		return ret
	}
	return *o.Webex
}

// GetWebexOk returns a tuple with the Webex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathVisDetailDynamicEndpointTestResult) GetWebexOk() (*DynamicEndpointTestWebex, bool) {
	if o == nil || utils.IsNil(o.Webex) {
		return nil, false
	}
	return o.Webex, true
}

// HasWebex returns a boolean if a field has been set.
func (o *PathVisDetailDynamicEndpointTestResult) HasWebex() bool {
	if o != nil && !utils.IsNil(o.Webex) {
		return true
	}

	return false
}

// SetWebex gets a reference to the given DynamicEndpointTestWebex and assigns it to the Webex field.
func (o *PathVisDetailDynamicEndpointTestResult) SetWebex(v DynamicEndpointTestWebex) {
	o.Webex = &v
}

func (o PathVisDetailDynamicEndpointTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PathVisDetailDynamicEndpointTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.ServerIp) {
		toSerialize["serverIp"] = o.ServerIp
	}
	if !utils.IsNil(o.NetworkProfile) {
		toSerialize["networkProfile"] = o.NetworkProfile
	}
	if !utils.IsNil(o.SystemMetrics) {
		toSerialize["systemMetrics"] = o.SystemMetrics
	}
	if !utils.IsNil(o.OriginalTargetProfile) {
		toSerialize["originalTargetProfile"] = o.OriginalTargetProfile
	}
	if !utils.IsNil(o.VpnProfile) {
		toSerialize["vpnProfile"] = o.VpnProfile
	}
	if !utils.IsNil(o.AsnDetails) {
		toSerialize["asnDetails"] = o.AsnDetails
	}
	if !utils.IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !utils.IsNil(o.SourceIp) {
		toSerialize["sourceIp"] = o.SourceIp
	}
	if !utils.IsNil(o.SourcePrefix) {
		toSerialize["sourcePrefix"] = o.SourcePrefix
	}
	if !utils.IsNil(o.PathTraces) {
		toSerialize["pathTraces"] = o.PathTraces
	}
	if !utils.IsNil(o.VpnPathTraces) {
		toSerialize["vpnPathTraces"] = o.VpnPathTraces
	}
	if !utils.IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.TcpProbeMode) {
		toSerialize["tcpProbeMode"] = o.TcpProbeMode
	}
	if !utils.IsNil(o.UdpProbeMode) {
		toSerialize["udpProbeMode"] = o.UdpProbeMode
	}
	if !utils.IsNil(o.Webex) {
		toSerialize["webex"] = o.Webex
	}
	return toSerialize, nil
}

type NullablePathVisDetailDynamicEndpointTestResult struct {
	value *PathVisDetailDynamicEndpointTestResult
	isSet bool
}

func (v NullablePathVisDetailDynamicEndpointTestResult) Get() *PathVisDetailDynamicEndpointTestResult {
	return v.value
}

func (v *NullablePathVisDetailDynamicEndpointTestResult) Set(val *PathVisDetailDynamicEndpointTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePathVisDetailDynamicEndpointTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePathVisDetailDynamicEndpointTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathVisDetailDynamicEndpointTestResult(val *PathVisDetailDynamicEndpointTestResult) *NullablePathVisDetailDynamicEndpointTestResult {
	return &NullablePathVisDetailDynamicEndpointTestResult{value: val, isSet: true}
}

func (v NullablePathVisDetailDynamicEndpointTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathVisDetailDynamicEndpointTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


