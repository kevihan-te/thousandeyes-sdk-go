/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the LocalNetworkTopologyResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LocalNetworkTopologyResult{}

// LocalNetworkTopologyResult struct for LocalNetworkTopologyResult
type LocalNetworkTopologyResult struct {
	// Unique ID of endpoint agent, from `/endpoint/agents` endpoint.
	AgentId *string `json:"agentId,omitempty"`
	// UTC date when endpoint network topology took place (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Network topology ID. Each network topology occurrence has a unique ID.
	NetworkTopologyId *string `json:"networkTopologyId,omitempty"`
	// Epoch time (seconds) indicating the start time of the round.
	RoundId *int32 `json:"roundId,omitempty"`
	// IP of the target the network topology was performed against. This is typically a default gateway, proxy or VPN endpoint.
	Target *string `json:"target,omitempty"`
	// Port of the target the network topology was performed against.
	TargetPort *int32 `json:"targetPort,omitempty"`
	Type *NetworkTopologyType `json:"type,omitempty"`
	IcmpPing *NetworkPing `json:"icmpPing,omitempty"`
	// Set to `true` if network target is blocking ICMP echo (ping) queries.
	IsIcmpBlocked *bool `json:"isIcmpBlocked,omitempty"`
	TcpConnect *TcpConnect `json:"tcpConnect,omitempty"`
	SystemMetrics *SystemMetrics `json:"systemMetrics,omitempty"`
	SystemMetricDetails *SystemMetricDetails `json:"systemMetricDetails,omitempty"`
	Coordinates *RealUserEndpointTestCoordinates `json:"coordinates,omitempty"`
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`
	IcmpTraceroute *Traceroute `json:"icmpTraceroute,omitempty"`
	IcmpTraceroutes []Traceroute `json:"icmpTraceroutes,omitempty"`
}

// NewLocalNetworkTopologyResult instantiates a new LocalNetworkTopologyResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalNetworkTopologyResult() *LocalNetworkTopologyResult {
	this := LocalNetworkTopologyResult{}
	return &this
}

// NewLocalNetworkTopologyResultWithDefaults instantiates a new LocalNetworkTopologyResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalNetworkTopologyResultWithDefaults() *LocalNetworkTopologyResult {
	this := LocalNetworkTopologyResult{}
	return &this
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetAgentId() string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetAgentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *LocalNetworkTopologyResult) SetAgentId(v string) {
	o.AgentId = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *LocalNetworkTopologyResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetNetworkTopologyId returns the NetworkTopologyId field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetNetworkTopologyId() string {
	if o == nil || utils.IsNil(o.NetworkTopologyId) {
		var ret string
		return ret
	}
	return *o.NetworkTopologyId
}

// GetNetworkTopologyIdOk returns a tuple with the NetworkTopologyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetNetworkTopologyIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.NetworkTopologyId) {
		return nil, false
	}
	return o.NetworkTopologyId, true
}

// HasNetworkTopologyId returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasNetworkTopologyId() bool {
	if o != nil && !utils.IsNil(o.NetworkTopologyId) {
		return true
	}

	return false
}

// SetNetworkTopologyId gets a reference to the given string and assigns it to the NetworkTopologyId field.
func (o *LocalNetworkTopologyResult) SetNetworkTopologyId(v string) {
	o.NetworkTopologyId = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *LocalNetworkTopologyResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetTarget() string {
	if o == nil || utils.IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetTargetOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasTarget() bool {
	if o != nil && !utils.IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *LocalNetworkTopologyResult) SetTarget(v string) {
	o.Target = &v
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetTargetPort() int32 {
	if o == nil || utils.IsNil(o.TargetPort) {
		var ret int32
		return ret
	}
	return *o.TargetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetTargetPortOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TargetPort) {
		return nil, false
	}
	return o.TargetPort, true
}

// HasTargetPort returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasTargetPort() bool {
	if o != nil && !utils.IsNil(o.TargetPort) {
		return true
	}

	return false
}

// SetTargetPort gets a reference to the given int32 and assigns it to the TargetPort field.
func (o *LocalNetworkTopologyResult) SetTargetPort(v int32) {
	o.TargetPort = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetType() NetworkTopologyType {
	if o == nil || utils.IsNil(o.Type) {
		var ret NetworkTopologyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetTypeOk() (*NetworkTopologyType, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NetworkTopologyType and assigns it to the Type field.
func (o *LocalNetworkTopologyResult) SetType(v NetworkTopologyType) {
	o.Type = &v
}

// GetIcmpPing returns the IcmpPing field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetIcmpPing() NetworkPing {
	if o == nil || utils.IsNil(o.IcmpPing) {
		var ret NetworkPing
		return ret
	}
	return *o.IcmpPing
}

// GetIcmpPingOk returns a tuple with the IcmpPing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetIcmpPingOk() (*NetworkPing, bool) {
	if o == nil || utils.IsNil(o.IcmpPing) {
		return nil, false
	}
	return o.IcmpPing, true
}

// HasIcmpPing returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasIcmpPing() bool {
	if o != nil && !utils.IsNil(o.IcmpPing) {
		return true
	}

	return false
}

// SetIcmpPing gets a reference to the given NetworkPing and assigns it to the IcmpPing field.
func (o *LocalNetworkTopologyResult) SetIcmpPing(v NetworkPing) {
	o.IcmpPing = &v
}

// GetIsIcmpBlocked returns the IsIcmpBlocked field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetIsIcmpBlocked() bool {
	if o == nil || utils.IsNil(o.IsIcmpBlocked) {
		var ret bool
		return ret
	}
	return *o.IsIcmpBlocked
}

// GetIsIcmpBlockedOk returns a tuple with the IsIcmpBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetIsIcmpBlockedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsIcmpBlocked) {
		return nil, false
	}
	return o.IsIcmpBlocked, true
}

// HasIsIcmpBlocked returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasIsIcmpBlocked() bool {
	if o != nil && !utils.IsNil(o.IsIcmpBlocked) {
		return true
	}

	return false
}

// SetIsIcmpBlocked gets a reference to the given bool and assigns it to the IsIcmpBlocked field.
func (o *LocalNetworkTopologyResult) SetIsIcmpBlocked(v bool) {
	o.IsIcmpBlocked = &v
}

// GetTcpConnect returns the TcpConnect field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetTcpConnect() TcpConnect {
	if o == nil || utils.IsNil(o.TcpConnect) {
		var ret TcpConnect
		return ret
	}
	return *o.TcpConnect
}

// GetTcpConnectOk returns a tuple with the TcpConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetTcpConnectOk() (*TcpConnect, bool) {
	if o == nil || utils.IsNil(o.TcpConnect) {
		return nil, false
	}
	return o.TcpConnect, true
}

// HasTcpConnect returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasTcpConnect() bool {
	if o != nil && !utils.IsNil(o.TcpConnect) {
		return true
	}

	return false
}

// SetTcpConnect gets a reference to the given TcpConnect and assigns it to the TcpConnect field.
func (o *LocalNetworkTopologyResult) SetTcpConnect(v TcpConnect) {
	o.TcpConnect = &v
}

// GetSystemMetrics returns the SystemMetrics field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetSystemMetrics() SystemMetrics {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		var ret SystemMetrics
		return ret
	}
	return *o.SystemMetrics
}

// GetSystemMetricsOk returns a tuple with the SystemMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetSystemMetricsOk() (*SystemMetrics, bool) {
	if o == nil || utils.IsNil(o.SystemMetrics) {
		return nil, false
	}
	return o.SystemMetrics, true
}

// HasSystemMetrics returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasSystemMetrics() bool {
	if o != nil && !utils.IsNil(o.SystemMetrics) {
		return true
	}

	return false
}

// SetSystemMetrics gets a reference to the given SystemMetrics and assigns it to the SystemMetrics field.
func (o *LocalNetworkTopologyResult) SetSystemMetrics(v SystemMetrics) {
	o.SystemMetrics = &v
}

// GetSystemMetricDetails returns the SystemMetricDetails field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetSystemMetricDetails() SystemMetricDetails {
	if o == nil || utils.IsNil(o.SystemMetricDetails) {
		var ret SystemMetricDetails
		return ret
	}
	return *o.SystemMetricDetails
}

// GetSystemMetricDetailsOk returns a tuple with the SystemMetricDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetSystemMetricDetailsOk() (*SystemMetricDetails, bool) {
	if o == nil || utils.IsNil(o.SystemMetricDetails) {
		return nil, false
	}
	return o.SystemMetricDetails, true
}

// HasSystemMetricDetails returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasSystemMetricDetails() bool {
	if o != nil && !utils.IsNil(o.SystemMetricDetails) {
		return true
	}

	return false
}

// SetSystemMetricDetails gets a reference to the given SystemMetricDetails and assigns it to the SystemMetricDetails field.
func (o *LocalNetworkTopologyResult) SetSystemMetricDetails(v SystemMetricDetails) {
	o.SystemMetricDetails = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetCoordinates() RealUserEndpointTestCoordinates {
	if o == nil || utils.IsNil(o.Coordinates) {
		var ret RealUserEndpointTestCoordinates
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetCoordinatesOk() (*RealUserEndpointTestCoordinates, bool) {
	if o == nil || utils.IsNil(o.Coordinates) {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasCoordinates() bool {
	if o != nil && !utils.IsNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given RealUserEndpointTestCoordinates and assigns it to the Coordinates field.
func (o *LocalNetworkTopologyResult) SetCoordinates(v RealUserEndpointTestCoordinates) {
	o.Coordinates = &v
}

// GetNetworkProfile returns the NetworkProfile field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetNetworkProfile() NetworkProfile {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		var ret NetworkProfile
		return ret
	}
	return *o.NetworkProfile
}

// GetNetworkProfileOk returns a tuple with the NetworkProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetNetworkProfileOk() (*NetworkProfile, bool) {
	if o == nil || utils.IsNil(o.NetworkProfile) {
		return nil, false
	}
	return o.NetworkProfile, true
}

// HasNetworkProfile returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasNetworkProfile() bool {
	if o != nil && !utils.IsNil(o.NetworkProfile) {
		return true
	}

	return false
}

// SetNetworkProfile gets a reference to the given NetworkProfile and assigns it to the NetworkProfile field.
func (o *LocalNetworkTopologyResult) SetNetworkProfile(v NetworkProfile) {
	o.NetworkProfile = &v
}

// GetIcmpTraceroute returns the IcmpTraceroute field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetIcmpTraceroute() Traceroute {
	if o == nil || utils.IsNil(o.IcmpTraceroute) {
		var ret Traceroute
		return ret
	}
	return *o.IcmpTraceroute
}

// GetIcmpTracerouteOk returns a tuple with the IcmpTraceroute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetIcmpTracerouteOk() (*Traceroute, bool) {
	if o == nil || utils.IsNil(o.IcmpTraceroute) {
		return nil, false
	}
	return o.IcmpTraceroute, true
}

// HasIcmpTraceroute returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasIcmpTraceroute() bool {
	if o != nil && !utils.IsNil(o.IcmpTraceroute) {
		return true
	}

	return false
}

// SetIcmpTraceroute gets a reference to the given Traceroute and assigns it to the IcmpTraceroute field.
func (o *LocalNetworkTopologyResult) SetIcmpTraceroute(v Traceroute) {
	o.IcmpTraceroute = &v
}

// GetIcmpTraceroutes returns the IcmpTraceroutes field value if set, zero value otherwise.
func (o *LocalNetworkTopologyResult) GetIcmpTraceroutes() []Traceroute {
	if o == nil || utils.IsNil(o.IcmpTraceroutes) {
		var ret []Traceroute
		return ret
	}
	return o.IcmpTraceroutes
}

// GetIcmpTraceroutesOk returns a tuple with the IcmpTraceroutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalNetworkTopologyResult) GetIcmpTraceroutesOk() ([]Traceroute, bool) {
	if o == nil || utils.IsNil(o.IcmpTraceroutes) {
		return nil, false
	}
	return o.IcmpTraceroutes, true
}

// HasIcmpTraceroutes returns a boolean if a field has been set.
func (o *LocalNetworkTopologyResult) HasIcmpTraceroutes() bool {
	if o != nil && !utils.IsNil(o.IcmpTraceroutes) {
		return true
	}

	return false
}

// SetIcmpTraceroutes gets a reference to the given []Traceroute and assigns it to the IcmpTraceroutes field.
func (o *LocalNetworkTopologyResult) SetIcmpTraceroutes(v []Traceroute) {
	o.IcmpTraceroutes = v
}

func (o LocalNetworkTopologyResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalNetworkTopologyResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.NetworkTopologyId) {
		toSerialize["networkTopologyId"] = o.NetworkTopologyId
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !utils.IsNil(o.TargetPort) {
		toSerialize["targetPort"] = o.TargetPort
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.IcmpPing) {
		toSerialize["icmpPing"] = o.IcmpPing
	}
	if !utils.IsNil(o.IsIcmpBlocked) {
		toSerialize["isIcmpBlocked"] = o.IsIcmpBlocked
	}
	if !utils.IsNil(o.TcpConnect) {
		toSerialize["tcpConnect"] = o.TcpConnect
	}
	if !utils.IsNil(o.SystemMetrics) {
		toSerialize["systemMetrics"] = o.SystemMetrics
	}
	if !utils.IsNil(o.SystemMetricDetails) {
		toSerialize["systemMetricDetails"] = o.SystemMetricDetails
	}
	if !utils.IsNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !utils.IsNil(o.NetworkProfile) {
		toSerialize["networkProfile"] = o.NetworkProfile
	}
	if !utils.IsNil(o.IcmpTraceroute) {
		toSerialize["icmpTraceroute"] = o.IcmpTraceroute
	}
	if !utils.IsNil(o.IcmpTraceroutes) {
		toSerialize["icmpTraceroutes"] = o.IcmpTraceroutes
	}
	return toSerialize, nil
}

type NullableLocalNetworkTopologyResult struct {
	value *LocalNetworkTopologyResult
	isSet bool
}

func (v NullableLocalNetworkTopologyResult) Get() *LocalNetworkTopologyResult {
	return v.value
}

func (v *NullableLocalNetworkTopologyResult) Set(val *LocalNetworkTopologyResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalNetworkTopologyResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalNetworkTopologyResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalNetworkTopologyResult(val *LocalNetworkTopologyResult) *NullableLocalNetworkTopologyResult {
	return &NullableLocalNetworkTopologyResult{value: val, isSet: true}
}

func (v NullableLocalNetworkTopologyResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalNetworkTopologyResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


