/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EndpointPathVisRoute type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointPathVisRoute{}

// EndpointPathVisRoute struct for EndpointPathVisRoute
type EndpointPathVisRoute struct {
	// Unique ID of path trace.
	PathId *string `json:"pathId,omitempty"`
	Protocol *EndpointTestResultProtocol `json:"protocol,omitempty"`
	TcpPathTraceMode *TcpPathTraceModeResponse `json:"tcpPathTraceMode,omitempty"`
	UdpPathTraceMode *UdpPathTraceModeResponse `json:"udpPathTraceMode,omitempty"`
	// Array of hop objects indicating each step in the traceroute.
	Hops []EndpointPathVisHop `json:"hops,omitempty"`
}

// NewEndpointPathVisRoute instantiates a new EndpointPathVisRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointPathVisRoute() *EndpointPathVisRoute {
	this := EndpointPathVisRoute{}
	var protocol EndpointTestResultProtocol = ENDPOINTTESTRESULTPROTOCOL_UNKNOWN
	this.Protocol = &protocol
	var tcpPathTraceMode TcpPathTraceModeResponse = TCPPATHTRACEMODERESPONSE_AUTO
	this.TcpPathTraceMode = &tcpPathTraceMode
	var udpPathTraceMode UdpPathTraceModeResponse = UDPPATHTRACEMODERESPONSE_UNKNOWN
	this.UdpPathTraceMode = &udpPathTraceMode
	return &this
}

// NewEndpointPathVisRouteWithDefaults instantiates a new EndpointPathVisRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointPathVisRouteWithDefaults() *EndpointPathVisRoute {
	this := EndpointPathVisRoute{}
	var protocol EndpointTestResultProtocol = ENDPOINTTESTRESULTPROTOCOL_UNKNOWN
	this.Protocol = &protocol
	var tcpPathTraceMode TcpPathTraceModeResponse = TCPPATHTRACEMODERESPONSE_AUTO
	this.TcpPathTraceMode = &tcpPathTraceMode
	var udpPathTraceMode UdpPathTraceModeResponse = UDPPATHTRACEMODERESPONSE_UNKNOWN
	this.UdpPathTraceMode = &udpPathTraceMode
	return &this
}

// GetPathId returns the PathId field value if set, zero value otherwise.
func (o *EndpointPathVisRoute) GetPathId() string {
	if o == nil || utils.IsNil(o.PathId) {
		var ret string
		return ret
	}
	return *o.PathId
}

// GetPathIdOk returns a tuple with the PathId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointPathVisRoute) GetPathIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PathId) {
		return nil, false
	}
	return o.PathId, true
}

// HasPathId returns a boolean if a field has been set.
func (o *EndpointPathVisRoute) HasPathId() bool {
	if o != nil && !utils.IsNil(o.PathId) {
		return true
	}

	return false
}

// SetPathId gets a reference to the given string and assigns it to the PathId field.
func (o *EndpointPathVisRoute) SetPathId(v string) {
	o.PathId = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *EndpointPathVisRoute) GetProtocol() EndpointTestResultProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret EndpointTestResultProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointPathVisRoute) GetProtocolOk() (*EndpointTestResultProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *EndpointPathVisRoute) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given EndpointTestResultProtocol and assigns it to the Protocol field.
func (o *EndpointPathVisRoute) SetProtocol(v EndpointTestResultProtocol) {
	o.Protocol = &v
}

// GetTcpPathTraceMode returns the TcpPathTraceMode field value if set, zero value otherwise.
func (o *EndpointPathVisRoute) GetTcpPathTraceMode() TcpPathTraceModeResponse {
	if o == nil || utils.IsNil(o.TcpPathTraceMode) {
		var ret TcpPathTraceModeResponse
		return ret
	}
	return *o.TcpPathTraceMode
}

// GetTcpPathTraceModeOk returns a tuple with the TcpPathTraceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointPathVisRoute) GetTcpPathTraceModeOk() (*TcpPathTraceModeResponse, bool) {
	if o == nil || utils.IsNil(o.TcpPathTraceMode) {
		return nil, false
	}
	return o.TcpPathTraceMode, true
}

// HasTcpPathTraceMode returns a boolean if a field has been set.
func (o *EndpointPathVisRoute) HasTcpPathTraceMode() bool {
	if o != nil && !utils.IsNil(o.TcpPathTraceMode) {
		return true
	}

	return false
}

// SetTcpPathTraceMode gets a reference to the given TcpPathTraceModeResponse and assigns it to the TcpPathTraceMode field.
func (o *EndpointPathVisRoute) SetTcpPathTraceMode(v TcpPathTraceModeResponse) {
	o.TcpPathTraceMode = &v
}

// GetUdpPathTraceMode returns the UdpPathTraceMode field value if set, zero value otherwise.
func (o *EndpointPathVisRoute) GetUdpPathTraceMode() UdpPathTraceModeResponse {
	if o == nil || utils.IsNil(o.UdpPathTraceMode) {
		var ret UdpPathTraceModeResponse
		return ret
	}
	return *o.UdpPathTraceMode
}

// GetUdpPathTraceModeOk returns a tuple with the UdpPathTraceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointPathVisRoute) GetUdpPathTraceModeOk() (*UdpPathTraceModeResponse, bool) {
	if o == nil || utils.IsNil(o.UdpPathTraceMode) {
		return nil, false
	}
	return o.UdpPathTraceMode, true
}

// HasUdpPathTraceMode returns a boolean if a field has been set.
func (o *EndpointPathVisRoute) HasUdpPathTraceMode() bool {
	if o != nil && !utils.IsNil(o.UdpPathTraceMode) {
		return true
	}

	return false
}

// SetUdpPathTraceMode gets a reference to the given UdpPathTraceModeResponse and assigns it to the UdpPathTraceMode field.
func (o *EndpointPathVisRoute) SetUdpPathTraceMode(v UdpPathTraceModeResponse) {
	o.UdpPathTraceMode = &v
}

// GetHops returns the Hops field value if set, zero value otherwise.
func (o *EndpointPathVisRoute) GetHops() []EndpointPathVisHop {
	if o == nil || utils.IsNil(o.Hops) {
		var ret []EndpointPathVisHop
		return ret
	}
	return o.Hops
}

// GetHopsOk returns a tuple with the Hops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointPathVisRoute) GetHopsOk() ([]EndpointPathVisHop, bool) {
	if o == nil || utils.IsNil(o.Hops) {
		return nil, false
	}
	return o.Hops, true
}

// HasHops returns a boolean if a field has been set.
func (o *EndpointPathVisRoute) HasHops() bool {
	if o != nil && !utils.IsNil(o.Hops) {
		return true
	}

	return false
}

// SetHops gets a reference to the given []EndpointPathVisHop and assigns it to the Hops field.
func (o *EndpointPathVisRoute) SetHops(v []EndpointPathVisHop) {
	o.Hops = v
}

func (o EndpointPathVisRoute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointPathVisRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.PathId) {
		toSerialize["pathId"] = o.PathId
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.TcpPathTraceMode) {
		toSerialize["tcpPathTraceMode"] = o.TcpPathTraceMode
	}
	if !utils.IsNil(o.UdpPathTraceMode) {
		toSerialize["udpPathTraceMode"] = o.UdpPathTraceMode
	}
	if !utils.IsNil(o.Hops) {
		toSerialize["hops"] = o.Hops
	}
	return toSerialize, nil
}

type NullableEndpointPathVisRoute struct {
	value *EndpointPathVisRoute
	isSet bool
}

func (v NullableEndpointPathVisRoute) Get() *EndpointPathVisRoute {
	return v.value
}

func (v *NullableEndpointPathVisRoute) Set(val *EndpointPathVisRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointPathVisRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointPathVisRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointPathVisRoute(val *EndpointPathVisRoute) *NullableEndpointPathVisRoute {
	return &NullableEndpointPathVisRoute{value: val, isSet: true}
}

func (v NullableEndpointPathVisRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointPathVisRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


