/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// NetworkTopologyType the model 'NetworkTopologyType'
type NetworkTopologyType string

// List of NetworkTopologyType
const (
	NETWORKTOPOLOGYTYPE_VPN NetworkTopologyType = "vpn"
	NETWORKTOPOLOGYTYPE_PROXY NetworkTopologyType = "proxy"
	NETWORKTOPOLOGYTYPE_GATEWAY NetworkTopologyType = "gateway"
)

// All allowed values of NetworkTopologyType enum
var AllowedNetworkTopologyTypeEnumValues = []NetworkTopologyType{
	"vpn",
	"proxy",
	"gateway",
}

func (v *NetworkTopologyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkTopologyType(value)
	for _, existing := range AllowedNetworkTopologyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkTopologyType", value)
}

// NewNetworkTopologyTypeFromValue returns a pointer to a valid NetworkTopologyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkTopologyTypeFromValue(v string) (*NetworkTopologyType, error) {
	ev := NetworkTopologyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkTopologyType: valid values are %v", v, AllowedNetworkTopologyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkTopologyType) IsValid() bool {
	for _, existing := range AllowedNetworkTopologyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkTopologyType value
func (v NetworkTopologyType) Ptr() *NetworkTopologyType {
	return &v
}

type NullableNetworkTopologyType struct {
	value *NetworkTopologyType
	isSet bool
}

func (v NullableNetworkTopologyType) Get() *NetworkTopologyType {
	return v.value
}

func (v *NullableNetworkTopologyType) Set(val *NetworkTopologyType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTopologyType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTopologyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTopologyType(val *NetworkTopologyType) *NullableNetworkTopologyType {
	return &NullableNetworkTopologyType{value: val, isSet: true}
}

func (v NullableNetworkTopologyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTopologyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

