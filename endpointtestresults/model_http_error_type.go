/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// HttpErrorType Type of error encountered; corresponds to phase of connection.
type HttpErrorType string

// List of HttpErrorType
const (
	HTTPERRORTYPE_CONNECT HttpErrorType = "connect"
	HTTPERRORTYPE_DNS HttpErrorType = "dns"
	HTTPERRORTYPE_HTTP HttpErrorType = "http"
	HTTPERRORTYPE_NONE HttpErrorType = "none"
	HTTPERRORTYPE_SEND HttpErrorType = "send"
	HTTPERRORTYPE_SSL HttpErrorType = "ssl"
	HTTPERRORTYPE_RECEIVE HttpErrorType = "receive"
)

// All allowed values of HttpErrorType enum
var AllowedHttpErrorTypeEnumValues = []HttpErrorType{
	"connect",
	"dns",
	"http",
	"none",
	"send",
	"ssl",
	"receive",
}

func (v *HttpErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpErrorType(value)
	for _, existing := range AllowedHttpErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpErrorType", value)
}

// NewHttpErrorTypeFromValue returns a pointer to a valid HttpErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpErrorTypeFromValue(v string) (*HttpErrorType, error) {
	ev := HttpErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpErrorType: valid values are %v", v, AllowedHttpErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpErrorType) IsValid() bool {
	for _, existing := range AllowedHttpErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpErrorType value
func (v HttpErrorType) Ptr() *HttpErrorType {
	return &v
}

type NullableHttpErrorType struct {
	value *HttpErrorType
	isSet bool
}

func (v NullableHttpErrorType) Get() *HttpErrorType {
	return v.value
}

func (v *NullableHttpErrorType) Set(val *HttpErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpErrorType(val *HttpErrorType) *NullableHttpErrorType {
	return &NullableHttpErrorType{value: val, isSet: true}
}

func (v NullableHttpErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

