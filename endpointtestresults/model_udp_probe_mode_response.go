/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// UdpProbeModeResponse Probe mode used by network test, only valid when the protocol is set to UDP.
type UdpProbeModeResponse string

// List of UdpProbeModeResponse
const (
	UDPPROBEMODERESPONSE_STUN_PCAP UdpProbeModeResponse = "stun-pcap"
	UDPPROBEMODERESPONSE_UNKNOWN UdpProbeModeResponse = "unknown"
)

// All allowed values of UdpProbeModeResponse enum
var AllowedUdpProbeModeResponseEnumValues = []UdpProbeModeResponse{
	"stun-pcap",
	"unknown",
}

func (v *UdpProbeModeResponse) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UdpProbeModeResponse(value)
	for _, existing := range AllowedUdpProbeModeResponseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UdpProbeModeResponse", value)
}

// NewUdpProbeModeResponseFromValue returns a pointer to a valid UdpProbeModeResponse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUdpProbeModeResponseFromValue(v string) (*UdpProbeModeResponse, error) {
	ev := UdpProbeModeResponse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UdpProbeModeResponse: valid values are %v", v, AllowedUdpProbeModeResponseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UdpProbeModeResponse) IsValid() bool {
	for _, existing := range AllowedUdpProbeModeResponseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UdpProbeModeResponse value
func (v UdpProbeModeResponse) Ptr() *UdpProbeModeResponse {
	return &v
}

type NullableUdpProbeModeResponse struct {
	value *UdpProbeModeResponse
	isSet bool
}

func (v NullableUdpProbeModeResponse) Get() *UdpProbeModeResponse {
	return v.value
}

func (v *NullableUdpProbeModeResponse) Set(val *UdpProbeModeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUdpProbeModeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUdpProbeModeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdpProbeModeResponse(val *UdpProbeModeResponse) *NullableUdpProbeModeResponse {
	return &NullableUdpProbeModeResponse{value: val, isSet: true}
}

func (v NullableUdpProbeModeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdpProbeModeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

