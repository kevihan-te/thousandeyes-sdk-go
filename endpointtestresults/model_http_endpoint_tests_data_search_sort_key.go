/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
	"fmt"
)

// HttpEndpointTestsDataSearchSortKey the model 'HttpEndpointTestsDataSearchSortKey'
type HttpEndpointTestsDataSearchSortKey string

// List of HttpEndpointTestsDataSearchSortKey
const (
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_ROUND_ID HttpEndpointTestsDataSearchSortKey = "round-id"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_RESPONSE_TIME HttpEndpointTestsDataSearchSortKey = "response-time"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_DNS_TIME HttpEndpointTestsDataSearchSortKey = "dns-time"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_CONNECT_TIME HttpEndpointTestsDataSearchSortKey = "connect-time"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_SSL_TIME HttpEndpointTestsDataSearchSortKey = "ssl-time"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_WAIT_TIME HttpEndpointTestsDataSearchSortKey = "wait-time"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_RESPONSE_CODE HttpEndpointTestsDataSearchSortKey = "response-code"
	HTTPENDPOINTTESTSDATASEARCHSORTKEY_WIRE_SIZE HttpEndpointTestsDataSearchSortKey = "wire-size"
)

// All allowed values of HttpEndpointTestsDataSearchSortKey enum
var AllowedHttpEndpointTestsDataSearchSortKeyEnumValues = []HttpEndpointTestsDataSearchSortKey{
	"round-id",
	"response-time",
	"dns-time",
	"connect-time",
	"ssl-time",
	"wait-time",
	"response-code",
	"wire-size",
}

func (v *HttpEndpointTestsDataSearchSortKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpEndpointTestsDataSearchSortKey(value)
	for _, existing := range AllowedHttpEndpointTestsDataSearchSortKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpEndpointTestsDataSearchSortKey", value)
}

// NewHttpEndpointTestsDataSearchSortKeyFromValue returns a pointer to a valid HttpEndpointTestsDataSearchSortKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpEndpointTestsDataSearchSortKeyFromValue(v string) (*HttpEndpointTestsDataSearchSortKey, error) {
	ev := HttpEndpointTestsDataSearchSortKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpEndpointTestsDataSearchSortKey: valid values are %v", v, AllowedHttpEndpointTestsDataSearchSortKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpEndpointTestsDataSearchSortKey) IsValid() bool {
	for _, existing := range AllowedHttpEndpointTestsDataSearchSortKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpEndpointTestsDataSearchSortKey value
func (v HttpEndpointTestsDataSearchSortKey) Ptr() *HttpEndpointTestsDataSearchSortKey {
	return &v
}

type NullableHttpEndpointTestsDataSearchSortKey struct {
	value *HttpEndpointTestsDataSearchSortKey
	isSet bool
}

func (v NullableHttpEndpointTestsDataSearchSortKey) Get() *HttpEndpointTestsDataSearchSortKey {
	return v.value
}

func (v *NullableHttpEndpointTestsDataSearchSortKey) Set(val *HttpEndpointTestsDataSearchSortKey) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpEndpointTestsDataSearchSortKey) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpEndpointTestsDataSearchSortKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpEndpointTestsDataSearchSortKey(val *HttpEndpointTestsDataSearchSortKey) *NullableHttpEndpointTestsDataSearchSortKey {
	return &NullableHttpEndpointTestsDataSearchSortKey{value: val, isSet: true}
}

func (v NullableHttpEndpointTestsDataSearchSortKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpEndpointTestsDataSearchSortKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

