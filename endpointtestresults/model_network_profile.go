/*
Endpoint Test Results API

Retrieve results for scheduled and dynamic tests on endpoint agents.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointtestresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NetworkProfile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NetworkProfile{}

// NetworkProfile struct for NetworkProfile
type NetworkProfile struct {
	// Network IP address.
	IpAddress *string `json:"ipAddress,omitempty"`
	// Network subnet mask - only for IPv4.
	SubnetMask *string `json:"subnetMask,omitempty"`
	// Network public IP address.
	PublicIpAddress *string `json:"publicIpAddress,omitempty"`
	// Network local prefix.
	LocalPrefix *string `json:"localPrefix,omitempty"`
	// Network public IP range.
	PublicIpRange *string `json:"publicIpRange,omitempty"`
	// Network DNS servers.
	DnsServers []string `json:"dnsServers,omitempty"`
	HardwareType *InterfaceHardwareType `json:"hardwareType,omitempty"`
	// Network interface name.
	InterfaceName *string `json:"interfaceName,omitempty"`
	// Only present when there is an error
	Error *string `json:"error,omitempty"`
	// Network gateway address.
	Gateway *string `json:"gateway,omitempty"`
	WirelessProfile *NetworkWirelessProfile `json:"wirelessProfile,omitempty"`
	ProxyProfile *NetworkProxyProfile `json:"proxyProfile,omitempty"`
	EthernetProfile *EndpointTestEthernetProfile `json:"ethernetProfile,omitempty"`
	PreviousInterface *NetworkInterface `json:"previousInterface,omitempty"`
}

// NewNetworkProfile instantiates a new NetworkProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkProfile() *NetworkProfile {
	this := NetworkProfile{}
	return &this
}

// NewNetworkProfileWithDefaults instantiates a new NetworkProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkProfileWithDefaults() *NetworkProfile {
	this := NetworkProfile{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *NetworkProfile) GetIpAddress() string {
	if o == nil || utils.IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetIpAddressOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *NetworkProfile) HasIpAddress() bool {
	if o != nil && !utils.IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *NetworkProfile) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *NetworkProfile) GetSubnetMask() string {
	if o == nil || utils.IsNil(o.SubnetMask) {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetSubnetMaskOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubnetMask) {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *NetworkProfile) HasSubnetMask() bool {
	if o != nil && !utils.IsNil(o.SubnetMask) {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *NetworkProfile) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

// GetPublicIpAddress returns the PublicIpAddress field value if set, zero value otherwise.
func (o *NetworkProfile) GetPublicIpAddress() string {
	if o == nil || utils.IsNil(o.PublicIpAddress) {
		var ret string
		return ret
	}
	return *o.PublicIpAddress
}

// GetPublicIpAddressOk returns a tuple with the PublicIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetPublicIpAddressOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PublicIpAddress) {
		return nil, false
	}
	return o.PublicIpAddress, true
}

// HasPublicIpAddress returns a boolean if a field has been set.
func (o *NetworkProfile) HasPublicIpAddress() bool {
	if o != nil && !utils.IsNil(o.PublicIpAddress) {
		return true
	}

	return false
}

// SetPublicIpAddress gets a reference to the given string and assigns it to the PublicIpAddress field.
func (o *NetworkProfile) SetPublicIpAddress(v string) {
	o.PublicIpAddress = &v
}

// GetLocalPrefix returns the LocalPrefix field value if set, zero value otherwise.
func (o *NetworkProfile) GetLocalPrefix() string {
	if o == nil || utils.IsNil(o.LocalPrefix) {
		var ret string
		return ret
	}
	return *o.LocalPrefix
}

// GetLocalPrefixOk returns a tuple with the LocalPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetLocalPrefixOk() (*string, bool) {
	if o == nil || utils.IsNil(o.LocalPrefix) {
		return nil, false
	}
	return o.LocalPrefix, true
}

// HasLocalPrefix returns a boolean if a field has been set.
func (o *NetworkProfile) HasLocalPrefix() bool {
	if o != nil && !utils.IsNil(o.LocalPrefix) {
		return true
	}

	return false
}

// SetLocalPrefix gets a reference to the given string and assigns it to the LocalPrefix field.
func (o *NetworkProfile) SetLocalPrefix(v string) {
	o.LocalPrefix = &v
}

// GetPublicIpRange returns the PublicIpRange field value if set, zero value otherwise.
func (o *NetworkProfile) GetPublicIpRange() string {
	if o == nil || utils.IsNil(o.PublicIpRange) {
		var ret string
		return ret
	}
	return *o.PublicIpRange
}

// GetPublicIpRangeOk returns a tuple with the PublicIpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetPublicIpRangeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PublicIpRange) {
		return nil, false
	}
	return o.PublicIpRange, true
}

// HasPublicIpRange returns a boolean if a field has been set.
func (o *NetworkProfile) HasPublicIpRange() bool {
	if o != nil && !utils.IsNil(o.PublicIpRange) {
		return true
	}

	return false
}

// SetPublicIpRange gets a reference to the given string and assigns it to the PublicIpRange field.
func (o *NetworkProfile) SetPublicIpRange(v string) {
	o.PublicIpRange = &v
}

// GetDnsServers returns the DnsServers field value if set, zero value otherwise.
func (o *NetworkProfile) GetDnsServers() []string {
	if o == nil || utils.IsNil(o.DnsServers) {
		var ret []string
		return ret
	}
	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetDnsServersOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.DnsServers) {
		return nil, false
	}
	return o.DnsServers, true
}

// HasDnsServers returns a boolean if a field has been set.
func (o *NetworkProfile) HasDnsServers() bool {
	if o != nil && !utils.IsNil(o.DnsServers) {
		return true
	}

	return false
}

// SetDnsServers gets a reference to the given []string and assigns it to the DnsServers field.
func (o *NetworkProfile) SetDnsServers(v []string) {
	o.DnsServers = v
}

// GetHardwareType returns the HardwareType field value if set, zero value otherwise.
func (o *NetworkProfile) GetHardwareType() InterfaceHardwareType {
	if o == nil || utils.IsNil(o.HardwareType) {
		var ret InterfaceHardwareType
		return ret
	}
	return *o.HardwareType
}

// GetHardwareTypeOk returns a tuple with the HardwareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetHardwareTypeOk() (*InterfaceHardwareType, bool) {
	if o == nil || utils.IsNil(o.HardwareType) {
		return nil, false
	}
	return o.HardwareType, true
}

// HasHardwareType returns a boolean if a field has been set.
func (o *NetworkProfile) HasHardwareType() bool {
	if o != nil && !utils.IsNil(o.HardwareType) {
		return true
	}

	return false
}

// SetHardwareType gets a reference to the given InterfaceHardwareType and assigns it to the HardwareType field.
func (o *NetworkProfile) SetHardwareType(v InterfaceHardwareType) {
	o.HardwareType = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *NetworkProfile) GetInterfaceName() string {
	if o == nil || utils.IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetInterfaceNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *NetworkProfile) HasInterfaceName() bool {
	if o != nil && !utils.IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *NetworkProfile) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *NetworkProfile) GetError() string {
	if o == nil || utils.IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetErrorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *NetworkProfile) HasError() bool {
	if o != nil && !utils.IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *NetworkProfile) SetError(v string) {
	o.Error = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *NetworkProfile) GetGateway() string {
	if o == nil || utils.IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetGatewayOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *NetworkProfile) HasGateway() bool {
	if o != nil && !utils.IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *NetworkProfile) SetGateway(v string) {
	o.Gateway = &v
}

// GetWirelessProfile returns the WirelessProfile field value if set, zero value otherwise.
func (o *NetworkProfile) GetWirelessProfile() NetworkWirelessProfile {
	if o == nil || utils.IsNil(o.WirelessProfile) {
		var ret NetworkWirelessProfile
		return ret
	}
	return *o.WirelessProfile
}

// GetWirelessProfileOk returns a tuple with the WirelessProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetWirelessProfileOk() (*NetworkWirelessProfile, bool) {
	if o == nil || utils.IsNil(o.WirelessProfile) {
		return nil, false
	}
	return o.WirelessProfile, true
}

// HasWirelessProfile returns a boolean if a field has been set.
func (o *NetworkProfile) HasWirelessProfile() bool {
	if o != nil && !utils.IsNil(o.WirelessProfile) {
		return true
	}

	return false
}

// SetWirelessProfile gets a reference to the given NetworkWirelessProfile and assigns it to the WirelessProfile field.
func (o *NetworkProfile) SetWirelessProfile(v NetworkWirelessProfile) {
	o.WirelessProfile = &v
}

// GetProxyProfile returns the ProxyProfile field value if set, zero value otherwise.
func (o *NetworkProfile) GetProxyProfile() NetworkProxyProfile {
	if o == nil || utils.IsNil(o.ProxyProfile) {
		var ret NetworkProxyProfile
		return ret
	}
	return *o.ProxyProfile
}

// GetProxyProfileOk returns a tuple with the ProxyProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetProxyProfileOk() (*NetworkProxyProfile, bool) {
	if o == nil || utils.IsNil(o.ProxyProfile) {
		return nil, false
	}
	return o.ProxyProfile, true
}

// HasProxyProfile returns a boolean if a field has been set.
func (o *NetworkProfile) HasProxyProfile() bool {
	if o != nil && !utils.IsNil(o.ProxyProfile) {
		return true
	}

	return false
}

// SetProxyProfile gets a reference to the given NetworkProxyProfile and assigns it to the ProxyProfile field.
func (o *NetworkProfile) SetProxyProfile(v NetworkProxyProfile) {
	o.ProxyProfile = &v
}

// GetEthernetProfile returns the EthernetProfile field value if set, zero value otherwise.
func (o *NetworkProfile) GetEthernetProfile() EndpointTestEthernetProfile {
	if o == nil || utils.IsNil(o.EthernetProfile) {
		var ret EndpointTestEthernetProfile
		return ret
	}
	return *o.EthernetProfile
}

// GetEthernetProfileOk returns a tuple with the EthernetProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetEthernetProfileOk() (*EndpointTestEthernetProfile, bool) {
	if o == nil || utils.IsNil(o.EthernetProfile) {
		return nil, false
	}
	return o.EthernetProfile, true
}

// HasEthernetProfile returns a boolean if a field has been set.
func (o *NetworkProfile) HasEthernetProfile() bool {
	if o != nil && !utils.IsNil(o.EthernetProfile) {
		return true
	}

	return false
}

// SetEthernetProfile gets a reference to the given EndpointTestEthernetProfile and assigns it to the EthernetProfile field.
func (o *NetworkProfile) SetEthernetProfile(v EndpointTestEthernetProfile) {
	o.EthernetProfile = &v
}

// GetPreviousInterface returns the PreviousInterface field value if set, zero value otherwise.
func (o *NetworkProfile) GetPreviousInterface() NetworkInterface {
	if o == nil || utils.IsNil(o.PreviousInterface) {
		var ret NetworkInterface
		return ret
	}
	return *o.PreviousInterface
}

// GetPreviousInterfaceOk returns a tuple with the PreviousInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkProfile) GetPreviousInterfaceOk() (*NetworkInterface, bool) {
	if o == nil || utils.IsNil(o.PreviousInterface) {
		return nil, false
	}
	return o.PreviousInterface, true
}

// HasPreviousInterface returns a boolean if a field has been set.
func (o *NetworkProfile) HasPreviousInterface() bool {
	if o != nil && !utils.IsNil(o.PreviousInterface) {
		return true
	}

	return false
}

// SetPreviousInterface gets a reference to the given NetworkInterface and assigns it to the PreviousInterface field.
func (o *NetworkProfile) SetPreviousInterface(v NetworkInterface) {
	o.PreviousInterface = &v
}

func (o NetworkProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !utils.IsNil(o.SubnetMask) {
		toSerialize["subnetMask"] = o.SubnetMask
	}
	if !utils.IsNil(o.PublicIpAddress) {
		toSerialize["publicIpAddress"] = o.PublicIpAddress
	}
	if !utils.IsNil(o.LocalPrefix) {
		toSerialize["localPrefix"] = o.LocalPrefix
	}
	if !utils.IsNil(o.PublicIpRange) {
		toSerialize["publicIpRange"] = o.PublicIpRange
	}
	if !utils.IsNil(o.DnsServers) {
		toSerialize["dnsServers"] = o.DnsServers
	}
	if !utils.IsNil(o.HardwareType) {
		toSerialize["hardwareType"] = o.HardwareType
	}
	if !utils.IsNil(o.InterfaceName) {
		toSerialize["interfaceName"] = o.InterfaceName
	}
	if !utils.IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !utils.IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !utils.IsNil(o.WirelessProfile) {
		toSerialize["wirelessProfile"] = o.WirelessProfile
	}
	if !utils.IsNil(o.ProxyProfile) {
		toSerialize["proxyProfile"] = o.ProxyProfile
	}
	if !utils.IsNil(o.EthernetProfile) {
		toSerialize["ethernetProfile"] = o.EthernetProfile
	}
	if !utils.IsNil(o.PreviousInterface) {
		toSerialize["previousInterface"] = o.PreviousInterface
	}
	return toSerialize, nil
}

type NullableNetworkProfile struct {
	value *NetworkProfile
	isSet bool
}

func (v NullableNetworkProfile) Get() *NetworkProfile {
	return v.value
}

func (v *NullableNetworkProfile) Set(val *NetworkProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkProfile(val *NetworkProfile) *NullableNetworkProfile {
	return &NullableNetworkProfile{value: val, isSet: true}
}

func (v NullableNetworkProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


