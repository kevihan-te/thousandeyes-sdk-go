/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
	"fmt"
)

// Expand the model 'Expand'
type Expand string

// List of Expand
const (
	EXPAND_HEADER Expand = "header"
	EXPAND_CERTIFICATE Expand = "certificate"
)

// All allowed values of Expand enum
var AllowedExpandEnumValues = []Expand{
	"header",
	"certificate",
}

func (v *Expand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Expand(value)
	for _, existing := range AllowedExpandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Expand", value)
}

// NewExpandFromValue returns a pointer to a valid Expand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpandFromValue(v string) (*Expand, error) {
	ev := Expand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Expand: valid values are %v", v, AllowedExpandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Expand) IsValid() bool {
	for _, existing := range AllowedExpandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Expand value
func (v Expand) Ptr() *Expand {
	return &v
}

type NullableExpand struct {
	value *Expand
	isSet bool
}

func (v NullableExpand) Get() *Expand {
	return v.value
}

func (v *NullableExpand) Set(val *Expand) {
	v.value = val
	v.isSet = true
}

func (v NullableExpand) IsSet() bool {
	return v.isSet
}

func (v *NullableExpand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpand(val *Expand) *NullableExpand {
	return &NullableExpand{value: val, isSet: true}
}

func (v NullableExpand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

