/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the PageLoadDetailTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PageLoadDetailTestResult{}

// PageLoadDetailTestResult struct for PageLoadDetailTestResult
type PageLoadDetailTestResult struct {
	// Data point date UTC (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	RoundId *int32 `json:"roundId,omitempty"`
	Links *TestResultAppLinks `json:"_links,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	StartTime *int32 `json:"startTime,omitempty"`
	// Epoch time (seconds) indicating the end time of the round
	EndTime *int32 `json:"endTime,omitempty"`
	Agent *TestResultAgent `json:"agent,omitempty"`
	// Time to first byte in milliseconds
	ResponseTime *float64 `json:"responseTime,omitempty"`
	// Sum of wire size of all objects on page in bytes
	TotalSize *int32 `json:"totalSize,omitempty"`
	// Number of objects found on the page
	NumObjects *int32 `json:"numObjects,omitempty"`
	// Number of objects which encountered errors during download
	NumErrors *int32 `json:"numErrors,omitempty"`
	// Time to interaction in milliseconds
	DomLoadTime *int32 `json:"domLoadTime,omitempty"`
	// Time to completely load page in milliseconds
	PageLoadTime *int32 `json:"pageLoadTime,omitempty"`
	// See [HAR specification](http://www.softwareishard.com/blog/har-12-spec/) for details
	Har map[string]interface{} `json:"har,omitempty"`
}

// NewPageLoadDetailTestResult instantiates a new PageLoadDetailTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageLoadDetailTestResult() *PageLoadDetailTestResult {
	this := PageLoadDetailTestResult{}
	return &this
}

// NewPageLoadDetailTestResultWithDefaults instantiates a new PageLoadDetailTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageLoadDetailTestResultWithDefaults() *PageLoadDetailTestResult {
	this := PageLoadDetailTestResult{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *PageLoadDetailTestResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *PageLoadDetailTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetLinks() TestResultAppLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestResultAppLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetLinksOk() (*TestResultAppLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestResultAppLinks and assigns it to the Links field.
func (o *PageLoadDetailTestResult) SetLinks(v TestResultAppLinks) {
	o.Links = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetStartTime() int32 {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetStartTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *PageLoadDetailTestResult) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetEndTime() int32 {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret int32
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetEndTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int32 and assigns it to the EndTime field.
func (o *PageLoadDetailTestResult) SetEndTime(v int32) {
	o.EndTime = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetAgent() TestResultAgent {
	if o == nil || utils.IsNil(o.Agent) {
		var ret TestResultAgent
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetAgentOk() (*TestResultAgent, bool) {
	if o == nil || utils.IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasAgent() bool {
	if o != nil && !utils.IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given TestResultAgent and assigns it to the Agent field.
func (o *PageLoadDetailTestResult) SetAgent(v TestResultAgent) {
	o.Agent = &v
}

// GetResponseTime returns the ResponseTime field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetResponseTime() float64 {
	if o == nil || utils.IsNil(o.ResponseTime) {
		var ret float64
		return ret
	}
	return *o.ResponseTime
}

// GetResponseTimeOk returns a tuple with the ResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetResponseTimeOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.ResponseTime) {
		return nil, false
	}
	return o.ResponseTime, true
}

// HasResponseTime returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasResponseTime() bool {
	if o != nil && !utils.IsNil(o.ResponseTime) {
		return true
	}

	return false
}

// SetResponseTime gets a reference to the given float64 and assigns it to the ResponseTime field.
func (o *PageLoadDetailTestResult) SetResponseTime(v float64) {
	o.ResponseTime = &v
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetTotalSize() int32 {
	if o == nil || utils.IsNil(o.TotalSize) {
		var ret int32
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetTotalSizeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TotalSize) {
		return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasTotalSize() bool {
	if o != nil && !utils.IsNil(o.TotalSize) {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given int32 and assigns it to the TotalSize field.
func (o *PageLoadDetailTestResult) SetTotalSize(v int32) {
	o.TotalSize = &v
}

// GetNumObjects returns the NumObjects field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetNumObjects() int32 {
	if o == nil || utils.IsNil(o.NumObjects) {
		var ret int32
		return ret
	}
	return *o.NumObjects
}

// GetNumObjectsOk returns a tuple with the NumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetNumObjectsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumObjects) {
		return nil, false
	}
	return o.NumObjects, true
}

// HasNumObjects returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasNumObjects() bool {
	if o != nil && !utils.IsNil(o.NumObjects) {
		return true
	}

	return false
}

// SetNumObjects gets a reference to the given int32 and assigns it to the NumObjects field.
func (o *PageLoadDetailTestResult) SetNumObjects(v int32) {
	o.NumObjects = &v
}

// GetNumErrors returns the NumErrors field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetNumErrors() int32 {
	if o == nil || utils.IsNil(o.NumErrors) {
		var ret int32
		return ret
	}
	return *o.NumErrors
}

// GetNumErrorsOk returns a tuple with the NumErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetNumErrorsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumErrors) {
		return nil, false
	}
	return o.NumErrors, true
}

// HasNumErrors returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasNumErrors() bool {
	if o != nil && !utils.IsNil(o.NumErrors) {
		return true
	}

	return false
}

// SetNumErrors gets a reference to the given int32 and assigns it to the NumErrors field.
func (o *PageLoadDetailTestResult) SetNumErrors(v int32) {
	o.NumErrors = &v
}

// GetDomLoadTime returns the DomLoadTime field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetDomLoadTime() int32 {
	if o == nil || utils.IsNil(o.DomLoadTime) {
		var ret int32
		return ret
	}
	return *o.DomLoadTime
}

// GetDomLoadTimeOk returns a tuple with the DomLoadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetDomLoadTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DomLoadTime) {
		return nil, false
	}
	return o.DomLoadTime, true
}

// HasDomLoadTime returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasDomLoadTime() bool {
	if o != nil && !utils.IsNil(o.DomLoadTime) {
		return true
	}

	return false
}

// SetDomLoadTime gets a reference to the given int32 and assigns it to the DomLoadTime field.
func (o *PageLoadDetailTestResult) SetDomLoadTime(v int32) {
	o.DomLoadTime = &v
}

// GetPageLoadTime returns the PageLoadTime field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetPageLoadTime() int32 {
	if o == nil || utils.IsNil(o.PageLoadTime) {
		var ret int32
		return ret
	}
	return *o.PageLoadTime
}

// GetPageLoadTimeOk returns a tuple with the PageLoadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetPageLoadTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageLoadTime) {
		return nil, false
	}
	return o.PageLoadTime, true
}

// HasPageLoadTime returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasPageLoadTime() bool {
	if o != nil && !utils.IsNil(o.PageLoadTime) {
		return true
	}

	return false
}

// SetPageLoadTime gets a reference to the given int32 and assigns it to the PageLoadTime field.
func (o *PageLoadDetailTestResult) SetPageLoadTime(v int32) {
	o.PageLoadTime = &v
}

// GetHar returns the Har field value if set, zero value otherwise.
func (o *PageLoadDetailTestResult) GetHar() map[string]interface{} {
	if o == nil || utils.IsNil(o.Har) {
		var ret map[string]interface{}
		return ret
	}
	return o.Har
}

// GetHarOk returns a tuple with the Har field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadDetailTestResult) GetHarOk() (map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.Har) {
		return map[string]interface{}{}, false
	}
	return o.Har, true
}

// HasHar returns a boolean if a field has been set.
func (o *PageLoadDetailTestResult) HasHar() bool {
	if o != nil && !utils.IsNil(o.Har) {
		return true
	}

	return false
}

// SetHar gets a reference to the given map[string]interface{} and assigns it to the Har field.
func (o *PageLoadDetailTestResult) SetHar(v map[string]interface{}) {
	o.Har = v
}

func (o PageLoadDetailTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageLoadDetailTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	if !utils.IsNil(o.ResponseTime) {
		toSerialize["responseTime"] = o.ResponseTime
	}
	if !utils.IsNil(o.TotalSize) {
		toSerialize["totalSize"] = o.TotalSize
	}
	if !utils.IsNil(o.NumObjects) {
		toSerialize["numObjects"] = o.NumObjects
	}
	if !utils.IsNil(o.NumErrors) {
		toSerialize["numErrors"] = o.NumErrors
	}
	if !utils.IsNil(o.DomLoadTime) {
		toSerialize["domLoadTime"] = o.DomLoadTime
	}
	if !utils.IsNil(o.PageLoadTime) {
		toSerialize["pageLoadTime"] = o.PageLoadTime
	}
	if !utils.IsNil(o.Har) {
		toSerialize["har"] = o.Har
	}
	return toSerialize, nil
}

type NullablePageLoadDetailTestResult struct {
	value *PageLoadDetailTestResult
	isSet bool
}

func (v NullablePageLoadDetailTestResult) Get() *PageLoadDetailTestResult {
	return v.value
}

func (v *NullablePageLoadDetailTestResult) Set(val *PageLoadDetailTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullablePageLoadDetailTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullablePageLoadDetailTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageLoadDetailTestResult(val *PageLoadDetailTestResult) *NullablePageLoadDetailTestResult {
	return &NullablePageLoadDetailTestResult{value: val, isSet: true}
}

func (v NullablePageLoadDetailTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageLoadDetailTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


