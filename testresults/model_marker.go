/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Marker type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Marker{}

// Marker struct for Marker
type Marker struct {
	// Name assigned to marker in transaction script
	Name *string `json:"name,omitempty"`
	// Total time recorded by marker in milliseconds
	Duration *int32 `json:"duration,omitempty"`
}

// NewMarker instantiates a new Marker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarker() *Marker {
	this := Marker{}
	return &this
}

// NewMarkerWithDefaults instantiates a new Marker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkerWithDefaults() *Marker {
	this := Marker{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Marker) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Marker) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Marker) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Marker) SetName(v string) {
	o.Name = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Marker) GetDuration() int32 {
	if o == nil || utils.IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Marker) GetDurationOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Marker) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *Marker) SetDuration(v int32) {
	o.Duration = &v
}

func (o Marker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Marker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	return toSerialize, nil
}

type NullableMarker struct {
	value *Marker
	isSet bool
}

func (v NullableMarker) Get() *Marker {
	return v.value
}

func (v *NullableMarker) Set(val *Marker) {
	v.value = val
	v.isSet = true
}

func (v NullableMarker) IsSet() bool {
	return v.isSet
}

func (v *NullableMarker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarker(val *Marker) *NullableMarker {
	return &NullableMarker{value: val, isSet: true}
}

func (v NullableMarker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


