/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TestResultMonitor type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestResultMonitor{}

// TestResultMonitor struct for TestResultMonitor
type TestResultMonitor struct {
	// Unique monitor ID.
	MonitorId *string `json:"monitorId,omitempty"`
	// The name of the Monitor.
	MonitorName *string `json:"monitorName,omitempty"`
	// 2-digit ISO country code.
	CountryId *string `json:"countryId,omitempty"`
}

// NewTestResultMonitor instantiates a new TestResultMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultMonitor() *TestResultMonitor {
	this := TestResultMonitor{}
	return &this
}

// NewTestResultMonitorWithDefaults instantiates a new TestResultMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultMonitorWithDefaults() *TestResultMonitor {
	this := TestResultMonitor{}
	return &this
}

// GetMonitorId returns the MonitorId field value if set, zero value otherwise.
func (o *TestResultMonitor) GetMonitorId() string {
	if o == nil || utils.IsNil(o.MonitorId) {
		var ret string
		return ret
	}
	return *o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultMonitor) GetMonitorIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MonitorId) {
		return nil, false
	}
	return o.MonitorId, true
}

// HasMonitorId returns a boolean if a field has been set.
func (o *TestResultMonitor) HasMonitorId() bool {
	if o != nil && !utils.IsNil(o.MonitorId) {
		return true
	}

	return false
}

// SetMonitorId gets a reference to the given string and assigns it to the MonitorId field.
func (o *TestResultMonitor) SetMonitorId(v string) {
	o.MonitorId = &v
}

// GetMonitorName returns the MonitorName field value if set, zero value otherwise.
func (o *TestResultMonitor) GetMonitorName() string {
	if o == nil || utils.IsNil(o.MonitorName) {
		var ret string
		return ret
	}
	return *o.MonitorName
}

// GetMonitorNameOk returns a tuple with the MonitorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultMonitor) GetMonitorNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.MonitorName) {
		return nil, false
	}
	return o.MonitorName, true
}

// HasMonitorName returns a boolean if a field has been set.
func (o *TestResultMonitor) HasMonitorName() bool {
	if o != nil && !utils.IsNil(o.MonitorName) {
		return true
	}

	return false
}

// SetMonitorName gets a reference to the given string and assigns it to the MonitorName field.
func (o *TestResultMonitor) SetMonitorName(v string) {
	o.MonitorName = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *TestResultMonitor) GetCountryId() string {
	if o == nil || utils.IsNil(o.CountryId) {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultMonitor) GetCountryIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *TestResultMonitor) HasCountryId() bool {
	if o != nil && !utils.IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *TestResultMonitor) SetCountryId(v string) {
	o.CountryId = &v
}

func (o TestResultMonitor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultMonitor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MonitorId) {
		toSerialize["monitorId"] = o.MonitorId
	}
	if !utils.IsNil(o.MonitorName) {
		toSerialize["monitorName"] = o.MonitorName
	}
	if !utils.IsNil(o.CountryId) {
		toSerialize["countryId"] = o.CountryId
	}
	return toSerialize, nil
}

type NullableTestResultMonitor struct {
	value *TestResultMonitor
	isSet bool
}

func (v NullableTestResultMonitor) Get() *TestResultMonitor {
	return v.value
}

func (v *NullableTestResultMonitor) Set(val *TestResultMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultMonitor(val *TestResultMonitor) *NullableTestResultMonitor {
	return &NullableTestResultMonitor{value: val, isSet: true}
}

func (v NullableTestResultMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


