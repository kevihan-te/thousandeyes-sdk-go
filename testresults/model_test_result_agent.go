/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TestResultAgent type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestResultAgent{}

// TestResultAgent struct for TestResultAgent
type TestResultAgent struct {
	// Unique agent ID
	AgentId *string `json:"agentId,omitempty"`
	// Agent name
	AgentName *string `json:"agentName,omitempty"`
	// 2-digit ISO country code
	CountryId *string `json:"countryId,omitempty"`
	// Location of the agent.
	Location *string `json:"location,omitempty"`
}

// NewTestResultAgent instantiates a new TestResultAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestResultAgent() *TestResultAgent {
	this := TestResultAgent{}
	return &this
}

// NewTestResultAgentWithDefaults instantiates a new TestResultAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestResultAgentWithDefaults() *TestResultAgent {
	this := TestResultAgent{}
	return &this
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *TestResultAgent) GetAgentId() string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultAgent) GetAgentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *TestResultAgent) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *TestResultAgent) SetAgentId(v string) {
	o.AgentId = &v
}

// GetAgentName returns the AgentName field value if set, zero value otherwise.
func (o *TestResultAgent) GetAgentName() string {
	if o == nil || utils.IsNil(o.AgentName) {
		var ret string
		return ret
	}
	return *o.AgentName
}

// GetAgentNameOk returns a tuple with the AgentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultAgent) GetAgentNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentName) {
		return nil, false
	}
	return o.AgentName, true
}

// HasAgentName returns a boolean if a field has been set.
func (o *TestResultAgent) HasAgentName() bool {
	if o != nil && !utils.IsNil(o.AgentName) {
		return true
	}

	return false
}

// SetAgentName gets a reference to the given string and assigns it to the AgentName field.
func (o *TestResultAgent) SetAgentName(v string) {
	o.AgentName = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *TestResultAgent) GetCountryId() string {
	if o == nil || utils.IsNil(o.CountryId) {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultAgent) GetCountryIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *TestResultAgent) HasCountryId() bool {
	if o != nil && !utils.IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *TestResultAgent) SetCountryId(v string) {
	o.CountryId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *TestResultAgent) GetLocation() string {
	if o == nil || utils.IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestResultAgent) GetLocationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *TestResultAgent) HasLocation() bool {
	if o != nil && !utils.IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *TestResultAgent) SetLocation(v string) {
	o.Location = &v
}

func (o TestResultAgent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestResultAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.AgentName) {
		toSerialize["agentName"] = o.AgentName
	}
	if !utils.IsNil(o.CountryId) {
		toSerialize["countryId"] = o.CountryId
	}
	if !utils.IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableTestResultAgent struct {
	value *TestResultAgent
	isSet bool
}

func (v NullableTestResultAgent) Get() *TestResultAgent {
	return v.value
}

func (v *NullableTestResultAgent) Set(val *TestResultAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableTestResultAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableTestResultAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestResultAgent(val *TestResultAgent) *NullableTestResultAgent {
	return &NullableTestResultAgent{value: val, isSet: true}
}

func (v NullableTestResultAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestResultAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


