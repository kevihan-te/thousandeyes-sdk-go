/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the DnsTraceTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DnsTraceTestResult{}

// DnsTraceTestResult struct for DnsTraceTestResult
type DnsTraceTestResult struct {
	// Data point date UTC (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	RoundId *int32 `json:"roundId,omitempty"`
	Links *TestResultAppLinks `json:"_links,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	StartTime *int32 `json:"startTime,omitempty"`
	// Epoch time (seconds) indicating the end time of the round
	EndTime *int32 `json:"endTime,omitempty"`
	Agent *TestResultAgent `json:"agent,omitempty"`
	// Verbose output from the trace request
	Output *string `json:"output,omitempty"`
	// Error details, if an error were encountered
	ErrorDetails *string `json:"errorDetails,omitempty"`
	// How many queries were required to get to the requested result
	Queries *int32 `json:"queries,omitempty"`
	// How many queries failed while getting to the requested result
	FailedQueries *int32 `json:"failedQueries,omitempty"`
	// DNS server that provided the final result
	FinalServerQueried *string `json:"finalServerQueried,omitempty"`
	// How long the final query took to return a response
	FinalQueryTime *int32 `json:"finalQueryTime,omitempty"`
	// Final mappings returned from the request
	Mappings *string `json:"mappings,omitempty"`
}

// NewDnsTraceTestResult instantiates a new DnsTraceTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsTraceTestResult() *DnsTraceTestResult {
	this := DnsTraceTestResult{}
	return &this
}

// NewDnsTraceTestResultWithDefaults instantiates a new DnsTraceTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsTraceTestResultWithDefaults() *DnsTraceTestResult {
	this := DnsTraceTestResult{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *DnsTraceTestResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *DnsTraceTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetLinks() TestResultAppLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestResultAppLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetLinksOk() (*TestResultAppLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestResultAppLinks and assigns it to the Links field.
func (o *DnsTraceTestResult) SetLinks(v TestResultAppLinks) {
	o.Links = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetStartTime() int32 {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetStartTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *DnsTraceTestResult) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetEndTime() int32 {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret int32
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetEndTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int32 and assigns it to the EndTime field.
func (o *DnsTraceTestResult) SetEndTime(v int32) {
	o.EndTime = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetAgent() TestResultAgent {
	if o == nil || utils.IsNil(o.Agent) {
		var ret TestResultAgent
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetAgentOk() (*TestResultAgent, bool) {
	if o == nil || utils.IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasAgent() bool {
	if o != nil && !utils.IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given TestResultAgent and assigns it to the Agent field.
func (o *DnsTraceTestResult) SetAgent(v TestResultAgent) {
	o.Agent = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetOutput() string {
	if o == nil || utils.IsNil(o.Output) {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetOutputOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasOutput() bool {
	if o != nil && !utils.IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *DnsTraceTestResult) SetOutput(v string) {
	o.Output = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetErrorDetails() string {
	if o == nil || utils.IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetErrorDetailsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasErrorDetails() bool {
	if o != nil && !utils.IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *DnsTraceTestResult) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetQueries() int32 {
	if o == nil || utils.IsNil(o.Queries) {
		var ret int32
		return ret
	}
	return *o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetQueriesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Queries) {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasQueries() bool {
	if o != nil && !utils.IsNil(o.Queries) {
		return true
	}

	return false
}

// SetQueries gets a reference to the given int32 and assigns it to the Queries field.
func (o *DnsTraceTestResult) SetQueries(v int32) {
	o.Queries = &v
}

// GetFailedQueries returns the FailedQueries field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetFailedQueries() int32 {
	if o == nil || utils.IsNil(o.FailedQueries) {
		var ret int32
		return ret
	}
	return *o.FailedQueries
}

// GetFailedQueriesOk returns a tuple with the FailedQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetFailedQueriesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.FailedQueries) {
		return nil, false
	}
	return o.FailedQueries, true
}

// HasFailedQueries returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasFailedQueries() bool {
	if o != nil && !utils.IsNil(o.FailedQueries) {
		return true
	}

	return false
}

// SetFailedQueries gets a reference to the given int32 and assigns it to the FailedQueries field.
func (o *DnsTraceTestResult) SetFailedQueries(v int32) {
	o.FailedQueries = &v
}

// GetFinalServerQueried returns the FinalServerQueried field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetFinalServerQueried() string {
	if o == nil || utils.IsNil(o.FinalServerQueried) {
		var ret string
		return ret
	}
	return *o.FinalServerQueried
}

// GetFinalServerQueriedOk returns a tuple with the FinalServerQueried field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetFinalServerQueriedOk() (*string, bool) {
	if o == nil || utils.IsNil(o.FinalServerQueried) {
		return nil, false
	}
	return o.FinalServerQueried, true
}

// HasFinalServerQueried returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasFinalServerQueried() bool {
	if o != nil && !utils.IsNil(o.FinalServerQueried) {
		return true
	}

	return false
}

// SetFinalServerQueried gets a reference to the given string and assigns it to the FinalServerQueried field.
func (o *DnsTraceTestResult) SetFinalServerQueried(v string) {
	o.FinalServerQueried = &v
}

// GetFinalQueryTime returns the FinalQueryTime field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetFinalQueryTime() int32 {
	if o == nil || utils.IsNil(o.FinalQueryTime) {
		var ret int32
		return ret
	}
	return *o.FinalQueryTime
}

// GetFinalQueryTimeOk returns a tuple with the FinalQueryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetFinalQueryTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.FinalQueryTime) {
		return nil, false
	}
	return o.FinalQueryTime, true
}

// HasFinalQueryTime returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasFinalQueryTime() bool {
	if o != nil && !utils.IsNil(o.FinalQueryTime) {
		return true
	}

	return false
}

// SetFinalQueryTime gets a reference to the given int32 and assigns it to the FinalQueryTime field.
func (o *DnsTraceTestResult) SetFinalQueryTime(v int32) {
	o.FinalQueryTime = &v
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *DnsTraceTestResult) GetMappings() string {
	if o == nil || utils.IsNil(o.Mappings) {
		var ret string
		return ret
	}
	return *o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsTraceTestResult) GetMappingsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Mappings) {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *DnsTraceTestResult) HasMappings() bool {
	if o != nil && !utils.IsNil(o.Mappings) {
		return true
	}

	return false
}

// SetMappings gets a reference to the given string and assigns it to the Mappings field.
func (o *DnsTraceTestResult) SetMappings(v string) {
	o.Mappings = &v
}

func (o DnsTraceTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsTraceTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	if !utils.IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !utils.IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !utils.IsNil(o.Queries) {
		toSerialize["queries"] = o.Queries
	}
	if !utils.IsNil(o.FailedQueries) {
		toSerialize["failedQueries"] = o.FailedQueries
	}
	if !utils.IsNil(o.FinalServerQueried) {
		toSerialize["finalServerQueried"] = o.FinalServerQueried
	}
	if !utils.IsNil(o.FinalQueryTime) {
		toSerialize["finalQueryTime"] = o.FinalQueryTime
	}
	if !utils.IsNil(o.Mappings) {
		toSerialize["mappings"] = o.Mappings
	}
	return toSerialize, nil
}

type NullableDnsTraceTestResult struct {
	value *DnsTraceTestResult
	isSet bool
}

func (v NullableDnsTraceTestResult) Get() *DnsTraceTestResult {
	return v.value
}

func (v *NullableDnsTraceTestResult) Set(val *DnsTraceTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsTraceTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsTraceTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsTraceTestResult(val *DnsTraceTestResult) *NullableDnsTraceTestResult {
	return &NullableDnsTraceTestResult{value: val, isSet: true}
}

func (v NullableDnsTraceTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsTraceTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


