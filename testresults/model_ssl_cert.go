/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the SslCert type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SslCert{}

// SslCert struct for SslCert
type SslCert struct {
	// Days until certificate expires, rounded down. 0 is shown if there are less than 24 hours remaining. Calculated when the test was executed.
	DaysUntilExpiry *int32 `json:"daysUntilExpiry,omitempty"`
	// True when certificate fetch date is within the valid certificate date range, false otherwise
	IsFetchDateInValidCertDateRange *bool `json:"isFetchDateInValidCertDateRange,omitempty"`
	// This field is implicitly true; it is output only when false. false indicates this certificate was missing a valid signing certificate in the chain.
	HasValidSigningCert *bool `json:"hasValidSigningCert,omitempty"`
	// Certificate issuer
	IssuerName *string `json:"issuerName,omitempty"`
	// Certificate is not valid after this date
	ValidBefore *time.Time `json:"validBefore,omitempty"`
	// Certificate is not valid before this date
	ValidAfter *time.Time `json:"validAfter,omitempty"`
	// Alternative name(s) of the certificate subject, extracted from the Subject Alternative Name (SAN) X.509 certificate extension, for example example.com, www2.example.com
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`
	// certificate’s subject name - a value of the common name (CN) RDN from the certificate’s Subject attribute, for example www.example.com
	SubjectName *string `json:"subjectName,omitempty"`
}

// NewSslCert instantiates a new SslCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslCert() *SslCert {
	this := SslCert{}
	return &this
}

// NewSslCertWithDefaults instantiates a new SslCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslCertWithDefaults() *SslCert {
	this := SslCert{}
	return &this
}

// GetDaysUntilExpiry returns the DaysUntilExpiry field value if set, zero value otherwise.
func (o *SslCert) GetDaysUntilExpiry() int32 {
	if o == nil || utils.IsNil(o.DaysUntilExpiry) {
		var ret int32
		return ret
	}
	return *o.DaysUntilExpiry
}

// GetDaysUntilExpiryOk returns a tuple with the DaysUntilExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetDaysUntilExpiryOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DaysUntilExpiry) {
		return nil, false
	}
	return o.DaysUntilExpiry, true
}

// HasDaysUntilExpiry returns a boolean if a field has been set.
func (o *SslCert) HasDaysUntilExpiry() bool {
	if o != nil && !utils.IsNil(o.DaysUntilExpiry) {
		return true
	}

	return false
}

// SetDaysUntilExpiry gets a reference to the given int32 and assigns it to the DaysUntilExpiry field.
func (o *SslCert) SetDaysUntilExpiry(v int32) {
	o.DaysUntilExpiry = &v
}

// GetIsFetchDateInValidCertDateRange returns the IsFetchDateInValidCertDateRange field value if set, zero value otherwise.
func (o *SslCert) GetIsFetchDateInValidCertDateRange() bool {
	if o == nil || utils.IsNil(o.IsFetchDateInValidCertDateRange) {
		var ret bool
		return ret
	}
	return *o.IsFetchDateInValidCertDateRange
}

// GetIsFetchDateInValidCertDateRangeOk returns a tuple with the IsFetchDateInValidCertDateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetIsFetchDateInValidCertDateRangeOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsFetchDateInValidCertDateRange) {
		return nil, false
	}
	return o.IsFetchDateInValidCertDateRange, true
}

// HasIsFetchDateInValidCertDateRange returns a boolean if a field has been set.
func (o *SslCert) HasIsFetchDateInValidCertDateRange() bool {
	if o != nil && !utils.IsNil(o.IsFetchDateInValidCertDateRange) {
		return true
	}

	return false
}

// SetIsFetchDateInValidCertDateRange gets a reference to the given bool and assigns it to the IsFetchDateInValidCertDateRange field.
func (o *SslCert) SetIsFetchDateInValidCertDateRange(v bool) {
	o.IsFetchDateInValidCertDateRange = &v
}

// GetHasValidSigningCert returns the HasValidSigningCert field value if set, zero value otherwise.
func (o *SslCert) GetHasValidSigningCert() bool {
	if o == nil || utils.IsNil(o.HasValidSigningCert) {
		var ret bool
		return ret
	}
	return *o.HasValidSigningCert
}

// GetHasValidSigningCertOk returns a tuple with the HasValidSigningCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetHasValidSigningCertOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.HasValidSigningCert) {
		return nil, false
	}
	return o.HasValidSigningCert, true
}

// HasHasValidSigningCert returns a boolean if a field has been set.
func (o *SslCert) HasHasValidSigningCert() bool {
	if o != nil && !utils.IsNil(o.HasValidSigningCert) {
		return true
	}

	return false
}

// SetHasValidSigningCert gets a reference to the given bool and assigns it to the HasValidSigningCert field.
func (o *SslCert) SetHasValidSigningCert(v bool) {
	o.HasValidSigningCert = &v
}

// GetIssuerName returns the IssuerName field value if set, zero value otherwise.
func (o *SslCert) GetIssuerName() string {
	if o == nil || utils.IsNil(o.IssuerName) {
		var ret string
		return ret
	}
	return *o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetIssuerNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IssuerName) {
		return nil, false
	}
	return o.IssuerName, true
}

// HasIssuerName returns a boolean if a field has been set.
func (o *SslCert) HasIssuerName() bool {
	if o != nil && !utils.IsNil(o.IssuerName) {
		return true
	}

	return false
}

// SetIssuerName gets a reference to the given string and assigns it to the IssuerName field.
func (o *SslCert) SetIssuerName(v string) {
	o.IssuerName = &v
}

// GetValidBefore returns the ValidBefore field value if set, zero value otherwise.
func (o *SslCert) GetValidBefore() time.Time {
	if o == nil || utils.IsNil(o.ValidBefore) {
		var ret time.Time
		return ret
	}
	return *o.ValidBefore
}

// GetValidBeforeOk returns a tuple with the ValidBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetValidBeforeOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ValidBefore) {
		return nil, false
	}
	return o.ValidBefore, true
}

// HasValidBefore returns a boolean if a field has been set.
func (o *SslCert) HasValidBefore() bool {
	if o != nil && !utils.IsNil(o.ValidBefore) {
		return true
	}

	return false
}

// SetValidBefore gets a reference to the given time.Time and assigns it to the ValidBefore field.
func (o *SslCert) SetValidBefore(v time.Time) {
	o.ValidBefore = &v
}

// GetValidAfter returns the ValidAfter field value if set, zero value otherwise.
func (o *SslCert) GetValidAfter() time.Time {
	if o == nil || utils.IsNil(o.ValidAfter) {
		var ret time.Time
		return ret
	}
	return *o.ValidAfter
}

// GetValidAfterOk returns a tuple with the ValidAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetValidAfterOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ValidAfter) {
		return nil, false
	}
	return o.ValidAfter, true
}

// HasValidAfter returns a boolean if a field has been set.
func (o *SslCert) HasValidAfter() bool {
	if o != nil && !utils.IsNil(o.ValidAfter) {
		return true
	}

	return false
}

// SetValidAfter gets a reference to the given time.Time and assigns it to the ValidAfter field.
func (o *SslCert) SetValidAfter(v time.Time) {
	o.ValidAfter = &v
}

// GetSubjectAlternativeNames returns the SubjectAlternativeNames field value if set, zero value otherwise.
func (o *SslCert) GetSubjectAlternativeNames() []string {
	if o == nil || utils.IsNil(o.SubjectAlternativeNames) {
		var ret []string
		return ret
	}
	return o.SubjectAlternativeNames
}

// GetSubjectAlternativeNamesOk returns a tuple with the SubjectAlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetSubjectAlternativeNamesOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.SubjectAlternativeNames) {
		return nil, false
	}
	return o.SubjectAlternativeNames, true
}

// HasSubjectAlternativeNames returns a boolean if a field has been set.
func (o *SslCert) HasSubjectAlternativeNames() bool {
	if o != nil && !utils.IsNil(o.SubjectAlternativeNames) {
		return true
	}

	return false
}

// SetSubjectAlternativeNames gets a reference to the given []string and assigns it to the SubjectAlternativeNames field.
func (o *SslCert) SetSubjectAlternativeNames(v []string) {
	o.SubjectAlternativeNames = v
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise.
func (o *SslCert) GetSubjectName() string {
	if o == nil || utils.IsNil(o.SubjectName) {
		var ret string
		return ret
	}
	return *o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslCert) GetSubjectNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SubjectName) {
		return nil, false
	}
	return o.SubjectName, true
}

// HasSubjectName returns a boolean if a field has been set.
func (o *SslCert) HasSubjectName() bool {
	if o != nil && !utils.IsNil(o.SubjectName) {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given string and assigns it to the SubjectName field.
func (o *SslCert) SetSubjectName(v string) {
	o.SubjectName = &v
}

func (o SslCert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslCert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.DaysUntilExpiry) {
		toSerialize["daysUntilExpiry"] = o.DaysUntilExpiry
	}
	if !utils.IsNil(o.IsFetchDateInValidCertDateRange) {
		toSerialize["isFetchDateInValidCertDateRange"] = o.IsFetchDateInValidCertDateRange
	}
	if !utils.IsNil(o.HasValidSigningCert) {
		toSerialize["hasValidSigningCert"] = o.HasValidSigningCert
	}
	if !utils.IsNil(o.IssuerName) {
		toSerialize["issuerName"] = o.IssuerName
	}
	if !utils.IsNil(o.ValidBefore) {
		toSerialize["validBefore"] = o.ValidBefore
	}
	if !utils.IsNil(o.ValidAfter) {
		toSerialize["validAfter"] = o.ValidAfter
	}
	if !utils.IsNil(o.SubjectAlternativeNames) {
		toSerialize["subjectAlternativeNames"] = o.SubjectAlternativeNames
	}
	if !utils.IsNil(o.SubjectName) {
		toSerialize["subjectName"] = o.SubjectName
	}
	return toSerialize, nil
}

type NullableSslCert struct {
	value *SslCert
	isSet bool
}

func (v NullableSslCert) Get() *SslCert {
	return v.value
}

func (v *NullableSslCert) Set(val *SslCert) {
	v.value = val
	v.isSet = true
}

func (v NullableSslCert) IsSet() bool {
	return v.isSet
}

func (v *NullableSslCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslCert(val *SslCert) *NullableSslCert {
	return &NullableSslCert{value: val, isSet: true}
}

func (v NullableSslCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


