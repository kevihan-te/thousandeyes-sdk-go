/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
	"fmt"
)

// PathVisDirection Direction of the path trace.
type PathVisDirection string

// List of PathVisDirection
const (
	PATHVISDIRECTION_TO_TARGET PathVisDirection = "to-target"
	PATHVISDIRECTION_FROM_TARGET PathVisDirection = "from-target"
)

// All allowed values of PathVisDirection enum
var AllowedPathVisDirectionEnumValues = []PathVisDirection{
	"to-target",
	"from-target",
}

func (v *PathVisDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PathVisDirection(value)
	for _, existing := range AllowedPathVisDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PathVisDirection", value)
}

// NewPathVisDirectionFromValue returns a pointer to a valid PathVisDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPathVisDirectionFromValue(v string) (*PathVisDirection, error) {
	ev := PathVisDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PathVisDirection: valid values are %v", v, AllowedPathVisDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PathVisDirection) IsValid() bool {
	for _, existing := range AllowedPathVisDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PathVisDirection value
func (v PathVisDirection) Ptr() *PathVisDirection {
	return &v
}

type NullablePathVisDirection struct {
	value *PathVisDirection
	isSet bool
}

func (v NullablePathVisDirection) Get() *PathVisDirection {
	return v.value
}

func (v *NullablePathVisDirection) Set(val *PathVisDirection) {
	v.value = val
	v.isSet = true
}

func (v NullablePathVisDirection) IsSet() bool {
	return v.isSet
}

func (v *NullablePathVisDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathVisDirection(val *PathVisDirection) *NullablePathVisDirection {
	return &NullablePathVisDirection{value: val, isSet: true}
}

func (v NullablePathVisDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathVisDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

