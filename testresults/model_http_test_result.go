/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the HttpTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &HttpTestResult{}

// HttpTestResult struct for HttpTestResult
type HttpTestResult struct {
	// Data point date UTC (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	RoundId *int32 `json:"roundId,omitempty"`
	Links *TestResultAppLinks `json:"_links,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	StartTime *int32 `json:"startTime,omitempty"`
	// Epoch time (seconds) indicating the end time of the round
	EndTime *int32 `json:"endTime,omitempty"`
	Agent *TestResultAgent `json:"agent,omitempty"`
	// IP address of destination server
	ServerIp *string `json:"serverIp,omitempty"`
	// HTTP response code
	ResponseCode *int32 `json:"responseCode,omitempty"`
	// Number of redirects
	NumRedirects *int32 `json:"numRedirects,omitempty"`
	// Cumulative redirect timing in milliseconds
	RedirectTime *int32 `json:"redirectTime,omitempty"`
	// Time required to resolve DNS in milliseconds
	DnsTime *int32 `json:"dnsTime,omitempty"`
	// Time to negotiate SSL/TLS in milliseconds
	SslTime *int32 `json:"sslTime,omitempty"`
	// Time required to establish a TCP connection to the server
	ConnectTime *int32 `json:"connectTime,omitempty"`
	// Time elapsed between completion of request and first byte of response in milliseconds
	WaitTime *int32 `json:"waitTime,omitempty"`
	// Elapsed time between first and last byte of response in milliseconds
	ReceiveTime *int32 `json:"receiveTime,omitempty"`
	// Size of content in bytes
	WireSize *int32 `json:"wireSize,omitempty"`
	// Time to first byte in milliseconds
	ResponseTime *int32 `json:"responseTime,omitempty"`
	// WireSize divided by receiveTime in byter per second
	Throughput *float64 `json:"throughput,omitempty"`
	// response time + receive time
	TotalTime *int32 `json:"totalTime,omitempty"`
	Headers *HttpTestResultHeaders `json:"headers,omitempty"`
	// Type of error encountered; corresponds to phase of connection
	ErrorType *string `json:"errorType,omitempty"`
	// Error details, if an error were encountered
	ErrorDetails *string `json:"errorDetails,omitempty"`
	// Cipher suite
	SslCipher *string `json:"sslCipher,omitempty"`
	// TLS version
	SslVersion *string `json:"sslVersion,omitempty"`
	SslCertificates []SslCert `json:"sslCertificates,omitempty"`
	// A normalized value (0.0-1.0) representing the web application connection health of the test target. Returns negative values as error codes. -1.0 indicates there was insufficient data to calculate the health score.
	HealthScore *float32 `json:"healthScore,omitempty"`
}

// NewHttpTestResult instantiates a new HttpTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpTestResult() *HttpTestResult {
	this := HttpTestResult{}
	return &this
}

// NewHttpTestResultWithDefaults instantiates a new HttpTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpTestResultWithDefaults() *HttpTestResult {
	this := HttpTestResult{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HttpTestResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HttpTestResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *HttpTestResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *HttpTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *HttpTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *HttpTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *HttpTestResult) GetLinks() TestResultAppLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestResultAppLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetLinksOk() (*TestResultAppLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *HttpTestResult) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestResultAppLinks and assigns it to the Links field.
func (o *HttpTestResult) SetLinks(v TestResultAppLinks) {
	o.Links = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetStartTime() int32 {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetStartTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *HttpTestResult) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetEndTime() int32 {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret int32
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetEndTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int32 and assigns it to the EndTime field.
func (o *HttpTestResult) SetEndTime(v int32) {
	o.EndTime = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *HttpTestResult) GetAgent() TestResultAgent {
	if o == nil || utils.IsNil(o.Agent) {
		var ret TestResultAgent
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetAgentOk() (*TestResultAgent, bool) {
	if o == nil || utils.IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *HttpTestResult) HasAgent() bool {
	if o != nil && !utils.IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given TestResultAgent and assigns it to the Agent field.
func (o *HttpTestResult) SetAgent(v TestResultAgent) {
	o.Agent = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *HttpTestResult) GetServerIp() string {
	if o == nil || utils.IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetServerIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *HttpTestResult) HasServerIp() bool {
	if o != nil && !utils.IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *HttpTestResult) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetResponseCode returns the ResponseCode field value if set, zero value otherwise.
func (o *HttpTestResult) GetResponseCode() int32 {
	if o == nil || utils.IsNil(o.ResponseCode) {
		var ret int32
		return ret
	}
	return *o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetResponseCodeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ResponseCode) {
		return nil, false
	}
	return o.ResponseCode, true
}

// HasResponseCode returns a boolean if a field has been set.
func (o *HttpTestResult) HasResponseCode() bool {
	if o != nil && !utils.IsNil(o.ResponseCode) {
		return true
	}

	return false
}

// SetResponseCode gets a reference to the given int32 and assigns it to the ResponseCode field.
func (o *HttpTestResult) SetResponseCode(v int32) {
	o.ResponseCode = &v
}

// GetNumRedirects returns the NumRedirects field value if set, zero value otherwise.
func (o *HttpTestResult) GetNumRedirects() int32 {
	if o == nil || utils.IsNil(o.NumRedirects) {
		var ret int32
		return ret
	}
	return *o.NumRedirects
}

// GetNumRedirectsOk returns a tuple with the NumRedirects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetNumRedirectsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumRedirects) {
		return nil, false
	}
	return o.NumRedirects, true
}

// HasNumRedirects returns a boolean if a field has been set.
func (o *HttpTestResult) HasNumRedirects() bool {
	if o != nil && !utils.IsNil(o.NumRedirects) {
		return true
	}

	return false
}

// SetNumRedirects gets a reference to the given int32 and assigns it to the NumRedirects field.
func (o *HttpTestResult) SetNumRedirects(v int32) {
	o.NumRedirects = &v
}

// GetRedirectTime returns the RedirectTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetRedirectTime() int32 {
	if o == nil || utils.IsNil(o.RedirectTime) {
		var ret int32
		return ret
	}
	return *o.RedirectTime
}

// GetRedirectTimeOk returns a tuple with the RedirectTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetRedirectTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RedirectTime) {
		return nil, false
	}
	return o.RedirectTime, true
}

// HasRedirectTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasRedirectTime() bool {
	if o != nil && !utils.IsNil(o.RedirectTime) {
		return true
	}

	return false
}

// SetRedirectTime gets a reference to the given int32 and assigns it to the RedirectTime field.
func (o *HttpTestResult) SetRedirectTime(v int32) {
	o.RedirectTime = &v
}

// GetDnsTime returns the DnsTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetDnsTime() int32 {
	if o == nil || utils.IsNil(o.DnsTime) {
		var ret int32
		return ret
	}
	return *o.DnsTime
}

// GetDnsTimeOk returns a tuple with the DnsTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetDnsTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DnsTime) {
		return nil, false
	}
	return o.DnsTime, true
}

// HasDnsTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasDnsTime() bool {
	if o != nil && !utils.IsNil(o.DnsTime) {
		return true
	}

	return false
}

// SetDnsTime gets a reference to the given int32 and assigns it to the DnsTime field.
func (o *HttpTestResult) SetDnsTime(v int32) {
	o.DnsTime = &v
}

// GetSslTime returns the SslTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetSslTime() int32 {
	if o == nil || utils.IsNil(o.SslTime) {
		var ret int32
		return ret
	}
	return *o.SslTime
}

// GetSslTimeOk returns a tuple with the SslTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetSslTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.SslTime) {
		return nil, false
	}
	return o.SslTime, true
}

// HasSslTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasSslTime() bool {
	if o != nil && !utils.IsNil(o.SslTime) {
		return true
	}

	return false
}

// SetSslTime gets a reference to the given int32 and assigns it to the SslTime field.
func (o *HttpTestResult) SetSslTime(v int32) {
	o.SslTime = &v
}

// GetConnectTime returns the ConnectTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetConnectTime() int32 {
	if o == nil || utils.IsNil(o.ConnectTime) {
		var ret int32
		return ret
	}
	return *o.ConnectTime
}

// GetConnectTimeOk returns a tuple with the ConnectTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetConnectTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ConnectTime) {
		return nil, false
	}
	return o.ConnectTime, true
}

// HasConnectTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasConnectTime() bool {
	if o != nil && !utils.IsNil(o.ConnectTime) {
		return true
	}

	return false
}

// SetConnectTime gets a reference to the given int32 and assigns it to the ConnectTime field.
func (o *HttpTestResult) SetConnectTime(v int32) {
	o.ConnectTime = &v
}

// GetWaitTime returns the WaitTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetWaitTime() int32 {
	if o == nil || utils.IsNil(o.WaitTime) {
		var ret int32
		return ret
	}
	return *o.WaitTime
}

// GetWaitTimeOk returns a tuple with the WaitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetWaitTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.WaitTime) {
		return nil, false
	}
	return o.WaitTime, true
}

// HasWaitTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasWaitTime() bool {
	if o != nil && !utils.IsNil(o.WaitTime) {
		return true
	}

	return false
}

// SetWaitTime gets a reference to the given int32 and assigns it to the WaitTime field.
func (o *HttpTestResult) SetWaitTime(v int32) {
	o.WaitTime = &v
}

// GetReceiveTime returns the ReceiveTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetReceiveTime() int32 {
	if o == nil || utils.IsNil(o.ReceiveTime) {
		var ret int32
		return ret
	}
	return *o.ReceiveTime
}

// GetReceiveTimeOk returns a tuple with the ReceiveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetReceiveTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ReceiveTime) {
		return nil, false
	}
	return o.ReceiveTime, true
}

// HasReceiveTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasReceiveTime() bool {
	if o != nil && !utils.IsNil(o.ReceiveTime) {
		return true
	}

	return false
}

// SetReceiveTime gets a reference to the given int32 and assigns it to the ReceiveTime field.
func (o *HttpTestResult) SetReceiveTime(v int32) {
	o.ReceiveTime = &v
}

// GetWireSize returns the WireSize field value if set, zero value otherwise.
func (o *HttpTestResult) GetWireSize() int32 {
	if o == nil || utils.IsNil(o.WireSize) {
		var ret int32
		return ret
	}
	return *o.WireSize
}

// GetWireSizeOk returns a tuple with the WireSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetWireSizeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.WireSize) {
		return nil, false
	}
	return o.WireSize, true
}

// HasWireSize returns a boolean if a field has been set.
func (o *HttpTestResult) HasWireSize() bool {
	if o != nil && !utils.IsNil(o.WireSize) {
		return true
	}

	return false
}

// SetWireSize gets a reference to the given int32 and assigns it to the WireSize field.
func (o *HttpTestResult) SetWireSize(v int32) {
	o.WireSize = &v
}

// GetResponseTime returns the ResponseTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetResponseTime() int32 {
	if o == nil || utils.IsNil(o.ResponseTime) {
		var ret int32
		return ret
	}
	return *o.ResponseTime
}

// GetResponseTimeOk returns a tuple with the ResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetResponseTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ResponseTime) {
		return nil, false
	}
	return o.ResponseTime, true
}

// HasResponseTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasResponseTime() bool {
	if o != nil && !utils.IsNil(o.ResponseTime) {
		return true
	}

	return false
}

// SetResponseTime gets a reference to the given int32 and assigns it to the ResponseTime field.
func (o *HttpTestResult) SetResponseTime(v int32) {
	o.ResponseTime = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *HttpTestResult) GetThroughput() float64 {
	if o == nil || utils.IsNil(o.Throughput) {
		var ret float64
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetThroughputOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *HttpTestResult) HasThroughput() bool {
	if o != nil && !utils.IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given float64 and assigns it to the Throughput field.
func (o *HttpTestResult) SetThroughput(v float64) {
	o.Throughput = &v
}

// GetTotalTime returns the TotalTime field value if set, zero value otherwise.
func (o *HttpTestResult) GetTotalTime() int32 {
	if o == nil || utils.IsNil(o.TotalTime) {
		var ret int32
		return ret
	}
	return *o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetTotalTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TotalTime) {
		return nil, false
	}
	return o.TotalTime, true
}

// HasTotalTime returns a boolean if a field has been set.
func (o *HttpTestResult) HasTotalTime() bool {
	if o != nil && !utils.IsNil(o.TotalTime) {
		return true
	}

	return false
}

// SetTotalTime gets a reference to the given int32 and assigns it to the TotalTime field.
func (o *HttpTestResult) SetTotalTime(v int32) {
	o.TotalTime = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpTestResult) GetHeaders() HttpTestResultHeaders {
	if o == nil || utils.IsNil(o.Headers) {
		var ret HttpTestResultHeaders
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetHeadersOk() (*HttpTestResultHeaders, bool) {
	if o == nil || utils.IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpTestResult) HasHeaders() bool {
	if o != nil && !utils.IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given HttpTestResultHeaders and assigns it to the Headers field.
func (o *HttpTestResult) SetHeaders(v HttpTestResultHeaders) {
	o.Headers = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *HttpTestResult) GetErrorType() string {
	if o == nil || utils.IsNil(o.ErrorType) {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetErrorTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *HttpTestResult) HasErrorType() bool {
	if o != nil && !utils.IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *HttpTestResult) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetErrorDetails returns the ErrorDetails field value if set, zero value otherwise.
func (o *HttpTestResult) GetErrorDetails() string {
	if o == nil || utils.IsNil(o.ErrorDetails) {
		var ret string
		return ret
	}
	return *o.ErrorDetails
}

// GetErrorDetailsOk returns a tuple with the ErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetErrorDetailsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ErrorDetails) {
		return nil, false
	}
	return o.ErrorDetails, true
}

// HasErrorDetails returns a boolean if a field has been set.
func (o *HttpTestResult) HasErrorDetails() bool {
	if o != nil && !utils.IsNil(o.ErrorDetails) {
		return true
	}

	return false
}

// SetErrorDetails gets a reference to the given string and assigns it to the ErrorDetails field.
func (o *HttpTestResult) SetErrorDetails(v string) {
	o.ErrorDetails = &v
}

// GetSslCipher returns the SslCipher field value if set, zero value otherwise.
func (o *HttpTestResult) GetSslCipher() string {
	if o == nil || utils.IsNil(o.SslCipher) {
		var ret string
		return ret
	}
	return *o.SslCipher
}

// GetSslCipherOk returns a tuple with the SslCipher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetSslCipherOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SslCipher) {
		return nil, false
	}
	return o.SslCipher, true
}

// HasSslCipher returns a boolean if a field has been set.
func (o *HttpTestResult) HasSslCipher() bool {
	if o != nil && !utils.IsNil(o.SslCipher) {
		return true
	}

	return false
}

// SetSslCipher gets a reference to the given string and assigns it to the SslCipher field.
func (o *HttpTestResult) SetSslCipher(v string) {
	o.SslCipher = &v
}

// GetSslVersion returns the SslVersion field value if set, zero value otherwise.
func (o *HttpTestResult) GetSslVersion() string {
	if o == nil || utils.IsNil(o.SslVersion) {
		var ret string
		return ret
	}
	return *o.SslVersion
}

// GetSslVersionOk returns a tuple with the SslVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetSslVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SslVersion) {
		return nil, false
	}
	return o.SslVersion, true
}

// HasSslVersion returns a boolean if a field has been set.
func (o *HttpTestResult) HasSslVersion() bool {
	if o != nil && !utils.IsNil(o.SslVersion) {
		return true
	}

	return false
}

// SetSslVersion gets a reference to the given string and assigns it to the SslVersion field.
func (o *HttpTestResult) SetSslVersion(v string) {
	o.SslVersion = &v
}

// GetSslCertificates returns the SslCertificates field value if set, zero value otherwise.
func (o *HttpTestResult) GetSslCertificates() []SslCert {
	if o == nil || utils.IsNil(o.SslCertificates) {
		var ret []SslCert
		return ret
	}
	return o.SslCertificates
}

// GetSslCertificatesOk returns a tuple with the SslCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetSslCertificatesOk() ([]SslCert, bool) {
	if o == nil || utils.IsNil(o.SslCertificates) {
		return nil, false
	}
	return o.SslCertificates, true
}

// HasSslCertificates returns a boolean if a field has been set.
func (o *HttpTestResult) HasSslCertificates() bool {
	if o != nil && !utils.IsNil(o.SslCertificates) {
		return true
	}

	return false
}

// SetSslCertificates gets a reference to the given []SslCert and assigns it to the SslCertificates field.
func (o *HttpTestResult) SetSslCertificates(v []SslCert) {
	o.SslCertificates = v
}

// GetHealthScore returns the HealthScore field value if set, zero value otherwise.
func (o *HttpTestResult) GetHealthScore() float32 {
	if o == nil || utils.IsNil(o.HealthScore) {
		var ret float32
		return ret
	}
	return *o.HealthScore
}

// GetHealthScoreOk returns a tuple with the HealthScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTestResult) GetHealthScoreOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.HealthScore) {
		return nil, false
	}
	return o.HealthScore, true
}

// HasHealthScore returns a boolean if a field has been set.
func (o *HttpTestResult) HasHealthScore() bool {
	if o != nil && !utils.IsNil(o.HealthScore) {
		return true
	}

	return false
}

// SetHealthScore gets a reference to the given float32 and assigns it to the HealthScore field.
func (o *HttpTestResult) SetHealthScore(v float32) {
	o.HealthScore = &v
}

func (o HttpTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	if !utils.IsNil(o.ServerIp) {
		toSerialize["serverIp"] = o.ServerIp
	}
	if !utils.IsNil(o.ResponseCode) {
		toSerialize["responseCode"] = o.ResponseCode
	}
	if !utils.IsNil(o.NumRedirects) {
		toSerialize["numRedirects"] = o.NumRedirects
	}
	if !utils.IsNil(o.RedirectTime) {
		toSerialize["redirectTime"] = o.RedirectTime
	}
	if !utils.IsNil(o.DnsTime) {
		toSerialize["dnsTime"] = o.DnsTime
	}
	if !utils.IsNil(o.SslTime) {
		toSerialize["sslTime"] = o.SslTime
	}
	if !utils.IsNil(o.ConnectTime) {
		toSerialize["connectTime"] = o.ConnectTime
	}
	if !utils.IsNil(o.WaitTime) {
		toSerialize["waitTime"] = o.WaitTime
	}
	if !utils.IsNil(o.ReceiveTime) {
		toSerialize["receiveTime"] = o.ReceiveTime
	}
	if !utils.IsNil(o.WireSize) {
		toSerialize["wireSize"] = o.WireSize
	}
	if !utils.IsNil(o.ResponseTime) {
		toSerialize["responseTime"] = o.ResponseTime
	}
	if !utils.IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !utils.IsNil(o.TotalTime) {
		toSerialize["totalTime"] = o.TotalTime
	}
	if !utils.IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !utils.IsNil(o.ErrorType) {
		toSerialize["errorType"] = o.ErrorType
	}
	if !utils.IsNil(o.ErrorDetails) {
		toSerialize["errorDetails"] = o.ErrorDetails
	}
	if !utils.IsNil(o.SslCipher) {
		toSerialize["sslCipher"] = o.SslCipher
	}
	if !utils.IsNil(o.SslVersion) {
		toSerialize["sslVersion"] = o.SslVersion
	}
	if !utils.IsNil(o.SslCertificates) {
		toSerialize["sslCertificates"] = o.SslCertificates
	}
	if !utils.IsNil(o.HealthScore) {
		toSerialize["healthScore"] = o.HealthScore
	}
	return toSerialize, nil
}

type NullableHttpTestResult struct {
	value *HttpTestResult
	isSet bool
}

func (v NullableHttpTestResult) Get() *HttpTestResult {
	return v.value
}

func (v *NullableHttpTestResult) Set(val *HttpTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpTestResult(val *HttpTestResult) *NullableHttpTestResult {
	return &NullableHttpTestResult{value: val, isSet: true}
}

func (v NullableHttpTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


