/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the SipServerTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SipServerTestResult{}

// SipServerTestResult struct for SipServerTestResult
type SipServerTestResult struct {
	// Data point date UTC (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	RoundId *int32 `json:"roundId,omitempty"`
	Links *TestResultAppLinks `json:"_links,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	StartTime *int32 `json:"startTime,omitempty"`
	// Epoch time (seconds) indicating the end time of the round
	EndTime *int32 `json:"endTime,omitempty"`
	// Target agent IP address
	ServerIp *string `json:"serverIp,omitempty"`
	Agent *TestResultAgent `json:"agent,omitempty"`
	// availability of the service
	Availability *float32 `json:"availability,omitempty"`
	// Time required to establish a TCP connection to the server in milliseconds, only available when TCP is configured as protocol
	ConnectTime *int32 `json:"connectTime,omitempty"`
	// Time required to resolve DNS in milliseconds
	DnsTime *int32 `json:"dnsTime,omitempty"`
	// Time to complete INVITE in milliseconds
	InviteTime *int32 `json:"inviteTime,omitempty"`
	// Time to complete OPTIONS in milliseconds
	OptionsTime *int32 `json:"optionsTime,omitempty"`
	// Number of redirects
	NumRedirects *int32 `json:"numRedirects,omitempty"`
	// Entire OPTIONS request
	OptionsRequest *string `json:"optionsRequest,omitempty"`
	// Entire OPTIONS response
	OptionsResponse *string `json:"optionsResponse,omitempty"`
	// Time to complete REGISTER in milliseconds
	RegisterTime *int32 `json:"registerTime,omitempty"`
	// SIP server response code
	ResponseCode *int32 `json:"responseCode,omitempty"`
	// Time to first byte
	ResponseTime *int32 `json:"responseTime,omitempty"`
	// Total time
	TotalTime *int32 `json:"totalTime,omitempty"`
	// Time elapsed between completion of request and first byte of response
	WaitTime *int32 `json:"waitTime,omitempty"`
	ErrorType *SipServerErrorType `json:"errorType,omitempty"`
	// Error details, if an error was encountered
	ProblemDetail *string `json:"problemDetail,omitempty"`
}

// NewSipServerTestResult instantiates a new SipServerTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSipServerTestResult() *SipServerTestResult {
	this := SipServerTestResult{}
	return &this
}

// NewSipServerTestResultWithDefaults instantiates a new SipServerTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSipServerTestResultWithDefaults() *SipServerTestResult {
	this := SipServerTestResult{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SipServerTestResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SipServerTestResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *SipServerTestResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *SipServerTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *SipServerTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *SipServerTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SipServerTestResult) GetLinks() TestResultAppLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestResultAppLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetLinksOk() (*TestResultAppLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SipServerTestResult) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestResultAppLinks and assigns it to the Links field.
func (o *SipServerTestResult) SetLinks(v TestResultAppLinks) {
	o.Links = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetStartTime() int32 {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetStartTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *SipServerTestResult) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetEndTime() int32 {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret int32
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetEndTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int32 and assigns it to the EndTime field.
func (o *SipServerTestResult) SetEndTime(v int32) {
	o.EndTime = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *SipServerTestResult) GetServerIp() string {
	if o == nil || utils.IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetServerIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *SipServerTestResult) HasServerIp() bool {
	if o != nil && !utils.IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *SipServerTestResult) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *SipServerTestResult) GetAgent() TestResultAgent {
	if o == nil || utils.IsNil(o.Agent) {
		var ret TestResultAgent
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetAgentOk() (*TestResultAgent, bool) {
	if o == nil || utils.IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *SipServerTestResult) HasAgent() bool {
	if o != nil && !utils.IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given TestResultAgent and assigns it to the Agent field.
func (o *SipServerTestResult) SetAgent(v TestResultAgent) {
	o.Agent = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *SipServerTestResult) GetAvailability() float32 {
	if o == nil || utils.IsNil(o.Availability) {
		var ret float32
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetAvailabilityOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.Availability) {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *SipServerTestResult) HasAvailability() bool {
	if o != nil && !utils.IsNil(o.Availability) {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given float32 and assigns it to the Availability field.
func (o *SipServerTestResult) SetAvailability(v float32) {
	o.Availability = &v
}

// GetConnectTime returns the ConnectTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetConnectTime() int32 {
	if o == nil || utils.IsNil(o.ConnectTime) {
		var ret int32
		return ret
	}
	return *o.ConnectTime
}

// GetConnectTimeOk returns a tuple with the ConnectTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetConnectTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ConnectTime) {
		return nil, false
	}
	return o.ConnectTime, true
}

// HasConnectTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasConnectTime() bool {
	if o != nil && !utils.IsNil(o.ConnectTime) {
		return true
	}

	return false
}

// SetConnectTime gets a reference to the given int32 and assigns it to the ConnectTime field.
func (o *SipServerTestResult) SetConnectTime(v int32) {
	o.ConnectTime = &v
}

// GetDnsTime returns the DnsTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetDnsTime() int32 {
	if o == nil || utils.IsNil(o.DnsTime) {
		var ret int32
		return ret
	}
	return *o.DnsTime
}

// GetDnsTimeOk returns a tuple with the DnsTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetDnsTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DnsTime) {
		return nil, false
	}
	return o.DnsTime, true
}

// HasDnsTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasDnsTime() bool {
	if o != nil && !utils.IsNil(o.DnsTime) {
		return true
	}

	return false
}

// SetDnsTime gets a reference to the given int32 and assigns it to the DnsTime field.
func (o *SipServerTestResult) SetDnsTime(v int32) {
	o.DnsTime = &v
}

// GetInviteTime returns the InviteTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetInviteTime() int32 {
	if o == nil || utils.IsNil(o.InviteTime) {
		var ret int32
		return ret
	}
	return *o.InviteTime
}

// GetInviteTimeOk returns a tuple with the InviteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetInviteTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.InviteTime) {
		return nil, false
	}
	return o.InviteTime, true
}

// HasInviteTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasInviteTime() bool {
	if o != nil && !utils.IsNil(o.InviteTime) {
		return true
	}

	return false
}

// SetInviteTime gets a reference to the given int32 and assigns it to the InviteTime field.
func (o *SipServerTestResult) SetInviteTime(v int32) {
	o.InviteTime = &v
}

// GetOptionsTime returns the OptionsTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetOptionsTime() int32 {
	if o == nil || utils.IsNil(o.OptionsTime) {
		var ret int32
		return ret
	}
	return *o.OptionsTime
}

// GetOptionsTimeOk returns a tuple with the OptionsTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetOptionsTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.OptionsTime) {
		return nil, false
	}
	return o.OptionsTime, true
}

// HasOptionsTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasOptionsTime() bool {
	if o != nil && !utils.IsNil(o.OptionsTime) {
		return true
	}

	return false
}

// SetOptionsTime gets a reference to the given int32 and assigns it to the OptionsTime field.
func (o *SipServerTestResult) SetOptionsTime(v int32) {
	o.OptionsTime = &v
}

// GetNumRedirects returns the NumRedirects field value if set, zero value otherwise.
func (o *SipServerTestResult) GetNumRedirects() int32 {
	if o == nil || utils.IsNil(o.NumRedirects) {
		var ret int32
		return ret
	}
	return *o.NumRedirects
}

// GetNumRedirectsOk returns a tuple with the NumRedirects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetNumRedirectsOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumRedirects) {
		return nil, false
	}
	return o.NumRedirects, true
}

// HasNumRedirects returns a boolean if a field has been set.
func (o *SipServerTestResult) HasNumRedirects() bool {
	if o != nil && !utils.IsNil(o.NumRedirects) {
		return true
	}

	return false
}

// SetNumRedirects gets a reference to the given int32 and assigns it to the NumRedirects field.
func (o *SipServerTestResult) SetNumRedirects(v int32) {
	o.NumRedirects = &v
}

// GetOptionsRequest returns the OptionsRequest field value if set, zero value otherwise.
func (o *SipServerTestResult) GetOptionsRequest() string {
	if o == nil || utils.IsNil(o.OptionsRequest) {
		var ret string
		return ret
	}
	return *o.OptionsRequest
}

// GetOptionsRequestOk returns a tuple with the OptionsRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetOptionsRequestOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OptionsRequest) {
		return nil, false
	}
	return o.OptionsRequest, true
}

// HasOptionsRequest returns a boolean if a field has been set.
func (o *SipServerTestResult) HasOptionsRequest() bool {
	if o != nil && !utils.IsNil(o.OptionsRequest) {
		return true
	}

	return false
}

// SetOptionsRequest gets a reference to the given string and assigns it to the OptionsRequest field.
func (o *SipServerTestResult) SetOptionsRequest(v string) {
	o.OptionsRequest = &v
}

// GetOptionsResponse returns the OptionsResponse field value if set, zero value otherwise.
func (o *SipServerTestResult) GetOptionsResponse() string {
	if o == nil || utils.IsNil(o.OptionsResponse) {
		var ret string
		return ret
	}
	return *o.OptionsResponse
}

// GetOptionsResponseOk returns a tuple with the OptionsResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetOptionsResponseOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OptionsResponse) {
		return nil, false
	}
	return o.OptionsResponse, true
}

// HasOptionsResponse returns a boolean if a field has been set.
func (o *SipServerTestResult) HasOptionsResponse() bool {
	if o != nil && !utils.IsNil(o.OptionsResponse) {
		return true
	}

	return false
}

// SetOptionsResponse gets a reference to the given string and assigns it to the OptionsResponse field.
func (o *SipServerTestResult) SetOptionsResponse(v string) {
	o.OptionsResponse = &v
}

// GetRegisterTime returns the RegisterTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetRegisterTime() int32 {
	if o == nil || utils.IsNil(o.RegisterTime) {
		var ret int32
		return ret
	}
	return *o.RegisterTime
}

// GetRegisterTimeOk returns a tuple with the RegisterTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetRegisterTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RegisterTime) {
		return nil, false
	}
	return o.RegisterTime, true
}

// HasRegisterTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasRegisterTime() bool {
	if o != nil && !utils.IsNil(o.RegisterTime) {
		return true
	}

	return false
}

// SetRegisterTime gets a reference to the given int32 and assigns it to the RegisterTime field.
func (o *SipServerTestResult) SetRegisterTime(v int32) {
	o.RegisterTime = &v
}

// GetResponseCode returns the ResponseCode field value if set, zero value otherwise.
func (o *SipServerTestResult) GetResponseCode() int32 {
	if o == nil || utils.IsNil(o.ResponseCode) {
		var ret int32
		return ret
	}
	return *o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetResponseCodeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ResponseCode) {
		return nil, false
	}
	return o.ResponseCode, true
}

// HasResponseCode returns a boolean if a field has been set.
func (o *SipServerTestResult) HasResponseCode() bool {
	if o != nil && !utils.IsNil(o.ResponseCode) {
		return true
	}

	return false
}

// SetResponseCode gets a reference to the given int32 and assigns it to the ResponseCode field.
func (o *SipServerTestResult) SetResponseCode(v int32) {
	o.ResponseCode = &v
}

// GetResponseTime returns the ResponseTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetResponseTime() int32 {
	if o == nil || utils.IsNil(o.ResponseTime) {
		var ret int32
		return ret
	}
	return *o.ResponseTime
}

// GetResponseTimeOk returns a tuple with the ResponseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetResponseTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ResponseTime) {
		return nil, false
	}
	return o.ResponseTime, true
}

// HasResponseTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasResponseTime() bool {
	if o != nil && !utils.IsNil(o.ResponseTime) {
		return true
	}

	return false
}

// SetResponseTime gets a reference to the given int32 and assigns it to the ResponseTime field.
func (o *SipServerTestResult) SetResponseTime(v int32) {
	o.ResponseTime = &v
}

// GetTotalTime returns the TotalTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetTotalTime() int32 {
	if o == nil || utils.IsNil(o.TotalTime) {
		var ret int32
		return ret
	}
	return *o.TotalTime
}

// GetTotalTimeOk returns a tuple with the TotalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetTotalTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.TotalTime) {
		return nil, false
	}
	return o.TotalTime, true
}

// HasTotalTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasTotalTime() bool {
	if o != nil && !utils.IsNil(o.TotalTime) {
		return true
	}

	return false
}

// SetTotalTime gets a reference to the given int32 and assigns it to the TotalTime field.
func (o *SipServerTestResult) SetTotalTime(v int32) {
	o.TotalTime = &v
}

// GetWaitTime returns the WaitTime field value if set, zero value otherwise.
func (o *SipServerTestResult) GetWaitTime() int32 {
	if o == nil || utils.IsNil(o.WaitTime) {
		var ret int32
		return ret
	}
	return *o.WaitTime
}

// GetWaitTimeOk returns a tuple with the WaitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetWaitTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.WaitTime) {
		return nil, false
	}
	return o.WaitTime, true
}

// HasWaitTime returns a boolean if a field has been set.
func (o *SipServerTestResult) HasWaitTime() bool {
	if o != nil && !utils.IsNil(o.WaitTime) {
		return true
	}

	return false
}

// SetWaitTime gets a reference to the given int32 and assigns it to the WaitTime field.
func (o *SipServerTestResult) SetWaitTime(v int32) {
	o.WaitTime = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *SipServerTestResult) GetErrorType() SipServerErrorType {
	if o == nil || utils.IsNil(o.ErrorType) {
		var ret SipServerErrorType
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetErrorTypeOk() (*SipServerErrorType, bool) {
	if o == nil || utils.IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *SipServerTestResult) HasErrorType() bool {
	if o != nil && !utils.IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given SipServerErrorType and assigns it to the ErrorType field.
func (o *SipServerTestResult) SetErrorType(v SipServerErrorType) {
	o.ErrorType = &v
}

// GetProblemDetail returns the ProblemDetail field value if set, zero value otherwise.
func (o *SipServerTestResult) GetProblemDetail() string {
	if o == nil || utils.IsNil(o.ProblemDetail) {
		var ret string
		return ret
	}
	return *o.ProblemDetail
}

// GetProblemDetailOk returns a tuple with the ProblemDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerTestResult) GetProblemDetailOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProblemDetail) {
		return nil, false
	}
	return o.ProblemDetail, true
}

// HasProblemDetail returns a boolean if a field has been set.
func (o *SipServerTestResult) HasProblemDetail() bool {
	if o != nil && !utils.IsNil(o.ProblemDetail) {
		return true
	}

	return false
}

// SetProblemDetail gets a reference to the given string and assigns it to the ProblemDetail field.
func (o *SipServerTestResult) SetProblemDetail(v string) {
	o.ProblemDetail = &v
}

func (o SipServerTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SipServerTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.ServerIp) {
		toSerialize["serverIp"] = o.ServerIp
	}
	if !utils.IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	if !utils.IsNil(o.Availability) {
		toSerialize["availability"] = o.Availability
	}
	if !utils.IsNil(o.ConnectTime) {
		toSerialize["connectTime"] = o.ConnectTime
	}
	if !utils.IsNil(o.DnsTime) {
		toSerialize["dnsTime"] = o.DnsTime
	}
	if !utils.IsNil(o.InviteTime) {
		toSerialize["inviteTime"] = o.InviteTime
	}
	if !utils.IsNil(o.OptionsTime) {
		toSerialize["optionsTime"] = o.OptionsTime
	}
	if !utils.IsNil(o.NumRedirects) {
		toSerialize["numRedirects"] = o.NumRedirects
	}
	if !utils.IsNil(o.OptionsRequest) {
		toSerialize["optionsRequest"] = o.OptionsRequest
	}
	if !utils.IsNil(o.OptionsResponse) {
		toSerialize["optionsResponse"] = o.OptionsResponse
	}
	if !utils.IsNil(o.RegisterTime) {
		toSerialize["registerTime"] = o.RegisterTime
	}
	if !utils.IsNil(o.ResponseCode) {
		toSerialize["responseCode"] = o.ResponseCode
	}
	if !utils.IsNil(o.ResponseTime) {
		toSerialize["responseTime"] = o.ResponseTime
	}
	if !utils.IsNil(o.TotalTime) {
		toSerialize["totalTime"] = o.TotalTime
	}
	if !utils.IsNil(o.WaitTime) {
		toSerialize["waitTime"] = o.WaitTime
	}
	if !utils.IsNil(o.ErrorType) {
		toSerialize["errorType"] = o.ErrorType
	}
	if !utils.IsNil(o.ProblemDetail) {
		toSerialize["problemDetail"] = o.ProblemDetail
	}
	return toSerialize, nil
}

type NullableSipServerTestResult struct {
	value *SipServerTestResult
	isSet bool
}

func (v NullableSipServerTestResult) Get() *SipServerTestResult {
	return v.value
}

func (v *NullableSipServerTestResult) Set(val *SipServerTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSipServerTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSipServerTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipServerTestResult(val *SipServerTestResult) *NullableSipServerTestResult {
	return &NullableSipServerTestResult{value: val, isSet: true}
}

func (v NullableSipServerTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipServerTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


