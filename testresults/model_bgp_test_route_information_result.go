/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the BgpTestRouteInformationResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BgpTestRouteInformationResult{}

// BgpTestRouteInformationResult struct for BgpTestRouteInformationResult
type BgpTestRouteInformationResult struct {
	// Data point date UTC (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	RoundId *int32 `json:"roundId,omitempty"`
	Links *TestResultAppLinks `json:"_links,omitempty"`
	Monitor *TestResultMonitor `json:"monitor,omitempty"`
	// Internally tracked prefix ID.
	PrefixId *string `json:"prefixId,omitempty"`
	// Prefix being tracked.
	Prefix *string `json:"prefix,omitempty"`
	// Represents whether the route is active or inactive. An inactive route was an active route in the previous test round and is now superseded by another active (preferred) route. When requesting data for the test round in which a route change happened, both routes (active and inactive one) are included in the response.
	IsActive *bool `json:"isActive,omitempty"`
	Hops []BgpHop `json:"hops,omitempty"`
}

// NewBgpTestRouteInformationResult instantiates a new BgpTestRouteInformationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpTestRouteInformationResult() *BgpTestRouteInformationResult {
	this := BgpTestRouteInformationResult{}
	return &this
}

// NewBgpTestRouteInformationResultWithDefaults instantiates a new BgpTestRouteInformationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpTestRouteInformationResultWithDefaults() *BgpTestRouteInformationResult {
	this := BgpTestRouteInformationResult{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *BgpTestRouteInformationResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *BgpTestRouteInformationResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetLinks() TestResultAppLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestResultAppLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetLinksOk() (*TestResultAppLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestResultAppLinks and assigns it to the Links field.
func (o *BgpTestRouteInformationResult) SetLinks(v TestResultAppLinks) {
	o.Links = &v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetMonitor() TestResultMonitor {
	if o == nil || utils.IsNil(o.Monitor) {
		var ret TestResultMonitor
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetMonitorOk() (*TestResultMonitor, bool) {
	if o == nil || utils.IsNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasMonitor() bool {
	if o != nil && !utils.IsNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given TestResultMonitor and assigns it to the Monitor field.
func (o *BgpTestRouteInformationResult) SetMonitor(v TestResultMonitor) {
	o.Monitor = &v
}

// GetPrefixId returns the PrefixId field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetPrefixId() string {
	if o == nil || utils.IsNil(o.PrefixId) {
		var ret string
		return ret
	}
	return *o.PrefixId
}

// GetPrefixIdOk returns a tuple with the PrefixId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetPrefixIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PrefixId) {
		return nil, false
	}
	return o.PrefixId, true
}

// HasPrefixId returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasPrefixId() bool {
	if o != nil && !utils.IsNil(o.PrefixId) {
		return true
	}

	return false
}

// SetPrefixId gets a reference to the given string and assigns it to the PrefixId field.
func (o *BgpTestRouteInformationResult) SetPrefixId(v string) {
	o.PrefixId = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetPrefix() string {
	if o == nil || utils.IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetPrefixOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasPrefix() bool {
	if o != nil && !utils.IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *BgpTestRouteInformationResult) SetPrefix(v string) {
	o.Prefix = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetIsActive() bool {
	if o == nil || utils.IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetIsActiveOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasIsActive() bool {
	if o != nil && !utils.IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *BgpTestRouteInformationResult) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetHops returns the Hops field value if set, zero value otherwise.
func (o *BgpTestRouteInformationResult) GetHops() []BgpHop {
	if o == nil || utils.IsNil(o.Hops) {
		var ret []BgpHop
		return ret
	}
	return o.Hops
}

// GetHopsOk returns a tuple with the Hops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTestRouteInformationResult) GetHopsOk() ([]BgpHop, bool) {
	if o == nil || utils.IsNil(o.Hops) {
		return nil, false
	}
	return o.Hops, true
}

// HasHops returns a boolean if a field has been set.
func (o *BgpTestRouteInformationResult) HasHops() bool {
	if o != nil && !utils.IsNil(o.Hops) {
		return true
	}

	return false
}

// SetHops gets a reference to the given []BgpHop and assigns it to the Hops field.
func (o *BgpTestRouteInformationResult) SetHops(v []BgpHop) {
	o.Hops = v
}

func (o BgpTestRouteInformationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpTestRouteInformationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	if !utils.IsNil(o.PrefixId) {
		toSerialize["prefixId"] = o.PrefixId
	}
	if !utils.IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !utils.IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !utils.IsNil(o.Hops) {
		toSerialize["hops"] = o.Hops
	}
	return toSerialize, nil
}

type NullableBgpTestRouteInformationResult struct {
	value *BgpTestRouteInformationResult
	isSet bool
}

func (v NullableBgpTestRouteInformationResult) Get() *BgpTestRouteInformationResult {
	return v.value
}

func (v *NullableBgpTestRouteInformationResult) Set(val *BgpTestRouteInformationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpTestRouteInformationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpTestRouteInformationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpTestRouteInformationResult(val *BgpTestRouteInformationResult) *NullableBgpTestRouteInformationResult {
	return &NullableBgpTestRouteInformationResult{value: val, isSet: true}
}

func (v NullableBgpTestRouteInformationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpTestRouteInformationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


