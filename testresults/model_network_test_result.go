/*
Test Results API

Get test result metrics for Cloud and Enterprise Agent tests.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testresults

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the NetworkTestResult type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NetworkTestResult{}

// NetworkTestResult struct for NetworkTestResult
type NetworkTestResult struct {
	// Data point date in UTC (ISO date-time format).
	Date *time.Time `json:"date,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	RoundId *int32 `json:"roundId,omitempty"`
	Links *TestResultAppLinks `json:"_links,omitempty"`
	// Epoch time (seconds) indicating the start time of the round
	StartTime *int32 `json:"startTime,omitempty"`
	// Epoch time (seconds) indicating the end time of the round
	EndTime *int32 `json:"endTime,omitempty"`
	// The bandwidth from the client to the server measured in Mbps. This value is not available if bandwidth testing is disabled, if no value could be calculated, or if the target is a proxy.
	AvailableBandwidth *float64 `json:"availableBandwidth,omitempty"`
	// Average RTT for packets sent to destination
	AvgLatency *float64 `json:"avgLatency,omitempty"`
	Bandwidth *float64 `json:"bandwidth,omitempty"`
	// The capacity from the client to the server measured in Mbps. This value is not available if bandwidth testing is disabled, if no value could be calculated, or if the target is a proxy.
	Capacity *float64 `json:"capacity,omitempty"`
	// Standard deviation of latency
	Jitter *float64 `json:"jitter,omitempty"`
	// Percentage of packets not reaching destination
	Loss *float64 `json:"loss,omitempty"`
	// Maximum RTT for packets sent to destination
	MaxLatency *float64 `json:"maxLatency,omitempty"`
	// Minimum RTT for packets sent to destination
	MinLatency *float64 `json:"minLatency,omitempty"`
	// Number of packets sent and received in a second.
	PacketsBySecond [][]int32 `json:"packetsBySecond,omitempty"`
	Agent *TestResultAgent `json:"agent,omitempty"`
	// IP of target server
	ServerIp *string `json:"serverIp,omitempty"`
	// Target server, including port (if method used is TCP)
	Server *string `json:"server,omitempty"`
	// A normalized value (0.0-1.0) representing the network connection health of the test target. Returns negative values as error codes. -1.0 indicates there was insufficient data to calculate the health score.
	HealthScore *float32 `json:"healthScore,omitempty"`
	Direction *TestDirection `json:"direction,omitempty"`
}

// NewNetworkTestResult instantiates a new NetworkTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTestResult() *NetworkTestResult {
	this := NetworkTestResult{}
	var direction TestDirection = TESTDIRECTION_TO_TARGET
	this.Direction = &direction
	return &this
}

// NewNetworkTestResultWithDefaults instantiates a new NetworkTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTestResultWithDefaults() *NetworkTestResult {
	this := NetworkTestResult{}
	var direction TestDirection = TESTDIRECTION_TO_TARGET
	this.Direction = &direction
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *NetworkTestResult) GetDate() time.Time {
	if o == nil || utils.IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *NetworkTestResult) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *NetworkTestResult) SetDate(v time.Time) {
	o.Date = &v
}

// GetRoundId returns the RoundId field value if set, zero value otherwise.
func (o *NetworkTestResult) GetRoundId() int32 {
	if o == nil || utils.IsNil(o.RoundId) {
		var ret int32
		return ret
	}
	return *o.RoundId
}

// GetRoundIdOk returns a tuple with the RoundId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetRoundIdOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RoundId) {
		return nil, false
	}
	return o.RoundId, true
}

// HasRoundId returns a boolean if a field has been set.
func (o *NetworkTestResult) HasRoundId() bool {
	if o != nil && !utils.IsNil(o.RoundId) {
		return true
	}

	return false
}

// SetRoundId gets a reference to the given int32 and assigns it to the RoundId field.
func (o *NetworkTestResult) SetRoundId(v int32) {
	o.RoundId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkTestResult) GetLinks() TestResultAppLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestResultAppLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetLinksOk() (*TestResultAppLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkTestResult) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestResultAppLinks and assigns it to the Links field.
func (o *NetworkTestResult) SetLinks(v TestResultAppLinks) {
	o.Links = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *NetworkTestResult) GetStartTime() int32 {
	if o == nil || utils.IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetStartTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *NetworkTestResult) HasStartTime() bool {
	if o != nil && !utils.IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *NetworkTestResult) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *NetworkTestResult) GetEndTime() int32 {
	if o == nil || utils.IsNil(o.EndTime) {
		var ret int32
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetEndTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *NetworkTestResult) HasEndTime() bool {
	if o != nil && !utils.IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int32 and assigns it to the EndTime field.
func (o *NetworkTestResult) SetEndTime(v int32) {
	o.EndTime = &v
}

// GetAvailableBandwidth returns the AvailableBandwidth field value if set, zero value otherwise.
func (o *NetworkTestResult) GetAvailableBandwidth() float64 {
	if o == nil || utils.IsNil(o.AvailableBandwidth) {
		var ret float64
		return ret
	}
	return *o.AvailableBandwidth
}

// GetAvailableBandwidthOk returns a tuple with the AvailableBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetAvailableBandwidthOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.AvailableBandwidth) {
		return nil, false
	}
	return o.AvailableBandwidth, true
}

// HasAvailableBandwidth returns a boolean if a field has been set.
func (o *NetworkTestResult) HasAvailableBandwidth() bool {
	if o != nil && !utils.IsNil(o.AvailableBandwidth) {
		return true
	}

	return false
}

// SetAvailableBandwidth gets a reference to the given float64 and assigns it to the AvailableBandwidth field.
func (o *NetworkTestResult) SetAvailableBandwidth(v float64) {
	o.AvailableBandwidth = &v
}

// GetAvgLatency returns the AvgLatency field value if set, zero value otherwise.
func (o *NetworkTestResult) GetAvgLatency() float64 {
	if o == nil || utils.IsNil(o.AvgLatency) {
		var ret float64
		return ret
	}
	return *o.AvgLatency
}

// GetAvgLatencyOk returns a tuple with the AvgLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetAvgLatencyOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.AvgLatency) {
		return nil, false
	}
	return o.AvgLatency, true
}

// HasAvgLatency returns a boolean if a field has been set.
func (o *NetworkTestResult) HasAvgLatency() bool {
	if o != nil && !utils.IsNil(o.AvgLatency) {
		return true
	}

	return false
}

// SetAvgLatency gets a reference to the given float64 and assigns it to the AvgLatency field.
func (o *NetworkTestResult) SetAvgLatency(v float64) {
	o.AvgLatency = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *NetworkTestResult) GetBandwidth() float64 {
	if o == nil || utils.IsNil(o.Bandwidth) {
		var ret float64
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetBandwidthOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Bandwidth) {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *NetworkTestResult) HasBandwidth() bool {
	if o != nil && !utils.IsNil(o.Bandwidth) {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given float64 and assigns it to the Bandwidth field.
func (o *NetworkTestResult) SetBandwidth(v float64) {
	o.Bandwidth = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *NetworkTestResult) GetCapacity() float64 {
	if o == nil || utils.IsNil(o.Capacity) {
		var ret float64
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetCapacityOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *NetworkTestResult) HasCapacity() bool {
	if o != nil && !utils.IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given float64 and assigns it to the Capacity field.
func (o *NetworkTestResult) SetCapacity(v float64) {
	o.Capacity = &v
}

// GetJitter returns the Jitter field value if set, zero value otherwise.
func (o *NetworkTestResult) GetJitter() float64 {
	if o == nil || utils.IsNil(o.Jitter) {
		var ret float64
		return ret
	}
	return *o.Jitter
}

// GetJitterOk returns a tuple with the Jitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetJitterOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Jitter) {
		return nil, false
	}
	return o.Jitter, true
}

// HasJitter returns a boolean if a field has been set.
func (o *NetworkTestResult) HasJitter() bool {
	if o != nil && !utils.IsNil(o.Jitter) {
		return true
	}

	return false
}

// SetJitter gets a reference to the given float64 and assigns it to the Jitter field.
func (o *NetworkTestResult) SetJitter(v float64) {
	o.Jitter = &v
}

// GetLoss returns the Loss field value if set, zero value otherwise.
func (o *NetworkTestResult) GetLoss() float64 {
	if o == nil || utils.IsNil(o.Loss) {
		var ret float64
		return ret
	}
	return *o.Loss
}

// GetLossOk returns a tuple with the Loss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetLossOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Loss) {
		return nil, false
	}
	return o.Loss, true
}

// HasLoss returns a boolean if a field has been set.
func (o *NetworkTestResult) HasLoss() bool {
	if o != nil && !utils.IsNil(o.Loss) {
		return true
	}

	return false
}

// SetLoss gets a reference to the given float64 and assigns it to the Loss field.
func (o *NetworkTestResult) SetLoss(v float64) {
	o.Loss = &v
}

// GetMaxLatency returns the MaxLatency field value if set, zero value otherwise.
func (o *NetworkTestResult) GetMaxLatency() float64 {
	if o == nil || utils.IsNil(o.MaxLatency) {
		var ret float64
		return ret
	}
	return *o.MaxLatency
}

// GetMaxLatencyOk returns a tuple with the MaxLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetMaxLatencyOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.MaxLatency) {
		return nil, false
	}
	return o.MaxLatency, true
}

// HasMaxLatency returns a boolean if a field has been set.
func (o *NetworkTestResult) HasMaxLatency() bool {
	if o != nil && !utils.IsNil(o.MaxLatency) {
		return true
	}

	return false
}

// SetMaxLatency gets a reference to the given float64 and assigns it to the MaxLatency field.
func (o *NetworkTestResult) SetMaxLatency(v float64) {
	o.MaxLatency = &v
}

// GetMinLatency returns the MinLatency field value if set, zero value otherwise.
func (o *NetworkTestResult) GetMinLatency() float64 {
	if o == nil || utils.IsNil(o.MinLatency) {
		var ret float64
		return ret
	}
	return *o.MinLatency
}

// GetMinLatencyOk returns a tuple with the MinLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetMinLatencyOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.MinLatency) {
		return nil, false
	}
	return o.MinLatency, true
}

// HasMinLatency returns a boolean if a field has been set.
func (o *NetworkTestResult) HasMinLatency() bool {
	if o != nil && !utils.IsNil(o.MinLatency) {
		return true
	}

	return false
}

// SetMinLatency gets a reference to the given float64 and assigns it to the MinLatency field.
func (o *NetworkTestResult) SetMinLatency(v float64) {
	o.MinLatency = &v
}

// GetPacketsBySecond returns the PacketsBySecond field value if set, zero value otherwise.
func (o *NetworkTestResult) GetPacketsBySecond() [][]int32 {
	if o == nil || utils.IsNil(o.PacketsBySecond) {
		var ret [][]int32
		return ret
	}
	return o.PacketsBySecond
}

// GetPacketsBySecondOk returns a tuple with the PacketsBySecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetPacketsBySecondOk() ([][]int32, bool) {
	if o == nil || utils.IsNil(o.PacketsBySecond) {
		return nil, false
	}
	return o.PacketsBySecond, true
}

// HasPacketsBySecond returns a boolean if a field has been set.
func (o *NetworkTestResult) HasPacketsBySecond() bool {
	if o != nil && !utils.IsNil(o.PacketsBySecond) {
		return true
	}

	return false
}

// SetPacketsBySecond gets a reference to the given [][]int32 and assigns it to the PacketsBySecond field.
func (o *NetworkTestResult) SetPacketsBySecond(v [][]int32) {
	o.PacketsBySecond = v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *NetworkTestResult) GetAgent() TestResultAgent {
	if o == nil || utils.IsNil(o.Agent) {
		var ret TestResultAgent
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetAgentOk() (*TestResultAgent, bool) {
	if o == nil || utils.IsNil(o.Agent) {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *NetworkTestResult) HasAgent() bool {
	if o != nil && !utils.IsNil(o.Agent) {
		return true
	}

	return false
}

// SetAgent gets a reference to the given TestResultAgent and assigns it to the Agent field.
func (o *NetworkTestResult) SetAgent(v TestResultAgent) {
	o.Agent = &v
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise.
func (o *NetworkTestResult) GetServerIp() string {
	if o == nil || utils.IsNil(o.ServerIp) {
		var ret string
		return ret
	}
	return *o.ServerIp
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetServerIpOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ServerIp) {
		return nil, false
	}
	return o.ServerIp, true
}

// HasServerIp returns a boolean if a field has been set.
func (o *NetworkTestResult) HasServerIp() bool {
	if o != nil && !utils.IsNil(o.ServerIp) {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given string and assigns it to the ServerIp field.
func (o *NetworkTestResult) SetServerIp(v string) {
	o.ServerIp = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *NetworkTestResult) GetServer() string {
	if o == nil || utils.IsNil(o.Server) {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetServerOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *NetworkTestResult) HasServer() bool {
	if o != nil && !utils.IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *NetworkTestResult) SetServer(v string) {
	o.Server = &v
}

// GetHealthScore returns the HealthScore field value if set, zero value otherwise.
func (o *NetworkTestResult) GetHealthScore() float32 {
	if o == nil || utils.IsNil(o.HealthScore) {
		var ret float32
		return ret
	}
	return *o.HealthScore
}

// GetHealthScoreOk returns a tuple with the HealthScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetHealthScoreOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.HealthScore) {
		return nil, false
	}
	return o.HealthScore, true
}

// HasHealthScore returns a boolean if a field has been set.
func (o *NetworkTestResult) HasHealthScore() bool {
	if o != nil && !utils.IsNil(o.HealthScore) {
		return true
	}

	return false
}

// SetHealthScore gets a reference to the given float32 and assigns it to the HealthScore field.
func (o *NetworkTestResult) SetHealthScore(v float32) {
	o.HealthScore = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *NetworkTestResult) GetDirection() TestDirection {
	if o == nil || utils.IsNil(o.Direction) {
		var ret TestDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkTestResult) GetDirectionOk() (*TestDirection, bool) {
	if o == nil || utils.IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *NetworkTestResult) HasDirection() bool {
	if o != nil && !utils.IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given TestDirection and assigns it to the Direction field.
func (o *NetworkTestResult) SetDirection(v TestDirection) {
	o.Direction = &v
}

func (o NetworkTestResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkTestResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !utils.IsNil(o.RoundId) {
		toSerialize["roundId"] = o.RoundId
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !utils.IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !utils.IsNil(o.AvailableBandwidth) {
		toSerialize["availableBandwidth"] = o.AvailableBandwidth
	}
	if !utils.IsNil(o.AvgLatency) {
		toSerialize["avgLatency"] = o.AvgLatency
	}
	if !utils.IsNil(o.Bandwidth) {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if !utils.IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !utils.IsNil(o.Jitter) {
		toSerialize["jitter"] = o.Jitter
	}
	if !utils.IsNil(o.Loss) {
		toSerialize["loss"] = o.Loss
	}
	if !utils.IsNil(o.MaxLatency) {
		toSerialize["maxLatency"] = o.MaxLatency
	}
	if !utils.IsNil(o.MinLatency) {
		toSerialize["minLatency"] = o.MinLatency
	}
	if !utils.IsNil(o.PacketsBySecond) {
		toSerialize["packetsBySecond"] = o.PacketsBySecond
	}
	if !utils.IsNil(o.Agent) {
		toSerialize["agent"] = o.Agent
	}
	if !utils.IsNil(o.ServerIp) {
		toSerialize["serverIp"] = o.ServerIp
	}
	if !utils.IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !utils.IsNil(o.HealthScore) {
		toSerialize["healthScore"] = o.HealthScore
	}
	if !utils.IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	return toSerialize, nil
}

type NullableNetworkTestResult struct {
	value *NetworkTestResult
	isSet bool
}

func (v NullableNetworkTestResult) Get() *NetworkTestResult {
	return v.value
}

func (v *NullableNetworkTestResult) Set(val *NetworkTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTestResult(val *NetworkTestResult) *NullableNetworkTestResult {
	return &NullableNetworkTestResult{value: val, isSet: true}
}

func (v NullableNetworkTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


