/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AgentSearchFilters type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AgentSearchFilters{}

// AgentSearchFilters struct for AgentSearchFilters
type AgentSearchFilters struct {
	// Returns only agents that are an exact match of the provided identifiers.
	Id []string `json:"id,omitempty"`
	// Returns only agents with the given name.  This is an exact match only. 
	AgentName []string `json:"agentName,omitempty"`
	// Returns only agents with the given computer name. This is an exact match only. 
	ComputerName []string `json:"computerName,omitempty"`
	// Returns only agents that have at least one user with a name. starting with the provided string. This is a case-insensitive prefix match. 
	Username []string `json:"username,omitempty"`
	// Filter on the platform on which the agent is running. 
	Platform []Platform `json:"platform,omitempty"`
	// Case-insensitive prefix filter on the OS version.
	OsVersion []string `json:"osVersion,omitempty"`
	// Filter using the ISO country code of the location. 
	LocationCountryISO []string `json:"locationCountryISO,omitempty"`
	// Filter using the code for the first level administrative division within  the country. In US/Canada this is the State, in UK it's the country e.g. `ENG` 
	LocationSubdivision1Code []string `json:"locationSubdivision1Code,omitempty"`
	// This is a prefix match on the city name field. The endpoint expects this to contain the  name of the city in English. e.g. 'Paris' or '' 
	LocationCity []string `json:"locationCity,omitempty"`
	// Filter on the agent's license type 
	LicenseType []AgentLicenseType `json:"licenseType,omitempty"`
}

// NewAgentSearchFilters instantiates a new AgentSearchFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentSearchFilters() *AgentSearchFilters {
	this := AgentSearchFilters{}
	return &this
}

// NewAgentSearchFiltersWithDefaults instantiates a new AgentSearchFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentSearchFiltersWithDefaults() *AgentSearchFilters {
	this := AgentSearchFilters{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetId() []string {
	if o == nil || utils.IsNil(o.Id) {
		var ret []string
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetIdOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given []string and assigns it to the Id field.
func (o *AgentSearchFilters) SetId(v []string) {
	o.Id = v
}

// GetAgentName returns the AgentName field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetAgentName() []string {
	if o == nil || utils.IsNil(o.AgentName) {
		var ret []string
		return ret
	}
	return o.AgentName
}

// GetAgentNameOk returns a tuple with the AgentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetAgentNameOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.AgentName) {
		return nil, false
	}
	return o.AgentName, true
}

// HasAgentName returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasAgentName() bool {
	if o != nil && !utils.IsNil(o.AgentName) {
		return true
	}

	return false
}

// SetAgentName gets a reference to the given []string and assigns it to the AgentName field.
func (o *AgentSearchFilters) SetAgentName(v []string) {
	o.AgentName = v
}

// GetComputerName returns the ComputerName field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetComputerName() []string {
	if o == nil || utils.IsNil(o.ComputerName) {
		var ret []string
		return ret
	}
	return o.ComputerName
}

// GetComputerNameOk returns a tuple with the ComputerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetComputerNameOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.ComputerName) {
		return nil, false
	}
	return o.ComputerName, true
}

// HasComputerName returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasComputerName() bool {
	if o != nil && !utils.IsNil(o.ComputerName) {
		return true
	}

	return false
}

// SetComputerName gets a reference to the given []string and assigns it to the ComputerName field.
func (o *AgentSearchFilters) SetComputerName(v []string) {
	o.ComputerName = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetUsername() []string {
	if o == nil || utils.IsNil(o.Username) {
		var ret []string
		return ret
	}
	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetUsernameOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given []string and assigns it to the Username field.
func (o *AgentSearchFilters) SetUsername(v []string) {
	o.Username = v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetPlatform() []Platform {
	if o == nil || utils.IsNil(o.Platform) {
		var ret []Platform
		return ret
	}
	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetPlatformOk() ([]Platform, bool) {
	if o == nil || utils.IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasPlatform() bool {
	if o != nil && !utils.IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given []Platform and assigns it to the Platform field.
func (o *AgentSearchFilters) SetPlatform(v []Platform) {
	o.Platform = v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetOsVersion() []string {
	if o == nil || utils.IsNil(o.OsVersion) {
		var ret []string
		return ret
	}
	return o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetOsVersionOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.OsVersion) {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasOsVersion() bool {
	if o != nil && !utils.IsNil(o.OsVersion) {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given []string and assigns it to the OsVersion field.
func (o *AgentSearchFilters) SetOsVersion(v []string) {
	o.OsVersion = v
}

// GetLocationCountryISO returns the LocationCountryISO field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetLocationCountryISO() []string {
	if o == nil || utils.IsNil(o.LocationCountryISO) {
		var ret []string
		return ret
	}
	return o.LocationCountryISO
}

// GetLocationCountryISOOk returns a tuple with the LocationCountryISO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetLocationCountryISOOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.LocationCountryISO) {
		return nil, false
	}
	return o.LocationCountryISO, true
}

// HasLocationCountryISO returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasLocationCountryISO() bool {
	if o != nil && !utils.IsNil(o.LocationCountryISO) {
		return true
	}

	return false
}

// SetLocationCountryISO gets a reference to the given []string and assigns it to the LocationCountryISO field.
func (o *AgentSearchFilters) SetLocationCountryISO(v []string) {
	o.LocationCountryISO = v
}

// GetLocationSubdivision1Code returns the LocationSubdivision1Code field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetLocationSubdivision1Code() []string {
	if o == nil || utils.IsNil(o.LocationSubdivision1Code) {
		var ret []string
		return ret
	}
	return o.LocationSubdivision1Code
}

// GetLocationSubdivision1CodeOk returns a tuple with the LocationSubdivision1Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetLocationSubdivision1CodeOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.LocationSubdivision1Code) {
		return nil, false
	}
	return o.LocationSubdivision1Code, true
}

// HasLocationSubdivision1Code returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasLocationSubdivision1Code() bool {
	if o != nil && !utils.IsNil(o.LocationSubdivision1Code) {
		return true
	}

	return false
}

// SetLocationSubdivision1Code gets a reference to the given []string and assigns it to the LocationSubdivision1Code field.
func (o *AgentSearchFilters) SetLocationSubdivision1Code(v []string) {
	o.LocationSubdivision1Code = v
}

// GetLocationCity returns the LocationCity field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetLocationCity() []string {
	if o == nil || utils.IsNil(o.LocationCity) {
		var ret []string
		return ret
	}
	return o.LocationCity
}

// GetLocationCityOk returns a tuple with the LocationCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetLocationCityOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.LocationCity) {
		return nil, false
	}
	return o.LocationCity, true
}

// HasLocationCity returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasLocationCity() bool {
	if o != nil && !utils.IsNil(o.LocationCity) {
		return true
	}

	return false
}

// SetLocationCity gets a reference to the given []string and assigns it to the LocationCity field.
func (o *AgentSearchFilters) SetLocationCity(v []string) {
	o.LocationCity = v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *AgentSearchFilters) GetLicenseType() []AgentLicenseType {
	if o == nil || utils.IsNil(o.LicenseType) {
		var ret []AgentLicenseType
		return ret
	}
	return o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentSearchFilters) GetLicenseTypeOk() ([]AgentLicenseType, bool) {
	if o == nil || utils.IsNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *AgentSearchFilters) HasLicenseType() bool {
	if o != nil && !utils.IsNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given []AgentLicenseType and assigns it to the LicenseType field.
func (o *AgentSearchFilters) SetLicenseType(v []AgentLicenseType) {
	o.LicenseType = v
}

func (o AgentSearchFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentSearchFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.AgentName) {
		toSerialize["agentName"] = o.AgentName
	}
	if !utils.IsNil(o.ComputerName) {
		toSerialize["computerName"] = o.ComputerName
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !utils.IsNil(o.OsVersion) {
		toSerialize["osVersion"] = o.OsVersion
	}
	if !utils.IsNil(o.LocationCountryISO) {
		toSerialize["locationCountryISO"] = o.LocationCountryISO
	}
	if !utils.IsNil(o.LocationSubdivision1Code) {
		toSerialize["locationSubdivision1Code"] = o.LocationSubdivision1Code
	}
	if !utils.IsNil(o.LocationCity) {
		toSerialize["locationCity"] = o.LocationCity
	}
	if !utils.IsNil(o.LicenseType) {
		toSerialize["licenseType"] = o.LicenseType
	}
	return toSerialize, nil
}

type NullableAgentSearchFilters struct {
	value *AgentSearchFilters
	isSet bool
}

func (v NullableAgentSearchFilters) Get() *AgentSearchFilters {
	return v.value
}

func (v *NullableAgentSearchFilters) Set(val *AgentSearchFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentSearchFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentSearchFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentSearchFilters(val *AgentSearchFilters) *NullableAgentSearchFilters {
	return &NullableAgentSearchFilters{value: val, isSet: true}
}

func (v NullableAgentSearchFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentSearchFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


