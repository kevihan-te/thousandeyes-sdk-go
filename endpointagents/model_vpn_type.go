/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
	"fmt"
)

// VpnType Name of the VPN provider.
type VpnType string

// List of VpnType
const (
	VPNTYPE_CISCO_ANYCONNECT VpnType = "cisco-anyconnect"
	VPNTYPE_PALO_ALTO_GLOBALPROTECT VpnType = "palo-alto-globalprotect"
	VPNTYPE_IVANTI_CONNECT_SECURE VpnType = "ivanti-connect-secure"
	VPNTYPE_ZSCALER_INTERNET_ACCESS VpnType = "zscaler-internet-access"
	VPNTYPE_F5_BIG_IP VpnType = "f5-big-ip"
)

// All allowed values of VpnType enum
var AllowedVpnTypeEnumValues = []VpnType{
	"cisco-anyconnect",
	"palo-alto-globalprotect",
	"ivanti-connect-secure",
	"zscaler-internet-access",
	"f5-big-ip",
}

func (v *VpnType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnType(value)
	for _, existing := range AllowedVpnTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnType", value)
}

// NewVpnTypeFromValue returns a pointer to a valid VpnType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnTypeFromValue(v string) (*VpnType, error) {
	ev := VpnType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnType: valid values are %v", v, AllowedVpnTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnType) IsValid() bool {
	for _, existing := range AllowedVpnTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpnType value
func (v VpnType) Ptr() *VpnType {
	return &v
}

type NullableVpnType struct {
	value *VpnType
	isSet bool
}

func (v NullableVpnType) Get() *VpnType {
	return v.value
}

func (v *NullableVpnType) Set(val *VpnType) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnType) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnType(val *VpnType) *NullableVpnType {
	return &NullableVpnType{value: val, isSet: true}
}

func (v NullableVpnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

