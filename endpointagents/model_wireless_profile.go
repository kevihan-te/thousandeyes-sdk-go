/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the WirelessProfile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &WirelessProfile{}

// WirelessProfile struct for WirelessProfile
type WirelessProfile struct {
	Bssid *string `json:"bssid,omitempty"`
	Ssid *string `json:"ssid,omitempty"`
	Rssi *int32 `json:"rssi,omitempty"`
	Channel *int32 `json:"channel,omitempty"`
	PhyMode *string `json:"phyMode,omitempty"`
}

// NewWirelessProfile instantiates a new WirelessProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWirelessProfile() *WirelessProfile {
	this := WirelessProfile{}
	return &this
}

// NewWirelessProfileWithDefaults instantiates a new WirelessProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWirelessProfileWithDefaults() *WirelessProfile {
	this := WirelessProfile{}
	return &this
}

// GetBssid returns the Bssid field value if set, zero value otherwise.
func (o *WirelessProfile) GetBssid() string {
	if o == nil || utils.IsNil(o.Bssid) {
		var ret string
		return ret
	}
	return *o.Bssid
}

// GetBssidOk returns a tuple with the Bssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessProfile) GetBssidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Bssid) {
		return nil, false
	}
	return o.Bssid, true
}

// HasBssid returns a boolean if a field has been set.
func (o *WirelessProfile) HasBssid() bool {
	if o != nil && !utils.IsNil(o.Bssid) {
		return true
	}

	return false
}

// SetBssid gets a reference to the given string and assigns it to the Bssid field.
func (o *WirelessProfile) SetBssid(v string) {
	o.Bssid = &v
}

// GetSsid returns the Ssid field value if set, zero value otherwise.
func (o *WirelessProfile) GetSsid() string {
	if o == nil || utils.IsNil(o.Ssid) {
		var ret string
		return ret
	}
	return *o.Ssid
}

// GetSsidOk returns a tuple with the Ssid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessProfile) GetSsidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Ssid) {
		return nil, false
	}
	return o.Ssid, true
}

// HasSsid returns a boolean if a field has been set.
func (o *WirelessProfile) HasSsid() bool {
	if o != nil && !utils.IsNil(o.Ssid) {
		return true
	}

	return false
}

// SetSsid gets a reference to the given string and assigns it to the Ssid field.
func (o *WirelessProfile) SetSsid(v string) {
	o.Ssid = &v
}

// GetRssi returns the Rssi field value if set, zero value otherwise.
func (o *WirelessProfile) GetRssi() int32 {
	if o == nil || utils.IsNil(o.Rssi) {
		var ret int32
		return ret
	}
	return *o.Rssi
}

// GetRssiOk returns a tuple with the Rssi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessProfile) GetRssiOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Rssi) {
		return nil, false
	}
	return o.Rssi, true
}

// HasRssi returns a boolean if a field has been set.
func (o *WirelessProfile) HasRssi() bool {
	if o != nil && !utils.IsNil(o.Rssi) {
		return true
	}

	return false
}

// SetRssi gets a reference to the given int32 and assigns it to the Rssi field.
func (o *WirelessProfile) SetRssi(v int32) {
	o.Rssi = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *WirelessProfile) GetChannel() int32 {
	if o == nil || utils.IsNil(o.Channel) {
		var ret int32
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessProfile) GetChannelOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *WirelessProfile) HasChannel() bool {
	if o != nil && !utils.IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given int32 and assigns it to the Channel field.
func (o *WirelessProfile) SetChannel(v int32) {
	o.Channel = &v
}

// GetPhyMode returns the PhyMode field value if set, zero value otherwise.
func (o *WirelessProfile) GetPhyMode() string {
	if o == nil || utils.IsNil(o.PhyMode) {
		var ret string
		return ret
	}
	return *o.PhyMode
}

// GetPhyModeOk returns a tuple with the PhyMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WirelessProfile) GetPhyModeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.PhyMode) {
		return nil, false
	}
	return o.PhyMode, true
}

// HasPhyMode returns a boolean if a field has been set.
func (o *WirelessProfile) HasPhyMode() bool {
	if o != nil && !utils.IsNil(o.PhyMode) {
		return true
	}

	return false
}

// SetPhyMode gets a reference to the given string and assigns it to the PhyMode field.
func (o *WirelessProfile) SetPhyMode(v string) {
	o.PhyMode = &v
}

func (o WirelessProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WirelessProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Bssid) {
		toSerialize["bssid"] = o.Bssid
	}
	if !utils.IsNil(o.Ssid) {
		toSerialize["ssid"] = o.Ssid
	}
	if !utils.IsNil(o.Rssi) {
		toSerialize["rssi"] = o.Rssi
	}
	if !utils.IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !utils.IsNil(o.PhyMode) {
		toSerialize["phyMode"] = o.PhyMode
	}
	return toSerialize, nil
}

type NullableWirelessProfile struct {
	value *WirelessProfile
	isSet bool
}

func (v NullableWirelessProfile) Get() *WirelessProfile {
	return v.value
}

func (v *NullableWirelessProfile) Set(val *WirelessProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableWirelessProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableWirelessProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWirelessProfile(val *WirelessProfile) *NullableWirelessProfile {
	return &NullableWirelessProfile{value: val, isSet: true}
}

func (v NullableWirelessProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWirelessProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


