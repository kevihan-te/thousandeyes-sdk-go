/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the InterfaceProfile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &InterfaceProfile{}

// InterfaceProfile struct for InterfaceProfile
type InterfaceProfile struct {
	InterfaceName *string `json:"interfaceName,omitempty"`
	AddressProfiles []AddressProfile `json:"addressProfiles,omitempty"`
	HardwareType *InterfaceHardwareType `json:"hardwareType,omitempty"`
	EthernetProfile *EndpointAgentEthernetProfile `json:"ethernetProfile,omitempty"`
	WirelessProfile *WirelessProfile `json:"wirelessProfile,omitempty"`
}

// NewInterfaceProfile instantiates a new InterfaceProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceProfile() *InterfaceProfile {
	this := InterfaceProfile{}
	return &this
}

// NewInterfaceProfileWithDefaults instantiates a new InterfaceProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceProfileWithDefaults() *InterfaceProfile {
	this := InterfaceProfile{}
	return &this
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *InterfaceProfile) GetInterfaceName() string {
	if o == nil || utils.IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceProfile) GetInterfaceNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *InterfaceProfile) HasInterfaceName() bool {
	if o != nil && !utils.IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *InterfaceProfile) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetAddressProfiles returns the AddressProfiles field value if set, zero value otherwise.
func (o *InterfaceProfile) GetAddressProfiles() []AddressProfile {
	if o == nil || utils.IsNil(o.AddressProfiles) {
		var ret []AddressProfile
		return ret
	}
	return o.AddressProfiles
}

// GetAddressProfilesOk returns a tuple with the AddressProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceProfile) GetAddressProfilesOk() ([]AddressProfile, bool) {
	if o == nil || utils.IsNil(o.AddressProfiles) {
		return nil, false
	}
	return o.AddressProfiles, true
}

// HasAddressProfiles returns a boolean if a field has been set.
func (o *InterfaceProfile) HasAddressProfiles() bool {
	if o != nil && !utils.IsNil(o.AddressProfiles) {
		return true
	}

	return false
}

// SetAddressProfiles gets a reference to the given []AddressProfile and assigns it to the AddressProfiles field.
func (o *InterfaceProfile) SetAddressProfiles(v []AddressProfile) {
	o.AddressProfiles = v
}

// GetHardwareType returns the HardwareType field value if set, zero value otherwise.
func (o *InterfaceProfile) GetHardwareType() InterfaceHardwareType {
	if o == nil || utils.IsNil(o.HardwareType) {
		var ret InterfaceHardwareType
		return ret
	}
	return *o.HardwareType
}

// GetHardwareTypeOk returns a tuple with the HardwareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceProfile) GetHardwareTypeOk() (*InterfaceHardwareType, bool) {
	if o == nil || utils.IsNil(o.HardwareType) {
		return nil, false
	}
	return o.HardwareType, true
}

// HasHardwareType returns a boolean if a field has been set.
func (o *InterfaceProfile) HasHardwareType() bool {
	if o != nil && !utils.IsNil(o.HardwareType) {
		return true
	}

	return false
}

// SetHardwareType gets a reference to the given InterfaceHardwareType and assigns it to the HardwareType field.
func (o *InterfaceProfile) SetHardwareType(v InterfaceHardwareType) {
	o.HardwareType = &v
}

// GetEthernetProfile returns the EthernetProfile field value if set, zero value otherwise.
func (o *InterfaceProfile) GetEthernetProfile() EndpointAgentEthernetProfile {
	if o == nil || utils.IsNil(o.EthernetProfile) {
		var ret EndpointAgentEthernetProfile
		return ret
	}
	return *o.EthernetProfile
}

// GetEthernetProfileOk returns a tuple with the EthernetProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceProfile) GetEthernetProfileOk() (*EndpointAgentEthernetProfile, bool) {
	if o == nil || utils.IsNil(o.EthernetProfile) {
		return nil, false
	}
	return o.EthernetProfile, true
}

// HasEthernetProfile returns a boolean if a field has been set.
func (o *InterfaceProfile) HasEthernetProfile() bool {
	if o != nil && !utils.IsNil(o.EthernetProfile) {
		return true
	}

	return false
}

// SetEthernetProfile gets a reference to the given EndpointAgentEthernetProfile and assigns it to the EthernetProfile field.
func (o *InterfaceProfile) SetEthernetProfile(v EndpointAgentEthernetProfile) {
	o.EthernetProfile = &v
}

// GetWirelessProfile returns the WirelessProfile field value if set, zero value otherwise.
func (o *InterfaceProfile) GetWirelessProfile() WirelessProfile {
	if o == nil || utils.IsNil(o.WirelessProfile) {
		var ret WirelessProfile
		return ret
	}
	return *o.WirelessProfile
}

// GetWirelessProfileOk returns a tuple with the WirelessProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceProfile) GetWirelessProfileOk() (*WirelessProfile, bool) {
	if o == nil || utils.IsNil(o.WirelessProfile) {
		return nil, false
	}
	return o.WirelessProfile, true
}

// HasWirelessProfile returns a boolean if a field has been set.
func (o *InterfaceProfile) HasWirelessProfile() bool {
	if o != nil && !utils.IsNil(o.WirelessProfile) {
		return true
	}

	return false
}

// SetWirelessProfile gets a reference to the given WirelessProfile and assigns it to the WirelessProfile field.
func (o *InterfaceProfile) SetWirelessProfile(v WirelessProfile) {
	o.WirelessProfile = &v
}

func (o InterfaceProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.InterfaceName) {
		toSerialize["interfaceName"] = o.InterfaceName
	}
	if !utils.IsNil(o.AddressProfiles) {
		toSerialize["addressProfiles"] = o.AddressProfiles
	}
	if !utils.IsNil(o.HardwareType) {
		toSerialize["hardwareType"] = o.HardwareType
	}
	if !utils.IsNil(o.EthernetProfile) {
		toSerialize["ethernetProfile"] = o.EthernetProfile
	}
	if !utils.IsNil(o.WirelessProfile) {
		toSerialize["wirelessProfile"] = o.WirelessProfile
	}
	return toSerialize, nil
}

type NullableInterfaceProfile struct {
	value *InterfaceProfile
	isSet bool
}

func (v NullableInterfaceProfile) Get() *InterfaceProfile {
	return v.value
}

func (v *NullableInterfaceProfile) Set(val *InterfaceProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceProfile(val *InterfaceProfile) *NullableInterfaceProfile {
	return &NullableInterfaceProfile{value: val, isSet: true}
}

func (v NullableInterfaceProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


