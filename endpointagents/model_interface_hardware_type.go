/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
	"fmt"
)

// InterfaceHardwareType the model 'InterfaceHardwareType'
type InterfaceHardwareType string

// List of InterfaceHardwareType
const (
	INTERFACEHARDWARETYPE_UNKNOWN InterfaceHardwareType = "unknown"
	INTERFACEHARDWARETYPE_WIRELESS InterfaceHardwareType = "wireless"
	INTERFACEHARDWARETYPE_ETHERNET InterfaceHardwareType = "ethernet"
	INTERFACEHARDWARETYPE_MODEM InterfaceHardwareType = "modem"
	INTERFACEHARDWARETYPE_VIRTUAL InterfaceHardwareType = "virtual"
	INTERFACEHARDWARETYPE_LOOPBACK InterfaceHardwareType = "loopback"
	INTERFACEHARDWARETYPE_OTHER InterfaceHardwareType = "other"
)

// All allowed values of InterfaceHardwareType enum
var AllowedInterfaceHardwareTypeEnumValues = []InterfaceHardwareType{
	"unknown",
	"wireless",
	"ethernet",
	"modem",
	"virtual",
	"loopback",
	"other",
}

func (v *InterfaceHardwareType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceHardwareType(value)
	for _, existing := range AllowedInterfaceHardwareTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceHardwareType", value)
}

// NewInterfaceHardwareTypeFromValue returns a pointer to a valid InterfaceHardwareType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceHardwareTypeFromValue(v string) (*InterfaceHardwareType, error) {
	ev := InterfaceHardwareType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceHardwareType: valid values are %v", v, AllowedInterfaceHardwareTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceHardwareType) IsValid() bool {
	for _, existing := range AllowedInterfaceHardwareTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InterfaceHardwareType value
func (v InterfaceHardwareType) Ptr() *InterfaceHardwareType {
	return &v
}

type NullableInterfaceHardwareType struct {
	value *InterfaceHardwareType
	isSet bool
}

func (v NullableInterfaceHardwareType) Get() *InterfaceHardwareType {
	return v.value
}

func (v *NullableInterfaceHardwareType) Set(val *InterfaceHardwareType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceHardwareType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceHardwareType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceHardwareType(val *InterfaceHardwareType) *NullableInterfaceHardwareType {
	return &NullableInterfaceHardwareType{value: val, isSet: true}
}

func (v NullableInterfaceHardwareType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceHardwareType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

