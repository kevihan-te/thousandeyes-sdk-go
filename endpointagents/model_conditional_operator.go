/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
	"fmt"
)

// ConditionalOperator the model 'ConditionalOperator'
type ConditionalOperator string

// List of ConditionalOperator
const (
	CONDITIONALOPERATOR_AND ConditionalOperator = "and"
	CONDITIONALOPERATOR_OR ConditionalOperator = "or"
)

// All allowed values of ConditionalOperator enum
var AllowedConditionalOperatorEnumValues = []ConditionalOperator{
	"and",
	"or",
}

func (v *ConditionalOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionalOperator(value)
	for _, existing := range AllowedConditionalOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConditionalOperator", value)
}

// NewConditionalOperatorFromValue returns a pointer to a valid ConditionalOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionalOperatorFromValue(v string) (*ConditionalOperator, error) {
	ev := ConditionalOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConditionalOperator: valid values are %v", v, AllowedConditionalOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionalOperator) IsValid() bool {
	for _, existing := range AllowedConditionalOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionalOperator value
func (v ConditionalOperator) Ptr() *ConditionalOperator {
	return &v
}

type NullableConditionalOperator struct {
	value *ConditionalOperator
	isSet bool
}

func (v NullableConditionalOperator) Get() *ConditionalOperator {
	return v.value
}

func (v *NullableConditionalOperator) Set(val *ConditionalOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalOperator(val *ConditionalOperator) *NullableConditionalOperator {
	return &NullableConditionalOperator{value: val, isSet: true}
}

func (v NullableConditionalOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

