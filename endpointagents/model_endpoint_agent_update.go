/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EndpointAgentUpdate type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointAgentUpdate{}

// EndpointAgentUpdate The `EndpointAgentUpdate` object contains supported fields for updates.
type EndpointAgentUpdate struct {
	// New agent name.
	Name *string `json:"name,omitempty"`
	LicenseType *AgentLicenseType `json:"licenseType,omitempty"`
}

// NewEndpointAgentUpdate instantiates a new EndpointAgentUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointAgentUpdate() *EndpointAgentUpdate {
	this := EndpointAgentUpdate{}
	return &this
}

// NewEndpointAgentUpdateWithDefaults instantiates a new EndpointAgentUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointAgentUpdateWithDefaults() *EndpointAgentUpdate {
	this := EndpointAgentUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EndpointAgentUpdate) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointAgentUpdate) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EndpointAgentUpdate) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EndpointAgentUpdate) SetName(v string) {
	o.Name = &v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *EndpointAgentUpdate) GetLicenseType() AgentLicenseType {
	if o == nil || utils.IsNil(o.LicenseType) {
		var ret AgentLicenseType
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointAgentUpdate) GetLicenseTypeOk() (*AgentLicenseType, bool) {
	if o == nil || utils.IsNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *EndpointAgentUpdate) HasLicenseType() bool {
	if o != nil && !utils.IsNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given AgentLicenseType and assigns it to the LicenseType field.
func (o *EndpointAgentUpdate) SetLicenseType(v AgentLicenseType) {
	o.LicenseType = &v
}

func (o EndpointAgentUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointAgentUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.LicenseType) {
		toSerialize["licenseType"] = o.LicenseType
	}
	return toSerialize, nil
}

type NullableEndpointAgentUpdate struct {
	value *EndpointAgentUpdate
	isSet bool
}

func (v NullableEndpointAgentUpdate) Get() *EndpointAgentUpdate {
	return v.value
}

func (v *NullableEndpointAgentUpdate) Set(val *EndpointAgentUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointAgentUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointAgentUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointAgentUpdate(val *EndpointAgentUpdate) *NullableEndpointAgentUpdate {
	return &NullableEndpointAgentUpdate{value: val, isSet: true}
}

func (v NullableEndpointAgentUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointAgentUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


