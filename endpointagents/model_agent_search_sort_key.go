/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
	"fmt"
)

// AgentSearchSortKey the model 'AgentSearchSortKey'
type AgentSearchSortKey string

// List of AgentSearchSortKey
const (
	AGENTSEARCHSORTKEY_PLATFORM AgentSearchSortKey = "platform"
	AGENTSEARCHSORTKEY_OS_VERSION AgentSearchSortKey = "osVersion"
	AGENTSEARCHSORTKEY_NAME AgentSearchSortKey = "name"
	AGENTSEARCHSORTKEY_USER_NAME AgentSearchSortKey = "userName"
	AGENTSEARCHSORTKEY_CITY AgentSearchSortKey = "city"
)

// All allowed values of AgentSearchSortKey enum
var AllowedAgentSearchSortKeyEnumValues = []AgentSearchSortKey{
	"platform",
	"osVersion",
	"name",
	"userName",
	"city",
}

func (v *AgentSearchSortKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AgentSearchSortKey(value)
	for _, existing := range AllowedAgentSearchSortKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AgentSearchSortKey", value)
}

// NewAgentSearchSortKeyFromValue returns a pointer to a valid AgentSearchSortKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgentSearchSortKeyFromValue(v string) (*AgentSearchSortKey, error) {
	ev := AgentSearchSortKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AgentSearchSortKey: valid values are %v", v, AllowedAgentSearchSortKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgentSearchSortKey) IsValid() bool {
	for _, existing := range AllowedAgentSearchSortKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AgentSearchSortKey value
func (v AgentSearchSortKey) Ptr() *AgentSearchSortKey {
	return &v
}

type NullableAgentSearchSortKey struct {
	value *AgentSearchSortKey
	isSet bool
}

func (v NullableAgentSearchSortKey) Get() *AgentSearchSortKey {
	return v.value
}

func (v *NullableAgentSearchSortKey) Set(val *AgentSearchSortKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentSearchSortKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentSearchSortKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentSearchSortKey(val *AgentSearchSortKey) *NullableAgentSearchSortKey {
	return &NullableAgentSearchSortKey{value: val, isSet: true}
}

func (v NullableAgentSearchSortKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentSearchSortKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

