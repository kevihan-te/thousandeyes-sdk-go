/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"bytes"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/client"
	internalerror "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/error"
	"github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/request"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EndpointAgentsAPIService EndpointAgentsAPI service
type EndpointAgentsAPIService client.Service

type ApiDeleteEndpointAgentRequest struct {

	ApiService *EndpointAgentsAPIService
	agentId string
	aid *string
	expand *[]ExpandEndpointAgentOptions
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiDeleteEndpointAgentRequest) Aid(aid string) ApiDeleteEndpointAgentRequest {
	r.aid = &aid
	return r
}

// This optional parameter allows you to control the expansion of test resources associated with the agent. By default, no expansion occurs when this query parameter is omitted. To expand the \&quot;clients\&quot; resource, include the query parameter &#x60;?expand&#x3D;clients&#x60;.  For multiple expansions, you have two options:    * Separate the values with commas. For example, &#x60;?expandAgent&#x3D;clients,tasks&#x60;. * Specify the parameter multiple times. For example, &#x60;?expandAgent&#x3D;clients&amp;expandAgent&#x3D;tasks&#x60;.  This parameter offers flexibility for users to customize the expansion of specific resources related to the agent. 
func (r ApiDeleteEndpointAgentRequest) Expand(expand []ExpandEndpointAgentOptions) ApiDeleteEndpointAgentRequest {
	r.expand = &expand
	return r
}

func (r ApiDeleteEndpointAgentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEndpointAgentExecute(r)
}

/*
DeleteEndpointAgent Delete endpoint agent

Deletes the agent with the specified `agent_id`.


 @param agentId The identifier of the agent to operate on.
 @return ApiDeleteEndpointAgentRequest
*/
func (a *EndpointAgentsAPIService) DeleteEndpointAgent(agentId string ) ApiDeleteEndpointAgentRequest {
	return ApiDeleteEndpointAgentRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
func (a *EndpointAgentsAPIService) DeleteEndpointAgentExecute(r ApiDeleteEndpointAgentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/{agentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDisableEndpointAgentRequest struct {

	ApiService *EndpointAgentsAPIService
	agentId string
	aid *string
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiDisableEndpointAgentRequest) Aid(aid string) ApiDisableEndpointAgentRequest {
	r.aid = &aid
	return r
}

func (r ApiDisableEndpointAgentRequest) Execute() (*EndpointAgent, *http.Response, error) {
	return r.ApiService.DisableEndpointAgentExecute(r)
}

/*
DisableEndpointAgent Disable endpoint agent

Disables an endpoint agent. If it's already disabled, it has no effect (no operation).

 @param agentId The identifier of the agent to operate on.
 @return ApiDisableEndpointAgentRequest
*/
func (a *EndpointAgentsAPIService) DisableEndpointAgent(agentId string ) ApiDisableEndpointAgentRequest {
	return ApiDisableEndpointAgentRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return EndpointAgent
func (a *EndpointAgentsAPIService) DisableEndpointAgentExecute(r ApiDisableEndpointAgentRequest) (*EndpointAgent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *EndpointAgent
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/{agentId}/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnableEndpointAgentRequest struct {

	ApiService *EndpointAgentsAPIService
	agentId string
	aid *string
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiEnableEndpointAgentRequest) Aid(aid string) ApiEnableEndpointAgentRequest {
	r.aid = &aid
	return r
}

func (r ApiEnableEndpointAgentRequest) Execute() (*EndpointAgent, *http.Response, error) {
	return r.ApiService.EnableEndpointAgentExecute(r)
}

/*
EnableEndpointAgent Enable endpoint agent

Enables an endpoint agent. If it's already enabled, it has no effect (no operation).

 @param agentId The identifier of the agent to operate on.
 @return ApiEnableEndpointAgentRequest
*/
func (a *EndpointAgentsAPIService) EnableEndpointAgent(agentId string ) ApiEnableEndpointAgentRequest {
	return ApiEnableEndpointAgentRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return EndpointAgent
func (a *EndpointAgentsAPIService) EnableEndpointAgentExecute(r ApiEnableEndpointAgentRequest) (*EndpointAgent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *EndpointAgent
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/{agentId}/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilterEndpointAgentsRequest struct {

	ApiService *EndpointAgentsAPIService
	agentSearchRequest *AgentSearchRequest
	max *int32
	cursor *string
	aid *string
	expand *[]ExpandEndpointAgentOptions
	includeDeleted *bool
}

// The filter options for advanced search filtering for agents.
func (r ApiFilterEndpointAgentsRequest) AgentSearchRequest(agentSearchRequest AgentSearchRequest) ApiFilterEndpointAgentsRequest {
	r.agentSearchRequest = &agentSearchRequest
	return r
}

// (Optional) Maximum number of objects to return.
func (r ApiFilterEndpointAgentsRequest) Max(max int32) ApiFilterEndpointAgentsRequest {
	r.max = &max
	return r
}

// (Optional) Opaque cursor used for pagination. Clients should use &#x60;next&#x60; value from &#x60;_links&#x60; instead of this parameter.
func (r ApiFilterEndpointAgentsRequest) Cursor(cursor string) ApiFilterEndpointAgentsRequest {
	r.cursor = &cursor
	return r
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiFilterEndpointAgentsRequest) Aid(aid string) ApiFilterEndpointAgentsRequest {
	r.aid = &aid
	return r
}

// This optional parameter allows you to control the expansion of test resources associated with the agent. By default, no expansion occurs when this query parameter is omitted. To expand the \&quot;clients\&quot; resource, include the query parameter &#x60;?expand&#x3D;clients&#x60;.  For multiple expansions, you have two options:    * Separate the values with commas. For example, &#x60;?expandAgent&#x3D;clients,tasks&#x60;. * Specify the parameter multiple times. For example, &#x60;?expandAgent&#x3D;clients&amp;expandAgent&#x3D;tasks&#x60;.  This parameter offers flexibility for users to customize the expansion of specific resources related to the agent. 
func (r ApiFilterEndpointAgentsRequest) Expand(expand []ExpandEndpointAgentOptions) ApiFilterEndpointAgentsRequest {
	r.expand = &expand
	return r
}

// When requesting entities, set to &#x60;true&#x60; if you want to see deleted entities.
func (r ApiFilterEndpointAgentsRequest) IncludeDeleted(includeDeleted bool) ApiFilterEndpointAgentsRequest {
	r.includeDeleted = &includeDeleted
	return r
}

func (r ApiFilterEndpointAgentsRequest) Execute() (*FilterEndpointAgentsResponse, *http.Response, error) {
	return r.ApiService.FilterEndpointAgentsExecute(r)
}

/*
FilterEndpointAgents Filter endpoint agents

Retrieves a list of endpoint agents within the specified account group that match the specified filters.

If no agents meet the filter criteria, the API returns an empty array.



 @return ApiFilterEndpointAgentsRequest
*/
func (a *EndpointAgentsAPIService) FilterEndpointAgents() ApiFilterEndpointAgentsRequest {
	return ApiFilterEndpointAgentsRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return FilterEndpointAgentsResponse
func (a *EndpointAgentsAPIService) FilterEndpointAgentsExecute(r ApiFilterEndpointAgentsRequest) (*FilterEndpointAgentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		localVarReturnValue  *FilterEndpointAgentsResponse
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/filter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentSearchRequest == nil {
		return localVarReturnValue, nil, internalerror.ReportError("agentSearchRequest is required and must be specified")
	}

	if r.max != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.cursor != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	if r.includeDeleted != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "includeDeleted", r.includeDeleted, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentSearchRequest
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEndpointAgentRequest struct {

	ApiService *EndpointAgentsAPIService
	agentId string
	aid *string
	expand *[]ExpandEndpointAgentOptions
	includeDeleted *bool
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetEndpointAgentRequest) Aid(aid string) ApiGetEndpointAgentRequest {
	r.aid = &aid
	return r
}

// This optional parameter allows you to control the expansion of test resources associated with the agent. By default, no expansion occurs when this query parameter is omitted. To expand the \&quot;clients\&quot; resource, include the query parameter &#x60;?expand&#x3D;clients&#x60;.  For multiple expansions, you have two options:    * Separate the values with commas. For example, &#x60;?expandAgent&#x3D;clients,tasks&#x60;. * Specify the parameter multiple times. For example, &#x60;?expandAgent&#x3D;clients&amp;expandAgent&#x3D;tasks&#x60;.  This parameter offers flexibility for users to customize the expansion of specific resources related to the agent. 
func (r ApiGetEndpointAgentRequest) Expand(expand []ExpandEndpointAgentOptions) ApiGetEndpointAgentRequest {
	r.expand = &expand
	return r
}

// When requesting entities, set to &#x60;true&#x60; if you want to see deleted entities.
func (r ApiGetEndpointAgentRequest) IncludeDeleted(includeDeleted bool) ApiGetEndpointAgentRequest {
	r.includeDeleted = &includeDeleted
	return r
}

func (r ApiGetEndpointAgentRequest) Execute() (*EndpointAgent, *http.Response, error) {
	return r.ApiService.GetEndpointAgentExecute(r)
}

/*
GetEndpointAgent Retrieve endpoint agent

Retrieves details of an agent with the specified `agent_id`.

 @param agentId The identifier of the agent to operate on.
 @return ApiGetEndpointAgentRequest
*/
func (a *EndpointAgentsAPIService) GetEndpointAgent(agentId string ) ApiGetEndpointAgentRequest {
	return ApiGetEndpointAgentRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return EndpointAgent
func (a *EndpointAgentsAPIService) GetEndpointAgentExecute(r ApiGetEndpointAgentRequest) (*EndpointAgent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *EndpointAgent
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/{agentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	if r.includeDeleted != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "includeDeleted", r.includeDeleted, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEndpointAgentsRequest struct {

	ApiService *EndpointAgentsAPIService
	max *int32
	cursor *string
	aid *string
	expand *[]ExpandEndpointAgentOptions
	includeDeleted *bool
	useAllPermittedAids *bool
	agentName *string
	computerName *string
}

// (Optional) Maximum number of objects to return.
func (r ApiGetEndpointAgentsRequest) Max(max int32) ApiGetEndpointAgentsRequest {
	r.max = &max
	return r
}

// (Optional) Opaque cursor used for pagination. Clients should use &#x60;next&#x60; value from &#x60;_links&#x60; instead of this parameter.
func (r ApiGetEndpointAgentsRequest) Cursor(cursor string) ApiGetEndpointAgentsRequest {
	r.cursor = &cursor
	return r
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetEndpointAgentsRequest) Aid(aid string) ApiGetEndpointAgentsRequest {
	r.aid = &aid
	return r
}

// This optional parameter allows you to control the expansion of test resources associated with the agent. By default, no expansion occurs when this query parameter is omitted. To expand the \&quot;clients\&quot; resource, include the query parameter &#x60;?expand&#x3D;clients&#x60;.  For multiple expansions, you have two options:    * Separate the values with commas. For example, &#x60;?expandAgent&#x3D;clients,tasks&#x60;. * Specify the parameter multiple times. For example, &#x60;?expandAgent&#x3D;clients&amp;expandAgent&#x3D;tasks&#x60;.  This parameter offers flexibility for users to customize the expansion of specific resources related to the agent. 
func (r ApiGetEndpointAgentsRequest) Expand(expand []ExpandEndpointAgentOptions) ApiGetEndpointAgentsRequest {
	r.expand = &expand
	return r
}

// When requesting entities, set to &#x60;true&#x60; if you want to see deleted entities.
func (r ApiGetEndpointAgentsRequest) IncludeDeleted(includeDeleted bool) ApiGetEndpointAgentsRequest {
	r.includeDeleted = &includeDeleted
	return r
}

// Set to &#x60;true&#x60; to load data from all accounts the user has access to.
func (r ApiGetEndpointAgentsRequest) UseAllPermittedAids(useAllPermittedAids bool) ApiGetEndpointAgentsRequest {
	r.useAllPermittedAids = &useAllPermittedAids
	return r
}

// Returns only agents with the specified name.  This is an exact match only. 
func (r ApiGetEndpointAgentsRequest) AgentName(agentName string) ApiGetEndpointAgentsRequest {
	r.agentName = &agentName
	return r
}

// Returns only agents with the specified computer name. This is an exact match only. 
func (r ApiGetEndpointAgentsRequest) ComputerName(computerName string) ApiGetEndpointAgentsRequest {
	r.computerName = &computerName
	return r
}

func (r ApiGetEndpointAgentsRequest) Execute() (*ListEndpointAgentsResponse, *http.Response, error) {
	return r.ApiService.GetEndpointAgentsExecute(r)
}

/*
GetEndpointAgents List endpoint agents

Retrieves a list of endpoint agents in a given account group.

If there are no agents in the specified account group, it returns an empty array.



 @return ApiGetEndpointAgentsRequest
*/
func (a *EndpointAgentsAPIService) GetEndpointAgents() ApiGetEndpointAgentsRequest {
	return ApiGetEndpointAgentsRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return ListEndpointAgentsResponse
func (a *EndpointAgentsAPIService) GetEndpointAgentsExecute(r ApiGetEndpointAgentsRequest) (*ListEndpointAgentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *ListEndpointAgentsResponse
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.max != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "")
	}
	if r.cursor != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "")
	}
	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	if r.includeDeleted != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "includeDeleted", r.includeDeleted, "")
	}
	if r.useAllPermittedAids != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "useAllPermittedAids", r.useAllPermittedAids, "")
	} else {
		var defaultValue bool = false
		r.useAllPermittedAids = &defaultValue
	}
	if r.agentName != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "agentName", r.agentName, "")
	}
	if r.computerName != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "computerName", r.computerName, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEndpointAgentsConnectionStringRequest struct {

	ApiService *EndpointAgentsAPIService
	aid *string
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiGetEndpointAgentsConnectionStringRequest) Aid(aid string) ApiGetEndpointAgentsConnectionStringRequest {
	r.aid = &aid
	return r
}

func (r ApiGetEndpointAgentsConnectionStringRequest) Execute() (*ConnectionString, *http.Response, error) {
	return r.ApiService.GetEndpointAgentsConnectionStringExecute(r)
}

/*
GetEndpointAgentsConnectionString Get agent connection string


 @return ApiGetEndpointAgentsConnectionStringRequest
*/
func (a *EndpointAgentsAPIService) GetEndpointAgentsConnectionString() ApiGetEndpointAgentsConnectionStringRequest {
	return ApiGetEndpointAgentsConnectionStringRequest{
		ApiService: a,
	}
}

// Execute executes the request
//  @return ConnectionString
func (a *EndpointAgentsAPIService) GetEndpointAgentsConnectionStringExecute(r ApiGetEndpointAgentsConnectionStringRequest) (*ConnectionString, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		localVarReturnValue  *ConnectionString
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/connection-string"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateEndpointAgentRequest struct {

	ApiService *EndpointAgentsAPIService
	agentId string
	aid *string
	expand *[]ExpandEndpointAgentOptions
	endpointAgentUpdate *EndpointAgentUpdate
}

// A unique identifier associated with your account group. You can retrieve your &#x60;AccountGroupId&#x60; from the &#x60;/account-groups&#x60; endpoint. Note that you must be assigned to the target account group. Specifying this parameter without being assigned to the target account group will result in an error response.
func (r ApiUpdateEndpointAgentRequest) Aid(aid string) ApiUpdateEndpointAgentRequest {
	r.aid = &aid
	return r
}

// This optional parameter allows you to control the expansion of test resources associated with the agent. By default, no expansion occurs when this query parameter is omitted. To expand the \&quot;clients\&quot; resource, include the query parameter &#x60;?expand&#x3D;clients&#x60;.  For multiple expansions, you have two options:    * Separate the values with commas. For example, &#x60;?expandAgent&#x3D;clients,tasks&#x60;. * Specify the parameter multiple times. For example, &#x60;?expandAgent&#x3D;clients&amp;expandAgent&#x3D;tasks&#x60;.  This parameter offers flexibility for users to customize the expansion of specific resources related to the agent. 
func (r ApiUpdateEndpointAgentRequest) Expand(expand []ExpandEndpointAgentOptions) ApiUpdateEndpointAgentRequest {
	r.expand = &expand
	return r
}

// Fields to modify on the agent
func (r ApiUpdateEndpointAgentRequest) EndpointAgentUpdate(endpointAgentUpdate EndpointAgentUpdate) ApiUpdateEndpointAgentRequest {
	r.endpointAgentUpdate = &endpointAgentUpdate
	return r
}

func (r ApiUpdateEndpointAgentRequest) Execute() (*EndpointAgent, *http.Response, error) {
	return r.ApiService.UpdateEndpointAgentExecute(r)
}

/*
UpdateEndpointAgent Update endpoint agent

Updates the agent with the specified `agent_id`. This API supports the modification of the following fields:

* `name`

* `licenseType`

Any attempt to update fields other than those listed above, with a value different from their current value, will result in a 400 Bad Request response.


 @param agentId The identifier of the agent to operate on.
 @return ApiUpdateEndpointAgentRequest
*/
func (a *EndpointAgentsAPIService) UpdateEndpointAgent(agentId string ) ApiUpdateEndpointAgentRequest {
	return ApiUpdateEndpointAgentRequest{
		ApiService: a,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return EndpointAgent
func (a *EndpointAgentsAPIService) UpdateEndpointAgentExecute(r ApiUpdateEndpointAgentRequest) (*EndpointAgent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		localVarReturnValue  *EndpointAgent
	)

	localBasePath := a.Client.GetConfig().ServerURL

	localVarPath := localBasePath + "/endpoint/agents/{agentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentId"+"}", url.PathEscape(request.ParameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.aid != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "aid", r.aid, "")
	}
	if r.expand != nil {
		request.ParameterAddToHeaderOrQuery(localVarQueryParams, "expand", r.expand, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := request.SelectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/hal+json", "application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := request.SelectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.endpointAgentUpdate
	req, err := a.Client.PrepareRequest(localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.Client.CallAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Error
            a.decodeError(&v, localVarBody, localVarHTTPResponse, newErr)
            return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.Client.Decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &internalerror.GenericAPIError{
			Body:  localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

func (a *EndpointAgentsAPIService) decodeError(v interface{}, localVarBody []byte, localVarHTTPResponse *http.Response, newErr *internalerror.GenericAPIError) {
    err := a.Client.Decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
    if err != nil {
        newErr.ErrorMessage = err.Error()
        return
    }
    newErr.ErrorMessage = internalerror.FormatErrorMessage(localVarHTTPResponse.Status, &v)
    newErr.Model = v
}
