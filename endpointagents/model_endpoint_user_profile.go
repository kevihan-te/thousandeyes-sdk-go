/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the EndpointUserProfile type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndpointUserProfile{}

// EndpointUserProfile struct for EndpointUserProfile
type EndpointUserProfile struct {
	UserName string `json:"userName"`
}

type _EndpointUserProfile EndpointUserProfile

// NewEndpointUserProfile instantiates a new EndpointUserProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointUserProfile(userName string) *EndpointUserProfile {
	this := EndpointUserProfile{}
	this.UserName = userName
	return &this
}

// NewEndpointUserProfileWithDefaults instantiates a new EndpointUserProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointUserProfileWithDefaults() *EndpointUserProfile {
	this := EndpointUserProfile{}
	return &this
}

// GetUserName returns the UserName field value
func (o *EndpointUserProfile) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *EndpointUserProfile) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *EndpointUserProfile) SetUserName(v string) {
	o.UserName = v
}

func (o EndpointUserProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointUserProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userName"] = o.UserName
	return toSerialize, nil
}

func (o *EndpointUserProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointUserProfile := _EndpointUserProfile{}

    err = json.Unmarshal(data, &varEndpointUserProfile)

	if err != nil {
		return err
	}

	*o = EndpointUserProfile(varEndpointUserProfile)

	return err
}

type NullableEndpointUserProfile struct {
	value *EndpointUserProfile
	isSet bool
}

func (v NullableEndpointUserProfile) Get() *EndpointUserProfile {
	return v.value
}

func (v *NullableEndpointUserProfile) Set(val *EndpointUserProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointUserProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointUserProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointUserProfile(val *EndpointUserProfile) *NullableEndpointUserProfile {
	return &NullableEndpointUserProfile{value: val, isSet: true}
}

func (v NullableEndpointUserProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointUserProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


