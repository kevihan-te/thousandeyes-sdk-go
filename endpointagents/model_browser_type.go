/*
Endpoint Agents API

Manage ThousandEyes Endpoint Agents using this API.   For more information about Endpoint Agents, see [Endpoint Agents](https://docs.thousandeyes.com/product-documentation/global-vantage-points/endpoint-agents).

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointagents

import (
	"encoding/json"
	"fmt"
)

// BrowserType the model 'BrowserType'
type BrowserType string

// List of BrowserType
const (
	BROWSERTYPE_CHROME BrowserType = "chrome"
	BROWSERTYPE_CHROME_CANARY BrowserType = "chrome-canary"
	BROWSERTYPE_CHROMIUM BrowserType = "chromium"
	BROWSERTYPE_IE BrowserType = "ie"
	BROWSERTYPE_EDGE BrowserType = "edge"
	BROWSERTYPE_UNKNOWN BrowserType = "unknown"
)

// All allowed values of BrowserType enum
var AllowedBrowserTypeEnumValues = []BrowserType{
	"chrome",
	"chrome-canary",
	"chromium",
	"ie",
	"edge",
	"unknown",
}

func (v *BrowserType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BrowserType(value)
	for _, existing := range AllowedBrowserTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BrowserType", value)
}

// NewBrowserTypeFromValue returns a pointer to a valid BrowserType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBrowserTypeFromValue(v string) (*BrowserType, error) {
	ev := BrowserType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BrowserType: valid values are %v", v, AllowedBrowserTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BrowserType) IsValid() bool {
	for _, existing := range AllowedBrowserTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BrowserType value
func (v BrowserType) Ptr() *BrowserType {
	return &v
}

type NullableBrowserType struct {
	value *BrowserType
	isSet bool
}

func (v NullableBrowserType) Get() *BrowserType {
	return v.value
}

func (v *NullableBrowserType) Set(val *BrowserType) {
	v.value = val
	v.isSet = true
}

func (v NullableBrowserType) IsSet() bool {
	return v.isSet
}

func (v *NullableBrowserType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrowserType(val *BrowserType) *NullableBrowserType {
	return &NullableBrowserType{value: val, isSet: true}
}

func (v NullableBrowserType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrowserType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

