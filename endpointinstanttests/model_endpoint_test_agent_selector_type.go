/*
Endpoint Instant Scheduled Tests API

 You can create and execute a new endpoint instant scheduled test within ThousandEyes using this API. The test parameters are specified in the `POST` data.  The following applies to the Endpoint Instant Scheduled Tests API:  * To initiate the creation and execution of an instant scheduled test, the user must possess the `Edit endpoint tests` permission.  * Upon successful creation of an instant scheduled test, the API responds with an HTTP/201 CREATED status code and return the test definition. * It's important to note that the response does not include the results of the instant scheduled test. To retrieve test results, users can utilize the Endpoint Test Data endpoints. The URLs for these API test data endpoints are provided within the test definition output when an instant scheduled test is created. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package endpointinstanttests

import (
	"encoding/json"
	"fmt"
)

// EndpointTestAgentSelectorType Retrieve either all available agents, a specific list of agents, or a list of agent labels.
type EndpointTestAgentSelectorType string

// List of EndpointTestAgentSelectorType
const (
	ENDPOINTTESTAGENTSELECTORTYPE_ALL_AGENTS EndpointTestAgentSelectorType = "all-agents"
	ENDPOINTTESTAGENTSELECTORTYPE_SPECIFIC_AGENTS EndpointTestAgentSelectorType = "specific-agents"
	ENDPOINTTESTAGENTSELECTORTYPE_AGENT_LABELS EndpointTestAgentSelectorType = "agent-labels"
)

// All allowed values of EndpointTestAgentSelectorType enum
var AllowedEndpointTestAgentSelectorTypeEnumValues = []EndpointTestAgentSelectorType{
	"all-agents",
	"specific-agents",
	"agent-labels",
}

func (v *EndpointTestAgentSelectorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EndpointTestAgentSelectorType(value)
	for _, existing := range AllowedEndpointTestAgentSelectorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EndpointTestAgentSelectorType", value)
}

// NewEndpointTestAgentSelectorTypeFromValue returns a pointer to a valid EndpointTestAgentSelectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEndpointTestAgentSelectorTypeFromValue(v string) (*EndpointTestAgentSelectorType, error) {
	ev := EndpointTestAgentSelectorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EndpointTestAgentSelectorType: valid values are %v", v, AllowedEndpointTestAgentSelectorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EndpointTestAgentSelectorType) IsValid() bool {
	for _, existing := range AllowedEndpointTestAgentSelectorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EndpointTestAgentSelectorType value
func (v EndpointTestAgentSelectorType) Ptr() *EndpointTestAgentSelectorType {
	return &v
}

type NullableEndpointTestAgentSelectorType struct {
	value *EndpointTestAgentSelectorType
	isSet bool
}

func (v NullableEndpointTestAgentSelectorType) Get() *EndpointTestAgentSelectorType {
	return v.value
}

func (v *NullableEndpointTestAgentSelectorType) Set(val *EndpointTestAgentSelectorType) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointTestAgentSelectorType) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointTestAgentSelectorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointTestAgentSelectorType(val *EndpointTestAgentSelectorType) *NullableEndpointTestAgentSelectorType {
	return &NullableEndpointTestAgentSelectorType{value: val, isSet: true}
}

func (v NullableEndpointTestAgentSelectorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointTestAgentSelectorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

