/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the EndRepeat type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &EndRepeat{}

// EndRepeat End repeat options.
type EndRepeat struct {
	Type *EndRepeatType `json:"type,omitempty"`
	// End repeat after number of occurrences, only valid with count type option.
	Count *int32 `json:"count,omitempty"`
	// End repeat after specific date, only valid with date type option (ISO date format).
	Date *string `json:"date,omitempty"`
}

// NewEndRepeat instantiates a new EndRepeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndRepeat() *EndRepeat {
	this := EndRepeat{}
	return &this
}

// NewEndRepeatWithDefaults instantiates a new EndRepeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndRepeatWithDefaults() *EndRepeat {
	this := EndRepeat{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EndRepeat) GetType() EndRepeatType {
	if o == nil || utils.IsNil(o.Type) {
		var ret EndRepeatType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndRepeat) GetTypeOk() (*EndRepeatType, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EndRepeat) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EndRepeatType and assigns it to the Type field.
func (o *EndRepeat) SetType(v EndRepeatType) {
	o.Type = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *EndRepeat) GetCount() int32 {
	if o == nil || utils.IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndRepeat) GetCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *EndRepeat) HasCount() bool {
	if o != nil && !utils.IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *EndRepeat) SetCount(v int32) {
	o.Count = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *EndRepeat) GetDate() string {
	if o == nil || utils.IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndRepeat) GetDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *EndRepeat) HasDate() bool {
	if o != nil && !utils.IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *EndRepeat) SetDate(v string) {
	o.Date = &v
}

func (o EndRepeat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndRepeat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !utils.IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableEndRepeat struct {
	value *EndRepeat
	isSet bool
}

func (v NullableEndRepeat) Get() *EndRepeat {
	return v.value
}

func (v *NullableEndRepeat) Set(val *EndRepeat) {
	v.value = val
	v.isSet = true
}

func (v NullableEndRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableEndRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndRepeat(val *EndRepeat) *NullableEndRepeat {
	return &NullableEndRepeat{value: val, isSet: true}
}

func (v NullableEndRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


