/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Repeat type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Repeat{}

// Repeat Repeat options.
type Repeat struct {
	Type *RepeatType `json:"type,omitempty"`
	IntervalType *IntervalType `json:"intervalType,omitempty"`
	// Number of `intervalTypes` to wait before reactivating the alert suppression window.
	IntervalLength *int32 `json:"intervalLength,omitempty"`
	DaysOfWeek []DaysOfWeek `json:"daysOfWeek,omitempty"`
}

// NewRepeat instantiates a new Repeat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepeat() *Repeat {
	this := Repeat{}
	return &this
}

// NewRepeatWithDefaults instantiates a new Repeat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepeatWithDefaults() *Repeat {
	this := Repeat{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Repeat) GetType() RepeatType {
	if o == nil || utils.IsNil(o.Type) {
		var ret RepeatType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repeat) GetTypeOk() (*RepeatType, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Repeat) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RepeatType and assigns it to the Type field.
func (o *Repeat) SetType(v RepeatType) {
	o.Type = &v
}

// GetIntervalType returns the IntervalType field value if set, zero value otherwise.
func (o *Repeat) GetIntervalType() IntervalType {
	if o == nil || utils.IsNil(o.IntervalType) {
		var ret IntervalType
		return ret
	}
	return *o.IntervalType
}

// GetIntervalTypeOk returns a tuple with the IntervalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repeat) GetIntervalTypeOk() (*IntervalType, bool) {
	if o == nil || utils.IsNil(o.IntervalType) {
		return nil, false
	}
	return o.IntervalType, true
}

// HasIntervalType returns a boolean if a field has been set.
func (o *Repeat) HasIntervalType() bool {
	if o != nil && !utils.IsNil(o.IntervalType) {
		return true
	}

	return false
}

// SetIntervalType gets a reference to the given IntervalType and assigns it to the IntervalType field.
func (o *Repeat) SetIntervalType(v IntervalType) {
	o.IntervalType = &v
}

// GetIntervalLength returns the IntervalLength field value if set, zero value otherwise.
func (o *Repeat) GetIntervalLength() int32 {
	if o == nil || utils.IsNil(o.IntervalLength) {
		var ret int32
		return ret
	}
	return *o.IntervalLength
}

// GetIntervalLengthOk returns a tuple with the IntervalLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repeat) GetIntervalLengthOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.IntervalLength) {
		return nil, false
	}
	return o.IntervalLength, true
}

// HasIntervalLength returns a boolean if a field has been set.
func (o *Repeat) HasIntervalLength() bool {
	if o != nil && !utils.IsNil(o.IntervalLength) {
		return true
	}

	return false
}

// SetIntervalLength gets a reference to the given int32 and assigns it to the IntervalLength field.
func (o *Repeat) SetIntervalLength(v int32) {
	o.IntervalLength = &v
}

// GetDaysOfWeek returns the DaysOfWeek field value if set, zero value otherwise.
func (o *Repeat) GetDaysOfWeek() []DaysOfWeek {
	if o == nil || utils.IsNil(o.DaysOfWeek) {
		var ret []DaysOfWeek
		return ret
	}
	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repeat) GetDaysOfWeekOk() ([]DaysOfWeek, bool) {
	if o == nil || utils.IsNil(o.DaysOfWeek) {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *Repeat) HasDaysOfWeek() bool {
	if o != nil && !utils.IsNil(o.DaysOfWeek) {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []DaysOfWeek and assigns it to the DaysOfWeek field.
func (o *Repeat) SetDaysOfWeek(v []DaysOfWeek) {
	o.DaysOfWeek = v
}

func (o Repeat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Repeat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.IntervalType) {
		toSerialize["intervalType"] = o.IntervalType
	}
	if !utils.IsNil(o.IntervalLength) {
		toSerialize["intervalLength"] = o.IntervalLength
	}
	if !utils.IsNil(o.DaysOfWeek) {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	return toSerialize, nil
}

type NullableRepeat struct {
	value *Repeat
	isSet bool
}

func (v NullableRepeat) Get() *Repeat {
	return v.value
}

func (v *NullableRepeat) Set(val *Repeat) {
	v.value = val
	v.isSet = true
}

func (v NullableRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepeat(val *Repeat) *NullableRepeat {
	return &NullableRepeat{value: val, isSet: true}
}

func (v NullableRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


