/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
	"fmt"
)

// AlertType Type of alert being triggered. In multi-layered tests, this value represents the layer the alert relates to. See [Alert Details](https://developer.cisco.com/docs/thousandeyes/retrieve-alert-details/) documentation for a list of possible values
type AlertType string

// List of AlertType
const (
	ALERTTYPE_PAGE_LOAD AlertType = "page-load"
	ALERTTYPE_HTTP_SERVER AlertType = "http-server"
	ALERTTYPE_END_TO_END_SERVER AlertType = "end-to-end-server"
	ALERTTYPE_END_TO_END_AGENT AlertType = "end-to-end-agent"
	ALERTTYPE_VOICE AlertType = "voice"
	ALERTTYPE_DNS_SERVER AlertType = "dns-server"
	ALERTTYPE_DNS_TRACE AlertType = "dns-trace"
	ALERTTYPE_DNSSEC AlertType = "dnssec"
	ALERTTYPE_BGP AlertType = "bgp"
	ALERTTYPE_PATH_TRACE AlertType = "path-trace"
	ALERTTYPE_FTP AlertType = "ftp"
	ALERTTYPE_SIP_SERVER AlertType = "sip-server"
	ALERTTYPE_TRANSACTIONS AlertType = "transactions"
	ALERTTYPE_WEB_TRANSACTIONS AlertType = "web-transactions"
	ALERTTYPE_AGENT AlertType = "agent"
	ALERTTYPE_NETWORK_OUTAGE AlertType = "network-outage"
	ALERTTYPE_APPLICATION_OUTAGE AlertType = "application-outage"
	ALERTTYPE_DEVICE_DEVICE AlertType = "device-device"
	ALERTTYPE_DEVICE_INTERFACE AlertType = "device-interface"
	ALERTTYPE_ENDPOINT_NETWORK_SERVER AlertType = "endpoint-network-server"
	ALERTTYPE_ENDPOINT_HTTP_SERVER AlertType = "endpoint-http-server"
	ALERTTYPE_ENDPOINT_PATH_TRACE AlertType = "endpoint-path-trace"
	ALERTTYPE_ENDPOINT_BROWSER_SESSIONS_AGENT AlertType = "endpoint-browser-sessions-agent"
	ALERTTYPE_ENDPOINT_BROWSER_SESSIONS_APPLICATION AlertType = "endpoint-browser-sessions-application"
	ALERTTYPE_API AlertType = "api"
	ALERTTYPE_WEB_TRANSACTION AlertType = "web-transaction"
	ALERTTYPE_UNKNOWN AlertType = "unknown"
)

// All allowed values of AlertType enum
var AllowedAlertTypeEnumValues = []AlertType{
	"page-load",
	"http-server",
	"end-to-end-server",
	"end-to-end-agent",
	"voice",
	"dns-server",
	"dns-trace",
	"dnssec",
	"bgp",
	"path-trace",
	"ftp",
	"sip-server",
	"transactions",
	"web-transactions",
	"agent",
	"network-outage",
	"application-outage",
	"device-device",
	"device-interface",
	"endpoint-network-server",
	"endpoint-http-server",
	"endpoint-path-trace",
	"endpoint-browser-sessions-agent",
	"endpoint-browser-sessions-application",
	"api",
	"web-transaction",
	"unknown",
}

func (v *AlertType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertType(value)
	for _, existing := range AllowedAlertTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertType", value)
}

// NewAlertTypeFromValue returns a pointer to a valid AlertType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertTypeFromValue(v string) (*AlertType, error) {
	ev := AlertType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertType: valid values are %v", v, AllowedAlertTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertType) IsValid() bool {
	for _, existing := range AllowedAlertTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertType value
func (v AlertType) Ptr() *AlertType {
	return &v
}

type NullableAlertType struct {
	value *AlertType
	isSet bool
}

func (v NullableAlertType) Get() *AlertType {
	return v.value
}

func (v *NullableAlertType) Set(val *AlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertType(val *AlertType) *NullableAlertType {
	return &NullableAlertType{value: val, isSet: true}
}

func (v NullableAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

