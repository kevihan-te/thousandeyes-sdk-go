/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AlertLinks type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AlertLinks{}

// AlertLinks An object containing the alert links.
type AlertLinks struct {
	Test *Link `json:"test,omitempty"`
	Rule *Link `json:"rule,omitempty"`
	AppLink *Link `json:"appLink,omitempty"`
	Self *Link `json:"self,omitempty"`
}

// NewAlertLinks instantiates a new AlertLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertLinks() *AlertLinks {
	this := AlertLinks{}
	return &this
}

// NewAlertLinksWithDefaults instantiates a new AlertLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertLinksWithDefaults() *AlertLinks {
	this := AlertLinks{}
	return &this
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *AlertLinks) GetTest() Link {
	if o == nil || utils.IsNil(o.Test) {
		var ret Link
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertLinks) GetTestOk() (*Link, bool) {
	if o == nil || utils.IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *AlertLinks) HasTest() bool {
	if o != nil && !utils.IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given Link and assigns it to the Test field.
func (o *AlertLinks) SetTest(v Link) {
	o.Test = &v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *AlertLinks) GetRule() Link {
	if o == nil || utils.IsNil(o.Rule) {
		var ret Link
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertLinks) GetRuleOk() (*Link, bool) {
	if o == nil || utils.IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *AlertLinks) HasRule() bool {
	if o != nil && !utils.IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given Link and assigns it to the Rule field.
func (o *AlertLinks) SetRule(v Link) {
	o.Rule = &v
}

// GetAppLink returns the AppLink field value if set, zero value otherwise.
func (o *AlertLinks) GetAppLink() Link {
	if o == nil || utils.IsNil(o.AppLink) {
		var ret Link
		return ret
	}
	return *o.AppLink
}

// GetAppLinkOk returns a tuple with the AppLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertLinks) GetAppLinkOk() (*Link, bool) {
	if o == nil || utils.IsNil(o.AppLink) {
		return nil, false
	}
	return o.AppLink, true
}

// HasAppLink returns a boolean if a field has been set.
func (o *AlertLinks) HasAppLink() bool {
	if o != nil && !utils.IsNil(o.AppLink) {
		return true
	}

	return false
}

// SetAppLink gets a reference to the given Link and assigns it to the AppLink field.
func (o *AlertLinks) SetAppLink(v Link) {
	o.AppLink = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AlertLinks) GetSelf() Link {
	if o == nil || utils.IsNil(o.Self) {
		var ret Link
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertLinks) GetSelfOk() (*Link, bool) {
	if o == nil || utils.IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AlertLinks) HasSelf() bool {
	if o != nil && !utils.IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given Link and assigns it to the Self field.
func (o *AlertLinks) SetSelf(v Link) {
	o.Self = &v
}

func (o AlertLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	if !utils.IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !utils.IsNil(o.AppLink) {
		toSerialize["appLink"] = o.AppLink
	}
	if !utils.IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	return toSerialize, nil
}

type NullableAlertLinks struct {
	value *AlertLinks
	isSet bool
}

func (v NullableAlertLinks) Get() *AlertLinks {
	return v.value
}

func (v *NullableAlertLinks) Set(val *AlertLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertLinks(val *AlertLinks) *NullableAlertLinks {
	return &NullableAlertLinks{value: val, isSet: true}
}

func (v NullableAlertLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


