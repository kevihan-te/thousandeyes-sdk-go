/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AlertMeta type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AlertMeta{}

// AlertMeta struct for AlertMeta
type AlertMeta struct {
	// Indicates the number of times this alert has re-entered the 'trigger' state after being suppressed. It starts at 1 and increments whenever a real-time ASW ends and the alert conditions remain active.
	Version *int32 `json:"version,omitempty"`
}

// NewAlertMeta instantiates a new AlertMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertMeta() *AlertMeta {
	this := AlertMeta{}
	return &this
}

// NewAlertMetaWithDefaults instantiates a new AlertMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertMetaWithDefaults() *AlertMeta {
	this := AlertMeta{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AlertMeta) GetVersion() int32 {
	if o == nil || utils.IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMeta) GetVersionOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AlertMeta) HasVersion() bool {
	if o != nil && !utils.IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *AlertMeta) SetVersion(v int32) {
	o.Version = &v
}

func (o AlertMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAlertMeta struct {
	value *AlertMeta
	isSet bool
}

func (v NullableAlertMeta) Get() *AlertMeta {
	return v.value
}

func (v *NullableAlertMeta) Set(val *AlertMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertMeta(val *AlertMeta) *NullableAlertMeta {
	return &NullableAlertMeta{value: val, isSet: true}
}

func (v NullableAlertMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


