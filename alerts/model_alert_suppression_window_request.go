/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the AlertSuppressionWindowRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AlertSuppressionWindowRequest{}

// AlertSuppressionWindowRequest struct for AlertSuppressionWindowRequest
type AlertSuppressionWindowRequest struct {
	// Unique ID of the alert suppression window.
	AlertSuppressionWindowId *string `json:"alertSuppressionWindowId,omitempty"`
	// Name of the alert suppression window.
	Name *string `json:"name,omitempty"`
	// Set to `false` for `disabled`, `true` for `enabled`.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	Status *AlertSuppressionWindowState `json:"status,omitempty"`
	// The date/time when the alert suppression window starts (ISO date-time format).
	StartDate *time.Time `json:"startDate,omitempty"`
	// Duration in seconds the suppression window is active.
	Duration *int32 `json:"duration,omitempty"`
	Repeat *Repeat `json:"repeat,omitempty"`
	EndRepeat *EndRepeat `json:"endRepeat,omitempty"`
	// List of tests to assign to the alert suppression window.
	Tests []string `json:"tests,omitempty"`
}

// NewAlertSuppressionWindowRequest instantiates a new AlertSuppressionWindowRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertSuppressionWindowRequest() *AlertSuppressionWindowRequest {
	this := AlertSuppressionWindowRequest{}
	return &this
}

// NewAlertSuppressionWindowRequestWithDefaults instantiates a new AlertSuppressionWindowRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertSuppressionWindowRequestWithDefaults() *AlertSuppressionWindowRequest {
	this := AlertSuppressionWindowRequest{}
	return &this
}

// GetAlertSuppressionWindowId returns the AlertSuppressionWindowId field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetAlertSuppressionWindowId() string {
	if o == nil || utils.IsNil(o.AlertSuppressionWindowId) {
		var ret string
		return ret
	}
	return *o.AlertSuppressionWindowId
}

// GetAlertSuppressionWindowIdOk returns a tuple with the AlertSuppressionWindowId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetAlertSuppressionWindowIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AlertSuppressionWindowId) {
		return nil, false
	}
	return o.AlertSuppressionWindowId, true
}

// HasAlertSuppressionWindowId returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasAlertSuppressionWindowId() bool {
	if o != nil && !utils.IsNil(o.AlertSuppressionWindowId) {
		return true
	}

	return false
}

// SetAlertSuppressionWindowId gets a reference to the given string and assigns it to the AlertSuppressionWindowId field.
func (o *AlertSuppressionWindowRequest) SetAlertSuppressionWindowId(v string) {
	o.AlertSuppressionWindowId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertSuppressionWindowRequest) SetName(v string) {
	o.Name = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetIsEnabled() bool {
	if o == nil || utils.IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasIsEnabled() bool {
	if o != nil && !utils.IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *AlertSuppressionWindowRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetStatus() AlertSuppressionWindowState {
	if o == nil || utils.IsNil(o.Status) {
		var ret AlertSuppressionWindowState
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetStatusOk() (*AlertSuppressionWindowState, bool) {
	if o == nil || utils.IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasStatus() bool {
	if o != nil && !utils.IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AlertSuppressionWindowState and assigns it to the Status field.
func (o *AlertSuppressionWindowRequest) SetStatus(v AlertSuppressionWindowState) {
	o.Status = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetStartDate() time.Time {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetStartDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *AlertSuppressionWindowRequest) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetDuration() int32 {
	if o == nil || utils.IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetDurationOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *AlertSuppressionWindowRequest) SetDuration(v int32) {
	o.Duration = &v
}

// GetRepeat returns the Repeat field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetRepeat() Repeat {
	if o == nil || utils.IsNil(o.Repeat) {
		var ret Repeat
		return ret
	}
	return *o.Repeat
}

// GetRepeatOk returns a tuple with the Repeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetRepeatOk() (*Repeat, bool) {
	if o == nil || utils.IsNil(o.Repeat) {
		return nil, false
	}
	return o.Repeat, true
}

// HasRepeat returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasRepeat() bool {
	if o != nil && !utils.IsNil(o.Repeat) {
		return true
	}

	return false
}

// SetRepeat gets a reference to the given Repeat and assigns it to the Repeat field.
func (o *AlertSuppressionWindowRequest) SetRepeat(v Repeat) {
	o.Repeat = &v
}

// GetEndRepeat returns the EndRepeat field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetEndRepeat() EndRepeat {
	if o == nil || utils.IsNil(o.EndRepeat) {
		var ret EndRepeat
		return ret
	}
	return *o.EndRepeat
}

// GetEndRepeatOk returns a tuple with the EndRepeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetEndRepeatOk() (*EndRepeat, bool) {
	if o == nil || utils.IsNil(o.EndRepeat) {
		return nil, false
	}
	return o.EndRepeat, true
}

// HasEndRepeat returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasEndRepeat() bool {
	if o != nil && !utils.IsNil(o.EndRepeat) {
		return true
	}

	return false
}

// SetEndRepeat gets a reference to the given EndRepeat and assigns it to the EndRepeat field.
func (o *AlertSuppressionWindowRequest) SetEndRepeat(v EndRepeat) {
	o.EndRepeat = &v
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *AlertSuppressionWindowRequest) GetTests() []string {
	if o == nil || utils.IsNil(o.Tests) {
		var ret []string
		return ret
	}
	return o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertSuppressionWindowRequest) GetTestsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Tests) {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *AlertSuppressionWindowRequest) HasTests() bool {
	if o != nil && !utils.IsNil(o.Tests) {
		return true
	}

	return false
}

// SetTests gets a reference to the given []string and assigns it to the Tests field.
func (o *AlertSuppressionWindowRequest) SetTests(v []string) {
	o.Tests = v
}

func (o AlertSuppressionWindowRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertSuppressionWindowRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AlertSuppressionWindowId) {
		toSerialize["alertSuppressionWindowId"] = o.AlertSuppressionWindowId
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !utils.IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !utils.IsNil(o.Repeat) {
		toSerialize["repeat"] = o.Repeat
	}
	if !utils.IsNil(o.EndRepeat) {
		toSerialize["endRepeat"] = o.EndRepeat
	}
	if !utils.IsNil(o.Tests) {
		toSerialize["tests"] = o.Tests
	}
	return toSerialize, nil
}

type NullableAlertSuppressionWindowRequest struct {
	value *AlertSuppressionWindowRequest
	isSet bool
}

func (v NullableAlertSuppressionWindowRequest) Get() *AlertSuppressionWindowRequest {
	return v.value
}

func (v *NullableAlertSuppressionWindowRequest) Set(val *AlertSuppressionWindowRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSuppressionWindowRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSuppressionWindowRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSuppressionWindowRequest(val *AlertSuppressionWindowRequest) *NullableAlertSuppressionWindowRequest {
	return &NullableAlertSuppressionWindowRequest{value: val, isSet: true}
}

func (v NullableAlertSuppressionWindowRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSuppressionWindowRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


