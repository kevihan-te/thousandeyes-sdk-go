/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the StartAlertMetrics type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &StartAlertMetrics{}

// StartAlertMetrics String representation of the metric at the time that the source began alerting.   Note that the alert `start` and `startDate` for a particular source do not need to be the same,  as sources may change alerting status throughout an alert's lifecycle.
type StartAlertMetrics struct {
	Metrics *string `json:"metrics,omitempty"`
}

// NewStartAlertMetrics instantiates a new StartAlertMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartAlertMetrics() *StartAlertMetrics {
	this := StartAlertMetrics{}
	return &this
}

// NewStartAlertMetricsWithDefaults instantiates a new StartAlertMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartAlertMetricsWithDefaults() *StartAlertMetrics {
	this := StartAlertMetrics{}
	return &this
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *StartAlertMetrics) GetMetrics() string {
	if o == nil || utils.IsNil(o.Metrics) {
		var ret string
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartAlertMetrics) GetMetricsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *StartAlertMetrics) HasMetrics() bool {
	if o != nil && !utils.IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given string and assigns it to the Metrics field.
func (o *StartAlertMetrics) SetMetrics(v string) {
	o.Metrics = &v
}

func (o StartAlertMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartAlertMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	return toSerialize, nil
}

type NullableStartAlertMetrics struct {
	value *StartAlertMetrics
	isSet bool
}

func (v NullableStartAlertMetrics) Get() *StartAlertMetrics {
	return v.value
}

func (v *NullableStartAlertMetrics) Set(val *StartAlertMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableStartAlertMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableStartAlertMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartAlertMetrics(val *StartAlertMetrics) *NullableStartAlertMetrics {
	return &NullableStartAlertMetrics{value: val, isSet: true}
}

func (v NullableStartAlertMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartAlertMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


