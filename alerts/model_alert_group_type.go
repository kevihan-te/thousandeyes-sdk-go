/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
	"fmt"
)

// AlertGroupType Category of alert type based on the application or network layer and source of the test.
type AlertGroupType string

// List of AlertGroupType
const (
	ALERTGROUPTYPE_BGP AlertGroupType = "bgp"
	ALERTGROUPTYPE_BROWSER_SESSION AlertGroupType = "browser-session"
	ALERTGROUPTYPE_CLOUD_ENTERPRISE AlertGroupType = "cloud-enterprise"
	ALERTGROUPTYPE_ENDPOINT AlertGroupType = "endpoint"
)

// All allowed values of AlertGroupType enum
var AllowedAlertGroupTypeEnumValues = []AlertGroupType{
	"bgp",
	"browser-session",
	"cloud-enterprise",
	"endpoint",
}

func (v *AlertGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertGroupType(value)
	for _, existing := range AllowedAlertGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertGroupType", value)
}

// NewAlertGroupTypeFromValue returns a pointer to a valid AlertGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertGroupTypeFromValue(v string) (*AlertGroupType, error) {
	ev := AlertGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertGroupType: valid values are %v", v, AllowedAlertGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertGroupType) IsValid() bool {
	for _, existing := range AllowedAlertGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertGroupType value
func (v AlertGroupType) Ptr() *AlertGroupType {
	return &v
}

type NullableAlertGroupType struct {
	value *AlertGroupType
	isSet bool
}

func (v NullableAlertGroupType) Get() *AlertGroupType {
	return v.value
}

func (v *NullableAlertGroupType) Set(val *AlertGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertGroupType(val *AlertGroupType) *NullableAlertGroupType {
	return &NullableAlertGroupType{value: val, isSet: true}
}

func (v NullableAlertGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

