/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
	"fmt"
)

// RepeatType Repeat options type.
type RepeatType string

// List of RepeatType
const (
	REPEATTYPE_DAY RepeatType = "day"
	REPEATTYPE_WEEK RepeatType = "week"
	REPEATTYPE_MONTH RepeatType = "month"
	REPEATTYPE_CUSTOM RepeatType = "custom"
)

// All allowed values of RepeatType enum
var AllowedRepeatTypeEnumValues = []RepeatType{
	"day",
	"week",
	"month",
	"custom",
}

func (v *RepeatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RepeatType(value)
	for _, existing := range AllowedRepeatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RepeatType", value)
}

// NewRepeatTypeFromValue returns a pointer to a valid RepeatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRepeatTypeFromValue(v string) (*RepeatType, error) {
	ev := RepeatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RepeatType: valid values are %v", v, AllowedRepeatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RepeatType) IsValid() bool {
	for _, existing := range AllowedRepeatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RepeatType value
func (v RepeatType) Ptr() *RepeatType {
	return &v
}

type NullableRepeatType struct {
	value *RepeatType
	isSet bool
}

func (v NullableRepeatType) Get() *RepeatType {
	return v.value
}

func (v *NullableRepeatType) Set(val *RepeatType) {
	v.value = val
	v.isSet = true
}

func (v NullableRepeatType) IsSet() bool {
	return v.isSet
}

func (v *NullableRepeatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepeatType(val *RepeatType) *NullableRepeatType {
	return &NullableRepeatType{value: val, isSet: true}
}

func (v NullableRepeatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepeatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

