/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the BaseAlert type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &BaseAlert{}

// BaseAlert struct for BaseAlert
type BaseAlert struct {
	// A unique ID for each individual alert occurrence.
	Id *string `json:"id,omitempty"`
	AlertType *AlertType `json:"alertType,omitempty"`
	// (Optional) When passing `window` or `startDate` parameter,  the client will also receive the `startDate` field indicating the UTC start date of the data's time range being retrieved  (ISO date-time format).
	StartDate *time.Time `json:"startDate,omitempty"`
	// (Optional) When passing `window` or `endDate` parameter,  the client will also receive the `endDate` field indicating the UTC end date of the data's time range being retrieved  (ISO date-time format).
	EndDate *time.Time `json:"endDate,omitempty"`
	// Number of sources that meet the alert criteria.
	ViolationCount *int32 `json:"violationCount,omitempty"`
	// Duration in seconds the alert was active
	Duration *int64 `json:"duration,omitempty"`
	// Indicates whether the alert is currently suppressed by a real-time ASW.
	Suppressed *bool `json:"suppressed,omitempty"`
	Meta *AlertMeta `json:"meta,omitempty"`
	Links *AlertLinks `json:"_links,omitempty"`
}

// NewBaseAlert instantiates a new BaseAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseAlert() *BaseAlert {
	this := BaseAlert{}
	return &this
}

// NewBaseAlertWithDefaults instantiates a new BaseAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseAlertWithDefaults() *BaseAlert {
	this := BaseAlert{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BaseAlert) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BaseAlert) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BaseAlert) SetId(v string) {
	o.Id = &v
}

// GetAlertType returns the AlertType field value if set, zero value otherwise.
func (o *BaseAlert) GetAlertType() AlertType {
	if o == nil || utils.IsNil(o.AlertType) {
		var ret AlertType
		return ret
	}
	return *o.AlertType
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetAlertTypeOk() (*AlertType, bool) {
	if o == nil || utils.IsNil(o.AlertType) {
		return nil, false
	}
	return o.AlertType, true
}

// HasAlertType returns a boolean if a field has been set.
func (o *BaseAlert) HasAlertType() bool {
	if o != nil && !utils.IsNil(o.AlertType) {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given AlertType and assigns it to the AlertType field.
func (o *BaseAlert) SetAlertType(v AlertType) {
	o.AlertType = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BaseAlert) GetStartDate() time.Time {
	if o == nil || utils.IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetStartDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BaseAlert) HasStartDate() bool {
	if o != nil && !utils.IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *BaseAlert) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BaseAlert) GetEndDate() time.Time {
	if o == nil || utils.IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetEndDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BaseAlert) HasEndDate() bool {
	if o != nil && !utils.IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *BaseAlert) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetViolationCount returns the ViolationCount field value if set, zero value otherwise.
func (o *BaseAlert) GetViolationCount() int32 {
	if o == nil || utils.IsNil(o.ViolationCount) {
		var ret int32
		return ret
	}
	return *o.ViolationCount
}

// GetViolationCountOk returns a tuple with the ViolationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetViolationCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.ViolationCount) {
		return nil, false
	}
	return o.ViolationCount, true
}

// HasViolationCount returns a boolean if a field has been set.
func (o *BaseAlert) HasViolationCount() bool {
	if o != nil && !utils.IsNil(o.ViolationCount) {
		return true
	}

	return false
}

// SetViolationCount gets a reference to the given int32 and assigns it to the ViolationCount field.
func (o *BaseAlert) SetViolationCount(v int32) {
	o.ViolationCount = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *BaseAlert) GetDuration() int64 {
	if o == nil || utils.IsNil(o.Duration) {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetDurationOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *BaseAlert) HasDuration() bool {
	if o != nil && !utils.IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *BaseAlert) SetDuration(v int64) {
	o.Duration = &v
}

// GetSuppressed returns the Suppressed field value if set, zero value otherwise.
func (o *BaseAlert) GetSuppressed() bool {
	if o == nil || utils.IsNil(o.Suppressed) {
		var ret bool
		return ret
	}
	return *o.Suppressed
}

// GetSuppressedOk returns a tuple with the Suppressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetSuppressedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Suppressed) {
		return nil, false
	}
	return o.Suppressed, true
}

// HasSuppressed returns a boolean if a field has been set.
func (o *BaseAlert) HasSuppressed() bool {
	if o != nil && !utils.IsNil(o.Suppressed) {
		return true
	}

	return false
}

// SetSuppressed gets a reference to the given bool and assigns it to the Suppressed field.
func (o *BaseAlert) SetSuppressed(v bool) {
	o.Suppressed = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *BaseAlert) GetMeta() AlertMeta {
	if o == nil || utils.IsNil(o.Meta) {
		var ret AlertMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetMetaOk() (*AlertMeta, bool) {
	if o == nil || utils.IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *BaseAlert) HasMeta() bool {
	if o != nil && !utils.IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given AlertMeta and assigns it to the Meta field.
func (o *BaseAlert) SetMeta(v AlertMeta) {
	o.Meta = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BaseAlert) GetLinks() AlertLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret AlertLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAlert) GetLinksOk() (*AlertLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BaseAlert) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AlertLinks and assigns it to the Links field.
func (o *BaseAlert) SetLinks(v AlertLinks) {
	o.Links = &v
}

func (o BaseAlert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseAlert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.AlertType) {
		toSerialize["alertType"] = o.AlertType
	}
	if !utils.IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !utils.IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !utils.IsNil(o.ViolationCount) {
		toSerialize["violationCount"] = o.ViolationCount
	}
	if !utils.IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !utils.IsNil(o.Suppressed) {
		toSerialize["suppressed"] = o.Suppressed
	}
	if !utils.IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableBaseAlert struct {
	value *BaseAlert
	isSet bool
}

func (v NullableBaseAlert) Get() *BaseAlert {
	return v.value
}

func (v *NullableBaseAlert) Set(val *BaseAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAlert(val *BaseAlert) *NullableBaseAlert {
	return &NullableBaseAlert{value: val, isSet: true}
}

func (v NullableBaseAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


