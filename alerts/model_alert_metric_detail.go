/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the AlertMetricDetail type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &AlertMetricDetail{}

// AlertMetricDetail struct for AlertMetricDetail
type AlertMetricDetail struct {
	End *EndAlertMetrics `json:"end,omitempty"`
	// Unique metric detail id.
	Id *string `json:"id,omitempty"`
	// Geolocation of the alert.
	Name *string `json:"name,omitempty"`
	Start *StartAlertMetrics `json:"start,omitempty"`
	State *State `json:"state,omitempty"`
	// Type of the alert metric.
	Type *string `json:"type,omitempty"`
}

// NewAlertMetricDetail instantiates a new AlertMetricDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertMetricDetail() *AlertMetricDetail {
	this := AlertMetricDetail{}
	return &this
}

// NewAlertMetricDetailWithDefaults instantiates a new AlertMetricDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertMetricDetailWithDefaults() *AlertMetricDetail {
	this := AlertMetricDetail{}
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *AlertMetricDetail) GetEnd() EndAlertMetrics {
	if o == nil || utils.IsNil(o.End) {
		var ret EndAlertMetrics
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMetricDetail) GetEndOk() (*EndAlertMetrics, bool) {
	if o == nil || utils.IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *AlertMetricDetail) HasEnd() bool {
	if o != nil && !utils.IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given EndAlertMetrics and assigns it to the End field.
func (o *AlertMetricDetail) SetEnd(v EndAlertMetrics) {
	o.End = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertMetricDetail) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMetricDetail) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertMetricDetail) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertMetricDetail) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertMetricDetail) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMetricDetail) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertMetricDetail) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertMetricDetail) SetName(v string) {
	o.Name = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *AlertMetricDetail) GetStart() StartAlertMetrics {
	if o == nil || utils.IsNil(o.Start) {
		var ret StartAlertMetrics
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMetricDetail) GetStartOk() (*StartAlertMetrics, bool) {
	if o == nil || utils.IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *AlertMetricDetail) HasStart() bool {
	if o != nil && !utils.IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given StartAlertMetrics and assigns it to the Start field.
func (o *AlertMetricDetail) SetStart(v StartAlertMetrics) {
	o.Start = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AlertMetricDetail) GetState() State {
	if o == nil || utils.IsNil(o.State) {
		var ret State
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMetricDetail) GetStateOk() (*State, bool) {
	if o == nil || utils.IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AlertMetricDetail) HasState() bool {
	if o != nil && !utils.IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given State and assigns it to the State field.
func (o *AlertMetricDetail) SetState(v State) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertMetricDetail) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertMetricDetail) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertMetricDetail) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertMetricDetail) SetType(v string) {
	o.Type = &v
}

func (o AlertMetricDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertMetricDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !utils.IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAlertMetricDetail struct {
	value *AlertMetricDetail
	isSet bool
}

func (v NullableAlertMetricDetail) Get() *AlertMetricDetail {
	return v.value
}

func (v *NullableAlertMetricDetail) Set(val *AlertMetricDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertMetricDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertMetricDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertMetricDetail(val *AlertMetricDetail) *NullableAlertMetricDetail {
	return &NullableAlertMetricDetail{value: val, isSet: true}
}

func (v NullableAlertMetricDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertMetricDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


