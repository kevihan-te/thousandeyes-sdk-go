/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
	"fmt"
)

// AlertTestType Valid Alert Types for which to return test links.
type AlertTestType string

// List of AlertTestType
const (
	ALERTTESTTYPE_API AlertTestType = "api"
	ALERTTESTTYPE_AGENT_TO_AGENT AlertTestType = "agent-to-agent"
	ALERTTESTTYPE_AGENT_TO_SERVER AlertTestType = "agent-to-server"
	ALERTTESTTYPE_BGP AlertTestType = "bgp"
	ALERTTESTTYPE_HTTP_SERVER AlertTestType = "http-server"
	ALERTTESTTYPE_PAGE_LOAD AlertTestType = "page-load"
	ALERTTESTTYPE_WEB_TRANSACTIONS AlertTestType = "web-transactions"
	ALERTTESTTYPE_FTP_SERVER AlertTestType = "ftp-server"
	ALERTTESTTYPE_DNS_TRACE AlertTestType = "dns-trace"
	ALERTTESTTYPE_DNS_SERVER AlertTestType = "dns-server"
	ALERTTESTTYPE_DNSSEC AlertTestType = "dnssec"
	ALERTTESTTYPE_SIP_SERVER AlertTestType = "sip-server"
	ALERTTESTTYPE_VOICE AlertTestType = "voice"
	ALERTTESTTYPE_ENDPOINT_HTTP_SERVER AlertTestType = "endpoint-http-server"
	ALERTTESTTYPE_ENDPOINT_NETWORK_SERVER AlertTestType = "endpoint-network-server"
	ALERTTESTTYPE_ENDPOINT_PATH_TRACE AlertTestType = "endpoint-path-trace"
)

// All allowed values of AlertTestType enum
var AllowedAlertTestTypeEnumValues = []AlertTestType{
	"api",
	"agent-to-agent",
	"agent-to-server",
	"bgp",
	"http-server",
	"page-load",
	"web-transactions",
	"ftp-server",
	"dns-trace",
	"dns-server",
	"dnssec",
	"sip-server",
	"voice",
	"endpoint-http-server",
	"endpoint-network-server",
	"endpoint-path-trace",
}

func (v *AlertTestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertTestType(value)
	for _, existing := range AllowedAlertTestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertTestType", value)
}

// NewAlertTestTypeFromValue returns a pointer to a valid AlertTestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertTestTypeFromValue(v string) (*AlertTestType, error) {
	ev := AlertTestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertTestType: valid values are %v", v, AllowedAlertTestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertTestType) IsValid() bool {
	for _, existing := range AllowedAlertTestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertTestType value
func (v AlertTestType) Ptr() *AlertTestType {
	return &v
}

type NullableAlertTestType struct {
	value *AlertTestType
	isSet bool
}

func (v NullableAlertTestType) Get() *AlertTestType {
	return v.value
}

func (v *NullableAlertTestType) Set(val *AlertTestType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertTestType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertTestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertTestType(val *AlertTestType) *NullableAlertTestType {
	return &NullableAlertTestType{value: val, isSet: true}
}

func (v NullableAlertTestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertTestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

