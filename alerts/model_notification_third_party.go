/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NotificationThirdParty type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationThirdParty{}

// NotificationThirdParty Webhook notification.
type NotificationThirdParty struct {
	// Integration ID.
	IntegrationId *string `json:"integrationId,omitempty"`
	IntegrationType *ThirdPartyIntegrationType `json:"integrationType,omitempty"`
}

// NewNotificationThirdParty instantiates a new NotificationThirdParty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationThirdParty() *NotificationThirdParty {
	this := NotificationThirdParty{}
	return &this
}

// NewNotificationThirdPartyWithDefaults instantiates a new NotificationThirdParty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationThirdPartyWithDefaults() *NotificationThirdParty {
	this := NotificationThirdParty{}
	return &this
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *NotificationThirdParty) GetIntegrationId() string {
	if o == nil || utils.IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationThirdParty) GetIntegrationIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *NotificationThirdParty) HasIntegrationId() bool {
	if o != nil && !utils.IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *NotificationThirdParty) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *NotificationThirdParty) GetIntegrationType() ThirdPartyIntegrationType {
	if o == nil || utils.IsNil(o.IntegrationType) {
		var ret ThirdPartyIntegrationType
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationThirdParty) GetIntegrationTypeOk() (*ThirdPartyIntegrationType, bool) {
	if o == nil || utils.IsNil(o.IntegrationType) {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *NotificationThirdParty) HasIntegrationType() bool {
	if o != nil && !utils.IsNil(o.IntegrationType) {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given ThirdPartyIntegrationType and assigns it to the IntegrationType field.
func (o *NotificationThirdParty) SetIntegrationType(v ThirdPartyIntegrationType) {
	o.IntegrationType = &v
}

func (o NotificationThirdParty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationThirdParty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !utils.IsNil(o.IntegrationType) {
		toSerialize["integrationType"] = o.IntegrationType
	}
	return toSerialize, nil
}

type NullableNotificationThirdParty struct {
	value *NotificationThirdParty
	isSet bool
}

func (v NullableNotificationThirdParty) Get() *NotificationThirdParty {
	return v.value
}

func (v *NullableNotificationThirdParty) Set(val *NotificationThirdParty) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationThirdParty) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationThirdParty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationThirdParty(val *NotificationThirdParty) *NullableNotificationThirdParty {
	return &NullableNotificationThirdParty{value: val, isSet: true}
}

func (v NullableNotificationThirdParty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationThirdParty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


