/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
	"fmt"
)

// AlertSuppressionWindowState Indicates the current status of the suppression window.
type AlertSuppressionWindowState string

// List of AlertSuppressionWindowState
const (
	ALERTSUPPRESSIONWINDOWSTATE_ACTIVE AlertSuppressionWindowState = "active"
	ALERTSUPPRESSIONWINDOWSTATE_INACTIVE AlertSuppressionWindowState = "inactive"
	ALERTSUPPRESSIONWINDOWSTATE_ENDED AlertSuppressionWindowState = "ended"
)

// All allowed values of AlertSuppressionWindowState enum
var AllowedAlertSuppressionWindowStateEnumValues = []AlertSuppressionWindowState{
	"active",
	"inactive",
	"ended",
}

func (v *AlertSuppressionWindowState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertSuppressionWindowState(value)
	for _, existing := range AllowedAlertSuppressionWindowStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertSuppressionWindowState", value)
}

// NewAlertSuppressionWindowStateFromValue returns a pointer to a valid AlertSuppressionWindowState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertSuppressionWindowStateFromValue(v string) (*AlertSuppressionWindowState, error) {
	ev := AlertSuppressionWindowState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertSuppressionWindowState: valid values are %v", v, AllowedAlertSuppressionWindowStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertSuppressionWindowState) IsValid() bool {
	for _, existing := range AllowedAlertSuppressionWindowStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertSuppressionWindowState value
func (v AlertSuppressionWindowState) Ptr() *AlertSuppressionWindowState {
	return &v
}

type NullableAlertSuppressionWindowState struct {
	value *AlertSuppressionWindowState
	isSet bool
}

func (v NullableAlertSuppressionWindowState) Get() *AlertSuppressionWindowState {
	return v.value
}

func (v *NullableAlertSuppressionWindowState) Set(val *AlertSuppressionWindowState) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSuppressionWindowState) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSuppressionWindowState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSuppressionWindowState(val *AlertSuppressionWindowState) *NullableAlertSuppressionWindowState {
	return &NullableAlertSuppressionWindowState{value: val, isSet: true}
}

func (v NullableAlertSuppressionWindowState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSuppressionWindowState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

