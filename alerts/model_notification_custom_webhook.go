/*
Alerts API

You can manage the following alert functionalities on the ThousandEyes platform using the Alerts API:  * **Alerts**: Retrieve alert details. Alerts are assigned to tests through alert rules.  * **Alert Rules**: Conditions that you configure in order to highlight or be notified of events of interest in your ThousandEyes tests. When an alert ruleâ€™s conditions are met, the associated alert is triggered and the alert becomes active. It remains active until the alert is cleared. Alert rules are reusable across multiple tests..  * **Alert Suppression Windows**: Suppress alerts for tests during periods such as planned maintenance. Windows can be one-time events or recurring events to handle periodic occurrences such as monthly downtime for maintenance.  For more information about the alerts, see [Alerts](https://docs.thousandeyes.com/product-documentation/alerts). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package alerts

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the NotificationCustomWebhook type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &NotificationCustomWebhook{}

// NotificationCustomWebhook Custom webhook notification.
type NotificationCustomWebhook struct {
	// Integration ID.
	IntegrationId *string `json:"integrationId,omitempty"`
	IntegrationType *CustomWebhookIntegrationType `json:"integrationType,omitempty"`
	// User-configured name of the integration.
	IntegrationName *string `json:"integrationName,omitempty"`
	// Webhook target URL.
	Target *string `json:"target,omitempty"`
}

// NewNotificationCustomWebhook instantiates a new NotificationCustomWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationCustomWebhook() *NotificationCustomWebhook {
	this := NotificationCustomWebhook{}
	return &this
}

// NewNotificationCustomWebhookWithDefaults instantiates a new NotificationCustomWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationCustomWebhookWithDefaults() *NotificationCustomWebhook {
	this := NotificationCustomWebhook{}
	return &this
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *NotificationCustomWebhook) GetIntegrationId() string {
	if o == nil || utils.IsNil(o.IntegrationId) {
		var ret string
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCustomWebhook) GetIntegrationIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// HasIntegrationId returns a boolean if a field has been set.
func (o *NotificationCustomWebhook) HasIntegrationId() bool {
	if o != nil && !utils.IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given string and assigns it to the IntegrationId field.
func (o *NotificationCustomWebhook) SetIntegrationId(v string) {
	o.IntegrationId = &v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *NotificationCustomWebhook) GetIntegrationType() CustomWebhookIntegrationType {
	if o == nil || utils.IsNil(o.IntegrationType) {
		var ret CustomWebhookIntegrationType
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCustomWebhook) GetIntegrationTypeOk() (*CustomWebhookIntegrationType, bool) {
	if o == nil || utils.IsNil(o.IntegrationType) {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *NotificationCustomWebhook) HasIntegrationType() bool {
	if o != nil && !utils.IsNil(o.IntegrationType) {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given CustomWebhookIntegrationType and assigns it to the IntegrationType field.
func (o *NotificationCustomWebhook) SetIntegrationType(v CustomWebhookIntegrationType) {
	o.IntegrationType = &v
}

// GetIntegrationName returns the IntegrationName field value if set, zero value otherwise.
func (o *NotificationCustomWebhook) GetIntegrationName() string {
	if o == nil || utils.IsNil(o.IntegrationName) {
		var ret string
		return ret
	}
	return *o.IntegrationName
}

// GetIntegrationNameOk returns a tuple with the IntegrationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCustomWebhook) GetIntegrationNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.IntegrationName) {
		return nil, false
	}
	return o.IntegrationName, true
}

// HasIntegrationName returns a boolean if a field has been set.
func (o *NotificationCustomWebhook) HasIntegrationName() bool {
	if o != nil && !utils.IsNil(o.IntegrationName) {
		return true
	}

	return false
}

// SetIntegrationName gets a reference to the given string and assigns it to the IntegrationName field.
func (o *NotificationCustomWebhook) SetIntegrationName(v string) {
	o.IntegrationName = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *NotificationCustomWebhook) GetTarget() string {
	if o == nil || utils.IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationCustomWebhook) GetTargetOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *NotificationCustomWebhook) HasTarget() bool {
	if o != nil && !utils.IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *NotificationCustomWebhook) SetTarget(v string) {
	o.Target = &v
}

func (o NotificationCustomWebhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationCustomWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	if !utils.IsNil(o.IntegrationType) {
		toSerialize["integrationType"] = o.IntegrationType
	}
	if !utils.IsNil(o.IntegrationName) {
		toSerialize["integrationName"] = o.IntegrationName
	}
	if !utils.IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

type NullableNotificationCustomWebhook struct {
	value *NotificationCustomWebhook
	isSet bool
}

func (v NullableNotificationCustomWebhook) Get() *NotificationCustomWebhook {
	return v.value
}

func (v *NullableNotificationCustomWebhook) Set(val *NotificationCustomWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationCustomWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationCustomWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationCustomWebhook(val *NotificationCustomWebhook) *NullableNotificationCustomWebhook {
	return &NullableNotificationCustomWebhook{value: val, isSet: true}
}

func (v NullableNotificationCustomWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationCustomWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


