/*
BGP Monitors API

 Retrieve information about BGP monitors available to your ThousandEyes account. ThousandEyes ingests BGP routing data from dozens of global BGP collectors and automatically integrates that visibility as a configurable layer under service, network, and path visualization layers.  When you specify a service URL in a test, layered BGP tests automatically track reachability and path changes for any relevant prefix. When you use an IP address as the target for a test, the ThousandEyes platform monitors the relevant internet-routed prefix. You can also create specific BGP monitoring for a prefix, and can alert on hijacks and leaks.  For more information about monitors, see [Inside-Out BGP Visibility](https://docs.thousandeyes.com/product-documentation/internet-and-wan-monitoring/tests/bgp-tests/inside-out-bgp-visibility). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bgpmonitors

import (
	"encoding/json"
	"fmt"
)

// MonitorType Type of monitor
type MonitorType string

// List of MonitorType
const (
	MONITORTYPE_PUBLIC MonitorType = "public"
	MONITORTYPE_PRIVATE MonitorType = "private"
)

// All allowed values of MonitorType enum
var AllowedMonitorTypeEnumValues = []MonitorType{
	"public",
	"private",
}

func (v *MonitorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitorType(value)
	for _, existing := range AllowedMonitorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitorType", value)
}

// NewMonitorTypeFromValue returns a pointer to a valid MonitorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitorTypeFromValue(v string) (*MonitorType, error) {
	ev := MonitorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitorType: valid values are %v", v, AllowedMonitorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitorType) IsValid() bool {
	for _, existing := range AllowedMonitorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitorType value
func (v MonitorType) Ptr() *MonitorType {
	return &v
}

type NullableMonitorType struct {
	value *MonitorType
	isSet bool
}

func (v NullableMonitorType) Get() *MonitorType {
	return v.value
}

func (v *NullableMonitorType) Set(val *MonitorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorType(val *MonitorType) *NullableMonitorType {
	return &NullableMonitorType{value: val, isSet: true}
}

func (v NullableMonitorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

