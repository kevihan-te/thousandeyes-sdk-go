/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the TestSipCredentials type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestSipCredentials{}

// TestSipCredentials struct for TestSipCredentials
type TestSipCredentials struct {
	// Username for authentication with SIP server.
	AuthUser *string `json:"authUser,omitempty"`
	// Password for Basic/NTLM authentication.
	Password *string `json:"password,omitempty"`
	// Target port.
	Port int32 `json:"port"`
	Protocol *SipTestProtocol `json:"protocol,omitempty"`
	// SIP server to be tested, specified by domain name or IP address.
	SipRegistrar *string `json:"sipRegistrar,omitempty"`
	// Username for SIP registration, should be unique within a ThousandEyes account group.
	User *string `json:"user,omitempty"`
}

type _TestSipCredentials TestSipCredentials

// NewTestSipCredentials instantiates a new TestSipCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSipCredentials(port int32) *TestSipCredentials {
	this := TestSipCredentials{}
	this.Port = port
	var protocol SipTestProtocol = SIPTESTPROTOCOL_TCP
	this.Protocol = &protocol
	return &this
}

// NewTestSipCredentialsWithDefaults instantiates a new TestSipCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSipCredentialsWithDefaults() *TestSipCredentials {
	this := TestSipCredentials{}
	var port int32 = 49153
	this.Port = port
	var protocol SipTestProtocol = SIPTESTPROTOCOL_TCP
	this.Protocol = &protocol
	return &this
}

// GetAuthUser returns the AuthUser field value if set, zero value otherwise.
func (o *TestSipCredentials) GetAuthUser() string {
	if o == nil || utils.IsNil(o.AuthUser) {
		var ret string
		return ret
	}
	return *o.AuthUser
}

// GetAuthUserOk returns a tuple with the AuthUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSipCredentials) GetAuthUserOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthUser) {
		return nil, false
	}
	return o.AuthUser, true
}

// HasAuthUser returns a boolean if a field has been set.
func (o *TestSipCredentials) HasAuthUser() bool {
	if o != nil && !utils.IsNil(o.AuthUser) {
		return true
	}

	return false
}

// SetAuthUser gets a reference to the given string and assigns it to the AuthUser field.
func (o *TestSipCredentials) SetAuthUser(v string) {
	o.AuthUser = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *TestSipCredentials) GetPassword() string {
	if o == nil || utils.IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSipCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *TestSipCredentials) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *TestSipCredentials) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value
func (o *TestSipCredentials) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *TestSipCredentials) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *TestSipCredentials) SetPort(v int32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *TestSipCredentials) GetProtocol() SipTestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret SipTestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSipCredentials) GetProtocolOk() (*SipTestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *TestSipCredentials) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given SipTestProtocol and assigns it to the Protocol field.
func (o *TestSipCredentials) SetProtocol(v SipTestProtocol) {
	o.Protocol = &v
}

// GetSipRegistrar returns the SipRegistrar field value if set, zero value otherwise.
func (o *TestSipCredentials) GetSipRegistrar() string {
	if o == nil || utils.IsNil(o.SipRegistrar) {
		var ret string
		return ret
	}
	return *o.SipRegistrar
}

// GetSipRegistrarOk returns a tuple with the SipRegistrar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSipCredentials) GetSipRegistrarOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SipRegistrar) {
		return nil, false
	}
	return o.SipRegistrar, true
}

// HasSipRegistrar returns a boolean if a field has been set.
func (o *TestSipCredentials) HasSipRegistrar() bool {
	if o != nil && !utils.IsNil(o.SipRegistrar) {
		return true
	}

	return false
}

// SetSipRegistrar gets a reference to the given string and assigns it to the SipRegistrar field.
func (o *TestSipCredentials) SetSipRegistrar(v string) {
	o.SipRegistrar = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *TestSipCredentials) GetUser() string {
	if o == nil || utils.IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSipCredentials) GetUserOk() (*string, bool) {
	if o == nil || utils.IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *TestSipCredentials) HasUser() bool {
	if o != nil && !utils.IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *TestSipCredentials) SetUser(v string) {
	o.User = &v
}

func (o TestSipCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSipCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AuthUser) {
		toSerialize["authUser"] = o.AuthUser
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["port"] = o.Port
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.SipRegistrar) {
		toSerialize["sipRegistrar"] = o.SipRegistrar
	}
	if !utils.IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *TestSipCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSipCredentials := _TestSipCredentials{}

    err = json.Unmarshal(data, &varTestSipCredentials)

	if err != nil {
		return err
	}

	*o = TestSipCredentials(varTestSipCredentials)

	return err
}

type NullableTestSipCredentials struct {
	value *TestSipCredentials
	isSet bool
}

func (v NullableTestSipCredentials) Get() *TestSipCredentials {
	return v.value
}

func (v *NullableTestSipCredentials) Set(val *TestSipCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSipCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSipCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSipCredentials(val *TestSipCredentials) *NullableTestSipCredentials {
	return &NullableTestSipCredentials{value: val, isSet: true}
}

func (v NullableTestSipCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSipCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


