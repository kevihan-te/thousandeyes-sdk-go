/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
	"fmt"
)

// ApiRequestAssertionOperator If `name = status-code``, accepted values are [is, is-not]. If `name = response-body``, accepted values are [includes, not-includes]`.
type ApiRequestAssertionOperator string

// List of ApiRequestAssertionOperator
const (
	APIREQUESTASSERTIONOPERATOR_IS ApiRequestAssertionOperator = "is"
	APIREQUESTASSERTIONOPERATOR_IS_NOT ApiRequestAssertionOperator = "is-not"
	APIREQUESTASSERTIONOPERATOR_INCLUDES ApiRequestAssertionOperator = "includes"
	APIREQUESTASSERTIONOPERATOR_NOT_INCLUDES ApiRequestAssertionOperator = "not-includes"
)

// All allowed values of ApiRequestAssertionOperator enum
var AllowedApiRequestAssertionOperatorEnumValues = []ApiRequestAssertionOperator{
	"is",
	"is-not",
	"includes",
	"not-includes",
}

func (v *ApiRequestAssertionOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiRequestAssertionOperator(value)
	for _, existing := range AllowedApiRequestAssertionOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiRequestAssertionOperator", value)
}

// NewApiRequestAssertionOperatorFromValue returns a pointer to a valid ApiRequestAssertionOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiRequestAssertionOperatorFromValue(v string) (*ApiRequestAssertionOperator, error) {
	ev := ApiRequestAssertionOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiRequestAssertionOperator: valid values are %v", v, AllowedApiRequestAssertionOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiRequestAssertionOperator) IsValid() bool {
	for _, existing := range AllowedApiRequestAssertionOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiRequestAssertionOperator value
func (v ApiRequestAssertionOperator) Ptr() *ApiRequestAssertionOperator {
	return &v
}

type NullableApiRequestAssertionOperator struct {
	value *ApiRequestAssertionOperator
	isSet bool
}

func (v NullableApiRequestAssertionOperator) Get() *ApiRequestAssertionOperator {
	return v.value
}

func (v *NullableApiRequestAssertionOperator) Set(val *ApiRequestAssertionOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRequestAssertionOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRequestAssertionOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRequestAssertionOperator(val *ApiRequestAssertionOperator) *NullableApiRequestAssertionOperator {
	return &NullableApiRequestAssertionOperator{value: val, isSet: true}
}

func (v NullableApiRequestAssertionOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRequestAssertionOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

