/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
	"fmt"
)

// ApiRequestAssertionName Set to `status-code` to assert the response status code. Set to `response-body` to assert data is present in the response body. Use `ApiRequestAssertion` to set the value for the assertion.
type ApiRequestAssertionName string

// List of ApiRequestAssertionName
const (
	APIREQUESTASSERTIONNAME_STATUS_CODE ApiRequestAssertionName = "status-code"
	APIREQUESTASSERTIONNAME_RESPONSE_BODY ApiRequestAssertionName = "response-body"
)

// All allowed values of ApiRequestAssertionName enum
var AllowedApiRequestAssertionNameEnumValues = []ApiRequestAssertionName{
	"status-code",
	"response-body",
}

func (v *ApiRequestAssertionName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiRequestAssertionName(value)
	for _, existing := range AllowedApiRequestAssertionNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiRequestAssertionName", value)
}

// NewApiRequestAssertionNameFromValue returns a pointer to a valid ApiRequestAssertionName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiRequestAssertionNameFromValue(v string) (*ApiRequestAssertionName, error) {
	ev := ApiRequestAssertionName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiRequestAssertionName: valid values are %v", v, AllowedApiRequestAssertionNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiRequestAssertionName) IsValid() bool {
	for _, existing := range AllowedApiRequestAssertionNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiRequestAssertionName value
func (v ApiRequestAssertionName) Ptr() *ApiRequestAssertionName {
	return &v
}

type NullableApiRequestAssertionName struct {
	value *ApiRequestAssertionName
	isSet bool
}

func (v NullableApiRequestAssertionName) Get() *ApiRequestAssertionName {
	return v.value
}

func (v *NullableApiRequestAssertionName) Set(val *ApiRequestAssertionName) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRequestAssertionName) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRequestAssertionName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRequestAssertionName(val *ApiRequestAssertionName) *NullableApiRequestAssertionName {
	return &NullableApiRequestAssertionName{value: val, isSet: true}
}

func (v NullableApiRequestAssertionName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRequestAssertionName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

