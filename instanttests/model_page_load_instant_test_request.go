/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
	"fmt"
)

// checks if the PageLoadInstantTestRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &PageLoadInstantTestRequest{}

// PageLoadInstantTestRequest struct for PageLoadInstantTestRequest
type PageLoadInstantTestRequest struct {
	// User that created the test.
	CreatedBy *string `json:"createdBy,omitempty"`
	// UTC created date (ISO date-time format).
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// A description of the test.
	Description *string `json:"description,omitempty"`
	// Indicates if the test is shared with the account group.
	LiveShare *bool `json:"liveShare,omitempty"`
	// User that modified the test.
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// UTC last modification date (ISO date-time format).
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// Indicates if the test is a saved event.
	SavedEvent *bool `json:"savedEvent,omitempty"`
	// Each test is assigned an unique ID; this is used to access test information and results from other endpoints.
	TestId *string `json:"testId,omitempty"`
	// The name of the test. Test name must be unique.
	TestName *string `json:"testName,omitempty"`
	Type *string `json:"type,omitempty"`
	Links *TestLinks `json:"_links,omitempty"`
	// A list of test label identifiers (get `labelId` from `/labels` endpoint).
	Labels []string `json:"labels,omitempty"`
	// A list of account group identifiers that the test is shared with (get `aid` from `/account-groups` endpoint).
	SharedWithAccounts []string `json:"sharedWithAccounts,omitempty"`
	AuthType *TestAuthType `json:"authType,omitempty"`
	AgentInterfaces *AgentInterfaces `json:"agentInterfaces,omitempty"`
	// Set to `true` to enable bandwidth measurements, only applies to Enterprise agents assigned to the test.
	BandwidthMeasurements *bool `json:"bandwidthMeasurements,omitempty"`
	// String representation (containing newline characters) of client certificate, the private key must be placed first, then the certificate.
	ClientCertificate *string `json:"clientCertificate,omitempty"`
	// Content regex, this field does not require escaping.
	ContentRegex *string `json:"contentRegex,omitempty"`
	CustomHeaders *TestCustomHeaders `json:"customHeaders,omitempty"`
	// Specify the HTTP status code value that indicates a successful response. The default value accepts any 2xx or 3xx status code.
	DesiredStatusCode *string `json:"desiredStatusCode,omitempty"`
	// Specifies maximum number of bytes to download from the target object.
	DownloadLimit *int32 `json:"downloadLimit,omitempty"`
	// IP address to use for DNS override.
	DnsOverride *string `json:"dnsOverride,omitempty"`
	// Target time for HTTP server completion, specified in milliseconds.
	HttpTargetTime *int32 `json:"httpTargetTime,omitempty"`
	// HTTP time limit in seconds.
	HttpTimeLimit *int32 `json:"httpTimeLimit,omitempty"`
	// HTTP protocol version. Set to '2' to prefer HTTP/2, or '1' to use only HTTP/1.1.
	HttpVersion *int32 `json:"httpVersion,omitempty"`
	// Set to `true` to capture response headers for objects loaded by the test.
	IncludeHeaders *bool `json:"includeHeaders,omitempty"`
	// Set `true` to measure MTU sizes on network from agents to the target.
	MtuMeasurements *bool `json:"mtuMeasurements,omitempty"`
	// Enable or disable network measurements. Set to true to enable or false to disable network measurements.
	NetworkMeasurements *bool `json:"networkMeasurements,omitempty"`
	// Number of path traces executed by the agent.
	NumPathTraces *int32 `json:"numPathTraces,omitempty"`
	OAuth *OAuth `json:"oAuth,omitempty"`
	// Password for Basic/NTLM authentication.
	Password *string `json:"password,omitempty"`
	PathTraceMode *TestPathTraceMode `json:"pathTraceMode,omitempty"`
	ProbeMode *TestProbeMode `json:"probeMode,omitempty"`
	Protocol *TestProtocol `json:"protocol,omitempty"`
	// Reflects the verbose SSL protocol version used by a test.
	SslVersion *string `json:"sslVersion,omitempty"`
	SslVersionId *TestSslVersionId `json:"sslVersionId,omitempty"`
	// Target for the test.
	Url string `json:"url"`
	// Set to true to use NTLM, false to use Basic Authentication. Requires username and password to be set.
	UseNtlm *bool `json:"useNtlm,omitempty"`
	// User-agent string to be provided during the test.
	UserAgent *string `json:"userAgent,omitempty"`
	// Username for Basic/NTLM authentication.
	Username *string `json:"username,omitempty"`
	// Ignore or acknowledge certificate errors. Set to false to ignore certificate errors.
	VerifyCertificate *bool `json:"verifyCertificate,omitempty"`
	// Allows TLS renegotiation with servers not supporting RFC 5746. Default Set to true to allow unsafe legacy renegotiation.
	AllowUnsafeLegacyRenegotiation *bool `json:"allowUnsafeLegacyRenegotiation,omitempty"`
	// To disable following HTTP/301 or HTTP/302 redirect directives, set this parameter to `false`.
	FollowRedirects *bool `json:"followRedirects,omitempty"`
	// Sets packets rate sent to measure the network in packets per second.
	FixedPacketRate *int32 `json:"fixedPacketRate,omitempty"`
	// Flag indicating if a proxy other than the default should be used. To override the default proxy for agents, set to `true` and specify a value for `overrideProxyId`.
	OverrideAgentProxy *bool `json:"overrideAgentProxy,omitempty"`
	// ID of the proxy to be used if the default proxy is overridden.
	OverrideProxyId *string `json:"overrideProxyId,omitempty"`
	// Indicates whether network data to the proxy should be collected.
	CollectProxyNetworkData *bool `json:"collectProxyNetworkData,omitempty"`
	// ID of the emulated device, if one was given when the test was created.
	EmulatedDeviceId *string `json:"emulatedDeviceId,omitempty"`
	// Target time for page load completion, specified in seconds and cannot exceed the `pageLoadTimeLimit`.
	PageLoadTargetTime *int32 `json:"pageLoadTargetTime,omitempty"`
	// Page load time limit. Must be larger than the `httpTimeLimit`.
	PageLoadTimeLimit *int32 `json:"pageLoadTimeLimit,omitempty"`
	// Domains or full object URLs to be excluded from metrics and waterfall data for transaction tests.
	BlockDomains *string `json:"blockDomains,omitempty"`
	// Enables or disables screenshots on error. Set true to not capture
	DisableScreenshot *bool `json:"disableScreenshot,omitempty"`
	// Set true allow the use of a fake mic and camera in the browser.
	AllowMicAndCamera *bool `json:"allowMicAndCamera,omitempty"`
	// Set true to use the agentâ€™s geolocation by the web page.
	AllowGeolocation *bool `json:"allowGeolocation,omitempty"`
	// Set one of the available browser language that you want to use to configure the browser.
	BrowserLanguage *string `json:"browserLanguage,omitempty"`
	PageLoadingStrategy *TestPageLoadingStrategy `json:"pageLoadingStrategy,omitempty"`
	// Indicates whether agents should randomize the start time in each test round.
	RandomizedStartTime *bool `json:"randomizedStartTime,omitempty"`
	// A list of objects with `agentId` (required) and `sourceIpAddress` (optional).
	Agents []TestAgent `json:"agents"`
}

type _PageLoadInstantTestRequest PageLoadInstantTestRequest

// NewPageLoadInstantTestRequest instantiates a new PageLoadInstantTestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageLoadInstantTestRequest(url string, agents []TestAgent) *PageLoadInstantTestRequest {
	this := PageLoadInstantTestRequest{}
	var authType TestAuthType = TESTAUTHTYPE_NONE
	this.AuthType = &authType
	var desiredStatusCode string = "default"
	this.DesiredStatusCode = &desiredStatusCode
	var httpTimeLimit int32 = 5
	this.HttpTimeLimit = &httpTimeLimit
	var httpVersion int32 = 2
	this.HttpVersion = &httpVersion
	var includeHeaders bool = true
	this.IncludeHeaders = &includeHeaders
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var protocol TestProtocol = TESTPROTOCOL_TCP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	this.Url = url
	var verifyCertificate bool = false
	this.VerifyCertificate = &verifyCertificate
	var allowUnsafeLegacyRenegotiation bool = true
	this.AllowUnsafeLegacyRenegotiation = &allowUnsafeLegacyRenegotiation
	var followRedirects bool = true
	this.FollowRedirects = &followRedirects
	var overrideAgentProxy bool = false
	this.OverrideAgentProxy = &overrideAgentProxy
	var collectProxyNetworkData bool = false
	this.CollectProxyNetworkData = &collectProxyNetworkData
	var pageLoadTimeLimit int32 = 10
	this.PageLoadTimeLimit = &pageLoadTimeLimit
	var disableScreenshot bool = false
	this.DisableScreenshot = &disableScreenshot
	var allowMicAndCamera bool = false
	this.AllowMicAndCamera = &allowMicAndCamera
	var allowGeolocation bool = false
	this.AllowGeolocation = &allowGeolocation
	var pageLoadingStrategy TestPageLoadingStrategy = TESTPAGELOADINGSTRATEGY_NORMAL
	this.PageLoadingStrategy = &pageLoadingStrategy
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	this.Agents = agents
	return &this
}

// NewPageLoadInstantTestRequestWithDefaults instantiates a new PageLoadInstantTestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageLoadInstantTestRequestWithDefaults() *PageLoadInstantTestRequest {
	this := PageLoadInstantTestRequest{}
	var authType TestAuthType = TESTAUTHTYPE_NONE
	this.AuthType = &authType
	var desiredStatusCode string = "default"
	this.DesiredStatusCode = &desiredStatusCode
	var httpTimeLimit int32 = 5
	this.HttpTimeLimit = &httpTimeLimit
	var httpVersion int32 = 2
	this.HttpVersion = &httpVersion
	var includeHeaders bool = true
	this.IncludeHeaders = &includeHeaders
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var protocol TestProtocol = TESTPROTOCOL_TCP
	this.Protocol = &protocol
	var sslVersionId TestSslVersionId = TESTSSLVERSIONID__0
	this.SslVersionId = &sslVersionId
	var verifyCertificate bool = false
	this.VerifyCertificate = &verifyCertificate
	var allowUnsafeLegacyRenegotiation bool = true
	this.AllowUnsafeLegacyRenegotiation = &allowUnsafeLegacyRenegotiation
	var followRedirects bool = true
	this.FollowRedirects = &followRedirects
	var overrideAgentProxy bool = false
	this.OverrideAgentProxy = &overrideAgentProxy
	var collectProxyNetworkData bool = false
	this.CollectProxyNetworkData = &collectProxyNetworkData
	var pageLoadTimeLimit int32 = 10
	this.PageLoadTimeLimit = &pageLoadTimeLimit
	var disableScreenshot bool = false
	this.DisableScreenshot = &disableScreenshot
	var allowMicAndCamera bool = false
	this.AllowMicAndCamera = &allowMicAndCamera
	var allowGeolocation bool = false
	this.AllowGeolocation = &allowGeolocation
	var pageLoadingStrategy TestPageLoadingStrategy = TESTPAGELOADINGSTRATEGY_NORMAL
	this.PageLoadingStrategy = &pageLoadingStrategy
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetCreatedBy() string {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetCreatedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *PageLoadInstantTestRequest) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetCreatedDate() time.Time {
	if o == nil || utils.IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasCreatedDate() bool {
	if o != nil && !utils.IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *PageLoadInstantTestRequest) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PageLoadInstantTestRequest) SetDescription(v string) {
	o.Description = &v
}

// GetLiveShare returns the LiveShare field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetLiveShare() bool {
	if o == nil || utils.IsNil(o.LiveShare) {
		var ret bool
		return ret
	}
	return *o.LiveShare
}

// GetLiveShareOk returns a tuple with the LiveShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetLiveShareOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.LiveShare) {
		return nil, false
	}
	return o.LiveShare, true
}

// HasLiveShare returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasLiveShare() bool {
	if o != nil && !utils.IsNil(o.LiveShare) {
		return true
	}

	return false
}

// SetLiveShare gets a reference to the given bool and assigns it to the LiveShare field.
func (o *PageLoadInstantTestRequest) SetLiveShare(v bool) {
	o.LiveShare = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetModifiedBy() string {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetModifiedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasModifiedBy() bool {
	if o != nil && !utils.IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *PageLoadInstantTestRequest) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetModifiedDate() time.Time {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasModifiedDate() bool {
	if o != nil && !utils.IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *PageLoadInstantTestRequest) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetSavedEvent returns the SavedEvent field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetSavedEvent() bool {
	if o == nil || utils.IsNil(o.SavedEvent) {
		var ret bool
		return ret
	}
	return *o.SavedEvent
}

// GetSavedEventOk returns a tuple with the SavedEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetSavedEventOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.SavedEvent) {
		return nil, false
	}
	return o.SavedEvent, true
}

// HasSavedEvent returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasSavedEvent() bool {
	if o != nil && !utils.IsNil(o.SavedEvent) {
		return true
	}

	return false
}

// SetSavedEvent gets a reference to the given bool and assigns it to the SavedEvent field.
func (o *PageLoadInstantTestRequest) SetSavedEvent(v bool) {
	o.SavedEvent = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *PageLoadInstantTestRequest) SetTestId(v string) {
	o.TestId = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *PageLoadInstantTestRequest) SetTestName(v string) {
	o.TestName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PageLoadInstantTestRequest) SetType(v string) {
	o.Type = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetLinks() TestLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetLinksOk() (*TestLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestLinks and assigns it to the Links field.
func (o *PageLoadInstantTestRequest) SetLinks(v TestLinks) {
	o.Links = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetLabels() []string {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetLabelsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *PageLoadInstantTestRequest) SetLabels(v []string) {
	o.Labels = v
}

// GetSharedWithAccounts returns the SharedWithAccounts field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetSharedWithAccounts() []string {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		var ret []string
		return ret
	}
	return o.SharedWithAccounts
}

// GetSharedWithAccountsOk returns a tuple with the SharedWithAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetSharedWithAccountsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		return nil, false
	}
	return o.SharedWithAccounts, true
}

// HasSharedWithAccounts returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasSharedWithAccounts() bool {
	if o != nil && !utils.IsNil(o.SharedWithAccounts) {
		return true
	}

	return false
}

// SetSharedWithAccounts gets a reference to the given []string and assigns it to the SharedWithAccounts field.
func (o *PageLoadInstantTestRequest) SetSharedWithAccounts(v []string) {
	o.SharedWithAccounts = v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetAuthType() TestAuthType {
	if o == nil || utils.IsNil(o.AuthType) {
		var ret TestAuthType
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetAuthTypeOk() (*TestAuthType, bool) {
	if o == nil || utils.IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasAuthType() bool {
	if o != nil && !utils.IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given TestAuthType and assigns it to the AuthType field.
func (o *PageLoadInstantTestRequest) SetAuthType(v TestAuthType) {
	o.AuthType = &v
}

// GetAgentInterfaces returns the AgentInterfaces field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetAgentInterfaces() AgentInterfaces {
	if o == nil || utils.IsNil(o.AgentInterfaces) {
		var ret AgentInterfaces
		return ret
	}
	return *o.AgentInterfaces
}

// GetAgentInterfacesOk returns a tuple with the AgentInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetAgentInterfacesOk() (*AgentInterfaces, bool) {
	if o == nil || utils.IsNil(o.AgentInterfaces) {
		return nil, false
	}
	return o.AgentInterfaces, true
}

// HasAgentInterfaces returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasAgentInterfaces() bool {
	if o != nil && !utils.IsNil(o.AgentInterfaces) {
		return true
	}

	return false
}

// SetAgentInterfaces gets a reference to the given AgentInterfaces and assigns it to the AgentInterfaces field.
func (o *PageLoadInstantTestRequest) SetAgentInterfaces(v AgentInterfaces) {
	o.AgentInterfaces = &v
}

// GetBandwidthMeasurements returns the BandwidthMeasurements field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetBandwidthMeasurements() bool {
	if o == nil || utils.IsNil(o.BandwidthMeasurements) {
		var ret bool
		return ret
	}
	return *o.BandwidthMeasurements
}

// GetBandwidthMeasurementsOk returns a tuple with the BandwidthMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetBandwidthMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.BandwidthMeasurements) {
		return nil, false
	}
	return o.BandwidthMeasurements, true
}

// HasBandwidthMeasurements returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasBandwidthMeasurements() bool {
	if o != nil && !utils.IsNil(o.BandwidthMeasurements) {
		return true
	}

	return false
}

// SetBandwidthMeasurements gets a reference to the given bool and assigns it to the BandwidthMeasurements field.
func (o *PageLoadInstantTestRequest) SetBandwidthMeasurements(v bool) {
	o.BandwidthMeasurements = &v
}

// GetClientCertificate returns the ClientCertificate field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetClientCertificate() string {
	if o == nil || utils.IsNil(o.ClientCertificate) {
		var ret string
		return ret
	}
	return *o.ClientCertificate
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetClientCertificateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ClientCertificate) {
		return nil, false
	}
	return o.ClientCertificate, true
}

// HasClientCertificate returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasClientCertificate() bool {
	if o != nil && !utils.IsNil(o.ClientCertificate) {
		return true
	}

	return false
}

// SetClientCertificate gets a reference to the given string and assigns it to the ClientCertificate field.
func (o *PageLoadInstantTestRequest) SetClientCertificate(v string) {
	o.ClientCertificate = &v
}

// GetContentRegex returns the ContentRegex field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetContentRegex() string {
	if o == nil || utils.IsNil(o.ContentRegex) {
		var ret string
		return ret
	}
	return *o.ContentRegex
}

// GetContentRegexOk returns a tuple with the ContentRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetContentRegexOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ContentRegex) {
		return nil, false
	}
	return o.ContentRegex, true
}

// HasContentRegex returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasContentRegex() bool {
	if o != nil && !utils.IsNil(o.ContentRegex) {
		return true
	}

	return false
}

// SetContentRegex gets a reference to the given string and assigns it to the ContentRegex field.
func (o *PageLoadInstantTestRequest) SetContentRegex(v string) {
	o.ContentRegex = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetCustomHeaders() TestCustomHeaders {
	if o == nil || utils.IsNil(o.CustomHeaders) {
		var ret TestCustomHeaders
		return ret
	}
	return *o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetCustomHeadersOk() (*TestCustomHeaders, bool) {
	if o == nil || utils.IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasCustomHeaders() bool {
	if o != nil && !utils.IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given TestCustomHeaders and assigns it to the CustomHeaders field.
func (o *PageLoadInstantTestRequest) SetCustomHeaders(v TestCustomHeaders) {
	o.CustomHeaders = &v
}

// GetDesiredStatusCode returns the DesiredStatusCode field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetDesiredStatusCode() string {
	if o == nil || utils.IsNil(o.DesiredStatusCode) {
		var ret string
		return ret
	}
	return *o.DesiredStatusCode
}

// GetDesiredStatusCodeOk returns a tuple with the DesiredStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetDesiredStatusCodeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DesiredStatusCode) {
		return nil, false
	}
	return o.DesiredStatusCode, true
}

// HasDesiredStatusCode returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasDesiredStatusCode() bool {
	if o != nil && !utils.IsNil(o.DesiredStatusCode) {
		return true
	}

	return false
}

// SetDesiredStatusCode gets a reference to the given string and assigns it to the DesiredStatusCode field.
func (o *PageLoadInstantTestRequest) SetDesiredStatusCode(v string) {
	o.DesiredStatusCode = &v
}

// GetDownloadLimit returns the DownloadLimit field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetDownloadLimit() int32 {
	if o == nil || utils.IsNil(o.DownloadLimit) {
		var ret int32
		return ret
	}
	return *o.DownloadLimit
}

// GetDownloadLimitOk returns a tuple with the DownloadLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetDownloadLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.DownloadLimit) {
		return nil, false
	}
	return o.DownloadLimit, true
}

// HasDownloadLimit returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasDownloadLimit() bool {
	if o != nil && !utils.IsNil(o.DownloadLimit) {
		return true
	}

	return false
}

// SetDownloadLimit gets a reference to the given int32 and assigns it to the DownloadLimit field.
func (o *PageLoadInstantTestRequest) SetDownloadLimit(v int32) {
	o.DownloadLimit = &v
}

// GetDnsOverride returns the DnsOverride field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetDnsOverride() string {
	if o == nil || utils.IsNil(o.DnsOverride) {
		var ret string
		return ret
	}
	return *o.DnsOverride
}

// GetDnsOverrideOk returns a tuple with the DnsOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetDnsOverrideOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DnsOverride) {
		return nil, false
	}
	return o.DnsOverride, true
}

// HasDnsOverride returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasDnsOverride() bool {
	if o != nil && !utils.IsNil(o.DnsOverride) {
		return true
	}

	return false
}

// SetDnsOverride gets a reference to the given string and assigns it to the DnsOverride field.
func (o *PageLoadInstantTestRequest) SetDnsOverride(v string) {
	o.DnsOverride = &v
}

// GetHttpTargetTime returns the HttpTargetTime field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetHttpTargetTime() int32 {
	if o == nil || utils.IsNil(o.HttpTargetTime) {
		var ret int32
		return ret
	}
	return *o.HttpTargetTime
}

// GetHttpTargetTimeOk returns a tuple with the HttpTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetHttpTargetTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTargetTime) {
		return nil, false
	}
	return o.HttpTargetTime, true
}

// HasHttpTargetTime returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasHttpTargetTime() bool {
	if o != nil && !utils.IsNil(o.HttpTargetTime) {
		return true
	}

	return false
}

// SetHttpTargetTime gets a reference to the given int32 and assigns it to the HttpTargetTime field.
func (o *PageLoadInstantTestRequest) SetHttpTargetTime(v int32) {
	o.HttpTargetTime = &v
}

// GetHttpTimeLimit returns the HttpTimeLimit field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetHttpTimeLimit() int32 {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		var ret int32
		return ret
	}
	return *o.HttpTimeLimit
}

// GetHttpTimeLimitOk returns a tuple with the HttpTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetHttpTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpTimeLimit) {
		return nil, false
	}
	return o.HttpTimeLimit, true
}

// HasHttpTimeLimit returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasHttpTimeLimit() bool {
	if o != nil && !utils.IsNil(o.HttpTimeLimit) {
		return true
	}

	return false
}

// SetHttpTimeLimit gets a reference to the given int32 and assigns it to the HttpTimeLimit field.
func (o *PageLoadInstantTestRequest) SetHttpTimeLimit(v int32) {
	o.HttpTimeLimit = &v
}

// GetHttpVersion returns the HttpVersion field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetHttpVersion() int32 {
	if o == nil || utils.IsNil(o.HttpVersion) {
		var ret int32
		return ret
	}
	return *o.HttpVersion
}

// GetHttpVersionOk returns a tuple with the HttpVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetHttpVersionOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.HttpVersion) {
		return nil, false
	}
	return o.HttpVersion, true
}

// HasHttpVersion returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasHttpVersion() bool {
	if o != nil && !utils.IsNil(o.HttpVersion) {
		return true
	}

	return false
}

// SetHttpVersion gets a reference to the given int32 and assigns it to the HttpVersion field.
func (o *PageLoadInstantTestRequest) SetHttpVersion(v int32) {
	o.HttpVersion = &v
}

// GetIncludeHeaders returns the IncludeHeaders field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetIncludeHeaders() bool {
	if o == nil || utils.IsNil(o.IncludeHeaders) {
		var ret bool
		return ret
	}
	return *o.IncludeHeaders
}

// GetIncludeHeadersOk returns a tuple with the IncludeHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetIncludeHeadersOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IncludeHeaders) {
		return nil, false
	}
	return o.IncludeHeaders, true
}

// HasIncludeHeaders returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasIncludeHeaders() bool {
	if o != nil && !utils.IsNil(o.IncludeHeaders) {
		return true
	}

	return false
}

// SetIncludeHeaders gets a reference to the given bool and assigns it to the IncludeHeaders field.
func (o *PageLoadInstantTestRequest) SetIncludeHeaders(v bool) {
	o.IncludeHeaders = &v
}

// GetMtuMeasurements returns the MtuMeasurements field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetMtuMeasurements() bool {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		var ret bool
		return ret
	}
	return *o.MtuMeasurements
}

// GetMtuMeasurementsOk returns a tuple with the MtuMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetMtuMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		return nil, false
	}
	return o.MtuMeasurements, true
}

// HasMtuMeasurements returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasMtuMeasurements() bool {
	if o != nil && !utils.IsNil(o.MtuMeasurements) {
		return true
	}

	return false
}

// SetMtuMeasurements gets a reference to the given bool and assigns it to the MtuMeasurements field.
func (o *PageLoadInstantTestRequest) SetMtuMeasurements(v bool) {
	o.MtuMeasurements = &v
}

// GetNetworkMeasurements returns the NetworkMeasurements field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetNetworkMeasurements() bool {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		var ret bool
		return ret
	}
	return *o.NetworkMeasurements
}

// GetNetworkMeasurementsOk returns a tuple with the NetworkMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetNetworkMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		return nil, false
	}
	return o.NetworkMeasurements, true
}

// HasNetworkMeasurements returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasNetworkMeasurements() bool {
	if o != nil && !utils.IsNil(o.NetworkMeasurements) {
		return true
	}

	return false
}

// SetNetworkMeasurements gets a reference to the given bool and assigns it to the NetworkMeasurements field.
func (o *PageLoadInstantTestRequest) SetNetworkMeasurements(v bool) {
	o.NetworkMeasurements = &v
}

// GetNumPathTraces returns the NumPathTraces field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetNumPathTraces() int32 {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		var ret int32
		return ret
	}
	return *o.NumPathTraces
}

// GetNumPathTracesOk returns a tuple with the NumPathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetNumPathTracesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		return nil, false
	}
	return o.NumPathTraces, true
}

// HasNumPathTraces returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasNumPathTraces() bool {
	if o != nil && !utils.IsNil(o.NumPathTraces) {
		return true
	}

	return false
}

// SetNumPathTraces gets a reference to the given int32 and assigns it to the NumPathTraces field.
func (o *PageLoadInstantTestRequest) SetNumPathTraces(v int32) {
	o.NumPathTraces = &v
}

// GetOAuth returns the OAuth field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetOAuth() OAuth {
	if o == nil || utils.IsNil(o.OAuth) {
		var ret OAuth
		return ret
	}
	return *o.OAuth
}

// GetOAuthOk returns a tuple with the OAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetOAuthOk() (*OAuth, bool) {
	if o == nil || utils.IsNil(o.OAuth) {
		return nil, false
	}
	return o.OAuth, true
}

// HasOAuth returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasOAuth() bool {
	if o != nil && !utils.IsNil(o.OAuth) {
		return true
	}

	return false
}

// SetOAuth gets a reference to the given OAuth and assigns it to the OAuth field.
func (o *PageLoadInstantTestRequest) SetOAuth(v OAuth) {
	o.OAuth = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetPassword() string {
	if o == nil || utils.IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PageLoadInstantTestRequest) SetPassword(v string) {
	o.Password = &v
}

// GetPathTraceMode returns the PathTraceMode field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetPathTraceMode() TestPathTraceMode {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		var ret TestPathTraceMode
		return ret
	}
	return *o.PathTraceMode
}

// GetPathTraceModeOk returns a tuple with the PathTraceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetPathTraceModeOk() (*TestPathTraceMode, bool) {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		return nil, false
	}
	return o.PathTraceMode, true
}

// HasPathTraceMode returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasPathTraceMode() bool {
	if o != nil && !utils.IsNil(o.PathTraceMode) {
		return true
	}

	return false
}

// SetPathTraceMode gets a reference to the given TestPathTraceMode and assigns it to the PathTraceMode field.
func (o *PageLoadInstantTestRequest) SetPathTraceMode(v TestPathTraceMode) {
	o.PathTraceMode = &v
}

// GetProbeMode returns the ProbeMode field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetProbeMode() TestProbeMode {
	if o == nil || utils.IsNil(o.ProbeMode) {
		var ret TestProbeMode
		return ret
	}
	return *o.ProbeMode
}

// GetProbeModeOk returns a tuple with the ProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetProbeModeOk() (*TestProbeMode, bool) {
	if o == nil || utils.IsNil(o.ProbeMode) {
		return nil, false
	}
	return o.ProbeMode, true
}

// HasProbeMode returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasProbeMode() bool {
	if o != nil && !utils.IsNil(o.ProbeMode) {
		return true
	}

	return false
}

// SetProbeMode gets a reference to the given TestProbeMode and assigns it to the ProbeMode field.
func (o *PageLoadInstantTestRequest) SetProbeMode(v TestProbeMode) {
	o.ProbeMode = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetProtocol() TestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret TestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetProtocolOk() (*TestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given TestProtocol and assigns it to the Protocol field.
func (o *PageLoadInstantTestRequest) SetProtocol(v TestProtocol) {
	o.Protocol = &v
}

// GetSslVersion returns the SslVersion field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetSslVersion() string {
	if o == nil || utils.IsNil(o.SslVersion) {
		var ret string
		return ret
	}
	return *o.SslVersion
}

// GetSslVersionOk returns a tuple with the SslVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetSslVersionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SslVersion) {
		return nil, false
	}
	return o.SslVersion, true
}

// HasSslVersion returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasSslVersion() bool {
	if o != nil && !utils.IsNil(o.SslVersion) {
		return true
	}

	return false
}

// SetSslVersion gets a reference to the given string and assigns it to the SslVersion field.
func (o *PageLoadInstantTestRequest) SetSslVersion(v string) {
	o.SslVersion = &v
}

// GetSslVersionId returns the SslVersionId field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetSslVersionId() TestSslVersionId {
	if o == nil || utils.IsNil(o.SslVersionId) {
		var ret TestSslVersionId
		return ret
	}
	return *o.SslVersionId
}

// GetSslVersionIdOk returns a tuple with the SslVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetSslVersionIdOk() (*TestSslVersionId, bool) {
	if o == nil || utils.IsNil(o.SslVersionId) {
		return nil, false
	}
	return o.SslVersionId, true
}

// HasSslVersionId returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasSslVersionId() bool {
	if o != nil && !utils.IsNil(o.SslVersionId) {
		return true
	}

	return false
}

// SetSslVersionId gets a reference to the given TestSslVersionId and assigns it to the SslVersionId field.
func (o *PageLoadInstantTestRequest) SetSslVersionId(v TestSslVersionId) {
	o.SslVersionId = &v
}

// GetUrl returns the Url field value
func (o *PageLoadInstantTestRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PageLoadInstantTestRequest) SetUrl(v string) {
	o.Url = v
}

// GetUseNtlm returns the UseNtlm field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetUseNtlm() bool {
	if o == nil || utils.IsNil(o.UseNtlm) {
		var ret bool
		return ret
	}
	return *o.UseNtlm
}

// GetUseNtlmOk returns a tuple with the UseNtlm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetUseNtlmOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.UseNtlm) {
		return nil, false
	}
	return o.UseNtlm, true
}

// HasUseNtlm returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasUseNtlm() bool {
	if o != nil && !utils.IsNil(o.UseNtlm) {
		return true
	}

	return false
}

// SetUseNtlm gets a reference to the given bool and assigns it to the UseNtlm field.
func (o *PageLoadInstantTestRequest) SetUseNtlm(v bool) {
	o.UseNtlm = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetUserAgent() string {
	if o == nil || utils.IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetUserAgentOk() (*string, bool) {
	if o == nil || utils.IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasUserAgent() bool {
	if o != nil && !utils.IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *PageLoadInstantTestRequest) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetUsername() string {
	if o == nil || utils.IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetUsernameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasUsername() bool {
	if o != nil && !utils.IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *PageLoadInstantTestRequest) SetUsername(v string) {
	o.Username = &v
}

// GetVerifyCertificate returns the VerifyCertificate field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetVerifyCertificate() bool {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		var ret bool
		return ret
	}
	return *o.VerifyCertificate
}

// GetVerifyCertificateOk returns a tuple with the VerifyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetVerifyCertificateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.VerifyCertificate) {
		return nil, false
	}
	return o.VerifyCertificate, true
}

// HasVerifyCertificate returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasVerifyCertificate() bool {
	if o != nil && !utils.IsNil(o.VerifyCertificate) {
		return true
	}

	return false
}

// SetVerifyCertificate gets a reference to the given bool and assigns it to the VerifyCertificate field.
func (o *PageLoadInstantTestRequest) SetVerifyCertificate(v bool) {
	o.VerifyCertificate = &v
}

// GetAllowUnsafeLegacyRenegotiation returns the AllowUnsafeLegacyRenegotiation field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetAllowUnsafeLegacyRenegotiation() bool {
	if o == nil || utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		var ret bool
		return ret
	}
	return *o.AllowUnsafeLegacyRenegotiation
}

// GetAllowUnsafeLegacyRenegotiationOk returns a tuple with the AllowUnsafeLegacyRenegotiation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetAllowUnsafeLegacyRenegotiationOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		return nil, false
	}
	return o.AllowUnsafeLegacyRenegotiation, true
}

// HasAllowUnsafeLegacyRenegotiation returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasAllowUnsafeLegacyRenegotiation() bool {
	if o != nil && !utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		return true
	}

	return false
}

// SetAllowUnsafeLegacyRenegotiation gets a reference to the given bool and assigns it to the AllowUnsafeLegacyRenegotiation field.
func (o *PageLoadInstantTestRequest) SetAllowUnsafeLegacyRenegotiation(v bool) {
	o.AllowUnsafeLegacyRenegotiation = &v
}

// GetFollowRedirects returns the FollowRedirects field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetFollowRedirects() bool {
	if o == nil || utils.IsNil(o.FollowRedirects) {
		var ret bool
		return ret
	}
	return *o.FollowRedirects
}

// GetFollowRedirectsOk returns a tuple with the FollowRedirects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetFollowRedirectsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.FollowRedirects) {
		return nil, false
	}
	return o.FollowRedirects, true
}

// HasFollowRedirects returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasFollowRedirects() bool {
	if o != nil && !utils.IsNil(o.FollowRedirects) {
		return true
	}

	return false
}

// SetFollowRedirects gets a reference to the given bool and assigns it to the FollowRedirects field.
func (o *PageLoadInstantTestRequest) SetFollowRedirects(v bool) {
	o.FollowRedirects = &v
}

// GetFixedPacketRate returns the FixedPacketRate field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetFixedPacketRate() int32 {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		var ret int32
		return ret
	}
	return *o.FixedPacketRate
}

// GetFixedPacketRateOk returns a tuple with the FixedPacketRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetFixedPacketRateOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		return nil, false
	}
	return o.FixedPacketRate, true
}

// HasFixedPacketRate returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasFixedPacketRate() bool {
	if o != nil && !utils.IsNil(o.FixedPacketRate) {
		return true
	}

	return false
}

// SetFixedPacketRate gets a reference to the given int32 and assigns it to the FixedPacketRate field.
func (o *PageLoadInstantTestRequest) SetFixedPacketRate(v int32) {
	o.FixedPacketRate = &v
}

// GetOverrideAgentProxy returns the OverrideAgentProxy field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetOverrideAgentProxy() bool {
	if o == nil || utils.IsNil(o.OverrideAgentProxy) {
		var ret bool
		return ret
	}
	return *o.OverrideAgentProxy
}

// GetOverrideAgentProxyOk returns a tuple with the OverrideAgentProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetOverrideAgentProxyOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.OverrideAgentProxy) {
		return nil, false
	}
	return o.OverrideAgentProxy, true
}

// HasOverrideAgentProxy returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasOverrideAgentProxy() bool {
	if o != nil && !utils.IsNil(o.OverrideAgentProxy) {
		return true
	}

	return false
}

// SetOverrideAgentProxy gets a reference to the given bool and assigns it to the OverrideAgentProxy field.
func (o *PageLoadInstantTestRequest) SetOverrideAgentProxy(v bool) {
	o.OverrideAgentProxy = &v
}

// GetOverrideProxyId returns the OverrideProxyId field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetOverrideProxyId() string {
	if o == nil || utils.IsNil(o.OverrideProxyId) {
		var ret string
		return ret
	}
	return *o.OverrideProxyId
}

// GetOverrideProxyIdOk returns a tuple with the OverrideProxyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetOverrideProxyIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OverrideProxyId) {
		return nil, false
	}
	return o.OverrideProxyId, true
}

// HasOverrideProxyId returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasOverrideProxyId() bool {
	if o != nil && !utils.IsNil(o.OverrideProxyId) {
		return true
	}

	return false
}

// SetOverrideProxyId gets a reference to the given string and assigns it to the OverrideProxyId field.
func (o *PageLoadInstantTestRequest) SetOverrideProxyId(v string) {
	o.OverrideProxyId = &v
}

// GetCollectProxyNetworkData returns the CollectProxyNetworkData field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetCollectProxyNetworkData() bool {
	if o == nil || utils.IsNil(o.CollectProxyNetworkData) {
		var ret bool
		return ret
	}
	return *o.CollectProxyNetworkData
}

// GetCollectProxyNetworkDataOk returns a tuple with the CollectProxyNetworkData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetCollectProxyNetworkDataOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.CollectProxyNetworkData) {
		return nil, false
	}
	return o.CollectProxyNetworkData, true
}

// HasCollectProxyNetworkData returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasCollectProxyNetworkData() bool {
	if o != nil && !utils.IsNil(o.CollectProxyNetworkData) {
		return true
	}

	return false
}

// SetCollectProxyNetworkData gets a reference to the given bool and assigns it to the CollectProxyNetworkData field.
func (o *PageLoadInstantTestRequest) SetCollectProxyNetworkData(v bool) {
	o.CollectProxyNetworkData = &v
}

// GetEmulatedDeviceId returns the EmulatedDeviceId field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetEmulatedDeviceId() string {
	if o == nil || utils.IsNil(o.EmulatedDeviceId) {
		var ret string
		return ret
	}
	return *o.EmulatedDeviceId
}

// GetEmulatedDeviceIdOk returns a tuple with the EmulatedDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetEmulatedDeviceIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.EmulatedDeviceId) {
		return nil, false
	}
	return o.EmulatedDeviceId, true
}

// HasEmulatedDeviceId returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasEmulatedDeviceId() bool {
	if o != nil && !utils.IsNil(o.EmulatedDeviceId) {
		return true
	}

	return false
}

// SetEmulatedDeviceId gets a reference to the given string and assigns it to the EmulatedDeviceId field.
func (o *PageLoadInstantTestRequest) SetEmulatedDeviceId(v string) {
	o.EmulatedDeviceId = &v
}

// GetPageLoadTargetTime returns the PageLoadTargetTime field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetPageLoadTargetTime() int32 {
	if o == nil || utils.IsNil(o.PageLoadTargetTime) {
		var ret int32
		return ret
	}
	return *o.PageLoadTargetTime
}

// GetPageLoadTargetTimeOk returns a tuple with the PageLoadTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetPageLoadTargetTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageLoadTargetTime) {
		return nil, false
	}
	return o.PageLoadTargetTime, true
}

// HasPageLoadTargetTime returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasPageLoadTargetTime() bool {
	if o != nil && !utils.IsNil(o.PageLoadTargetTime) {
		return true
	}

	return false
}

// SetPageLoadTargetTime gets a reference to the given int32 and assigns it to the PageLoadTargetTime field.
func (o *PageLoadInstantTestRequest) SetPageLoadTargetTime(v int32) {
	o.PageLoadTargetTime = &v
}

// GetPageLoadTimeLimit returns the PageLoadTimeLimit field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetPageLoadTimeLimit() int32 {
	if o == nil || utils.IsNil(o.PageLoadTimeLimit) {
		var ret int32
		return ret
	}
	return *o.PageLoadTimeLimit
}

// GetPageLoadTimeLimitOk returns a tuple with the PageLoadTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetPageLoadTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.PageLoadTimeLimit) {
		return nil, false
	}
	return o.PageLoadTimeLimit, true
}

// HasPageLoadTimeLimit returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasPageLoadTimeLimit() bool {
	if o != nil && !utils.IsNil(o.PageLoadTimeLimit) {
		return true
	}

	return false
}

// SetPageLoadTimeLimit gets a reference to the given int32 and assigns it to the PageLoadTimeLimit field.
func (o *PageLoadInstantTestRequest) SetPageLoadTimeLimit(v int32) {
	o.PageLoadTimeLimit = &v
}

// GetBlockDomains returns the BlockDomains field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetBlockDomains() string {
	if o == nil || utils.IsNil(o.BlockDomains) {
		var ret string
		return ret
	}
	return *o.BlockDomains
}

// GetBlockDomainsOk returns a tuple with the BlockDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetBlockDomainsOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BlockDomains) {
		return nil, false
	}
	return o.BlockDomains, true
}

// HasBlockDomains returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasBlockDomains() bool {
	if o != nil && !utils.IsNil(o.BlockDomains) {
		return true
	}

	return false
}

// SetBlockDomains gets a reference to the given string and assigns it to the BlockDomains field.
func (o *PageLoadInstantTestRequest) SetBlockDomains(v string) {
	o.BlockDomains = &v
}

// GetDisableScreenshot returns the DisableScreenshot field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetDisableScreenshot() bool {
	if o == nil || utils.IsNil(o.DisableScreenshot) {
		var ret bool
		return ret
	}
	return *o.DisableScreenshot
}

// GetDisableScreenshotOk returns a tuple with the DisableScreenshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetDisableScreenshotOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.DisableScreenshot) {
		return nil, false
	}
	return o.DisableScreenshot, true
}

// HasDisableScreenshot returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasDisableScreenshot() bool {
	if o != nil && !utils.IsNil(o.DisableScreenshot) {
		return true
	}

	return false
}

// SetDisableScreenshot gets a reference to the given bool and assigns it to the DisableScreenshot field.
func (o *PageLoadInstantTestRequest) SetDisableScreenshot(v bool) {
	o.DisableScreenshot = &v
}

// GetAllowMicAndCamera returns the AllowMicAndCamera field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetAllowMicAndCamera() bool {
	if o == nil || utils.IsNil(o.AllowMicAndCamera) {
		var ret bool
		return ret
	}
	return *o.AllowMicAndCamera
}

// GetAllowMicAndCameraOk returns a tuple with the AllowMicAndCamera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetAllowMicAndCameraOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AllowMicAndCamera) {
		return nil, false
	}
	return o.AllowMicAndCamera, true
}

// HasAllowMicAndCamera returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasAllowMicAndCamera() bool {
	if o != nil && !utils.IsNil(o.AllowMicAndCamera) {
		return true
	}

	return false
}

// SetAllowMicAndCamera gets a reference to the given bool and assigns it to the AllowMicAndCamera field.
func (o *PageLoadInstantTestRequest) SetAllowMicAndCamera(v bool) {
	o.AllowMicAndCamera = &v
}

// GetAllowGeolocation returns the AllowGeolocation field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetAllowGeolocation() bool {
	if o == nil || utils.IsNil(o.AllowGeolocation) {
		var ret bool
		return ret
	}
	return *o.AllowGeolocation
}

// GetAllowGeolocationOk returns a tuple with the AllowGeolocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetAllowGeolocationOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.AllowGeolocation) {
		return nil, false
	}
	return o.AllowGeolocation, true
}

// HasAllowGeolocation returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasAllowGeolocation() bool {
	if o != nil && !utils.IsNil(o.AllowGeolocation) {
		return true
	}

	return false
}

// SetAllowGeolocation gets a reference to the given bool and assigns it to the AllowGeolocation field.
func (o *PageLoadInstantTestRequest) SetAllowGeolocation(v bool) {
	o.AllowGeolocation = &v
}

// GetBrowserLanguage returns the BrowserLanguage field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetBrowserLanguage() string {
	if o == nil || utils.IsNil(o.BrowserLanguage) {
		var ret string
		return ret
	}
	return *o.BrowserLanguage
}

// GetBrowserLanguageOk returns a tuple with the BrowserLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetBrowserLanguageOk() (*string, bool) {
	if o == nil || utils.IsNil(o.BrowserLanguage) {
		return nil, false
	}
	return o.BrowserLanguage, true
}

// HasBrowserLanguage returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasBrowserLanguage() bool {
	if o != nil && !utils.IsNil(o.BrowserLanguage) {
		return true
	}

	return false
}

// SetBrowserLanguage gets a reference to the given string and assigns it to the BrowserLanguage field.
func (o *PageLoadInstantTestRequest) SetBrowserLanguage(v string) {
	o.BrowserLanguage = &v
}

// GetPageLoadingStrategy returns the PageLoadingStrategy field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetPageLoadingStrategy() TestPageLoadingStrategy {
	if o == nil || utils.IsNil(o.PageLoadingStrategy) {
		var ret TestPageLoadingStrategy
		return ret
	}
	return *o.PageLoadingStrategy
}

// GetPageLoadingStrategyOk returns a tuple with the PageLoadingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetPageLoadingStrategyOk() (*TestPageLoadingStrategy, bool) {
	if o == nil || utils.IsNil(o.PageLoadingStrategy) {
		return nil, false
	}
	return o.PageLoadingStrategy, true
}

// HasPageLoadingStrategy returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasPageLoadingStrategy() bool {
	if o != nil && !utils.IsNil(o.PageLoadingStrategy) {
		return true
	}

	return false
}

// SetPageLoadingStrategy gets a reference to the given TestPageLoadingStrategy and assigns it to the PageLoadingStrategy field.
func (o *PageLoadInstantTestRequest) SetPageLoadingStrategy(v TestPageLoadingStrategy) {
	o.PageLoadingStrategy = &v
}

// GetRandomizedStartTime returns the RandomizedStartTime field value if set, zero value otherwise.
func (o *PageLoadInstantTestRequest) GetRandomizedStartTime() bool {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		var ret bool
		return ret
	}
	return *o.RandomizedStartTime
}

// GetRandomizedStartTimeOk returns a tuple with the RandomizedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetRandomizedStartTimeOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		return nil, false
	}
	return o.RandomizedStartTime, true
}

// HasRandomizedStartTime returns a boolean if a field has been set.
func (o *PageLoadInstantTestRequest) HasRandomizedStartTime() bool {
	if o != nil && !utils.IsNil(o.RandomizedStartTime) {
		return true
	}

	return false
}

// SetRandomizedStartTime gets a reference to the given bool and assigns it to the RandomizedStartTime field.
func (o *PageLoadInstantTestRequest) SetRandomizedStartTime(v bool) {
	o.RandomizedStartTime = &v
}

// GetAgents returns the Agents field value
func (o *PageLoadInstantTestRequest) GetAgents() []TestAgent {
	if o == nil {
		var ret []TestAgent
		return ret
	}

	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value
// and a boolean to check if the value has been set.
func (o *PageLoadInstantTestRequest) GetAgentsOk() ([]TestAgent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Agents, true
}

// SetAgents sets field value
func (o *PageLoadInstantTestRequest) SetAgents(v []TestAgent) {
	o.Agents = v
}

func (o PageLoadInstantTestRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageLoadInstantTestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !utils.IsNil(o.LiveShare) {
		toSerialize["liveShare"] = o.LiveShare
	}
	if !utils.IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !utils.IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !utils.IsNil(o.SavedEvent) {
		toSerialize["savedEvent"] = o.SavedEvent
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.SharedWithAccounts) {
		toSerialize["sharedWithAccounts"] = o.SharedWithAccounts
	}
	if !utils.IsNil(o.AuthType) {
		toSerialize["authType"] = o.AuthType
	}
	if !utils.IsNil(o.AgentInterfaces) {
		toSerialize["agentInterfaces"] = o.AgentInterfaces
	}
	if !utils.IsNil(o.BandwidthMeasurements) {
		toSerialize["bandwidthMeasurements"] = o.BandwidthMeasurements
	}
	if !utils.IsNil(o.ClientCertificate) {
		toSerialize["clientCertificate"] = o.ClientCertificate
	}
	if !utils.IsNil(o.ContentRegex) {
		toSerialize["contentRegex"] = o.ContentRegex
	}
	if !utils.IsNil(o.CustomHeaders) {
		toSerialize["customHeaders"] = o.CustomHeaders
	}
	if !utils.IsNil(o.DesiredStatusCode) {
		toSerialize["desiredStatusCode"] = o.DesiredStatusCode
	}
	if !utils.IsNil(o.DownloadLimit) {
		toSerialize["downloadLimit"] = o.DownloadLimit
	}
	if !utils.IsNil(o.DnsOverride) {
		toSerialize["dnsOverride"] = o.DnsOverride
	}
	if !utils.IsNil(o.HttpTargetTime) {
		toSerialize["httpTargetTime"] = o.HttpTargetTime
	}
	if !utils.IsNil(o.HttpTimeLimit) {
		toSerialize["httpTimeLimit"] = o.HttpTimeLimit
	}
	if !utils.IsNil(o.HttpVersion) {
		toSerialize["httpVersion"] = o.HttpVersion
	}
	if !utils.IsNil(o.IncludeHeaders) {
		toSerialize["includeHeaders"] = o.IncludeHeaders
	}
	if !utils.IsNil(o.MtuMeasurements) {
		toSerialize["mtuMeasurements"] = o.MtuMeasurements
	}
	if !utils.IsNil(o.NetworkMeasurements) {
		toSerialize["networkMeasurements"] = o.NetworkMeasurements
	}
	if !utils.IsNil(o.NumPathTraces) {
		toSerialize["numPathTraces"] = o.NumPathTraces
	}
	if !utils.IsNil(o.OAuth) {
		toSerialize["oAuth"] = o.OAuth
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !utils.IsNil(o.PathTraceMode) {
		toSerialize["pathTraceMode"] = o.PathTraceMode
	}
	if !utils.IsNil(o.ProbeMode) {
		toSerialize["probeMode"] = o.ProbeMode
	}
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.SslVersion) {
		toSerialize["sslVersion"] = o.SslVersion
	}
	if !utils.IsNil(o.SslVersionId) {
		toSerialize["sslVersionId"] = o.SslVersionId
	}
	toSerialize["url"] = o.Url
	if !utils.IsNil(o.UseNtlm) {
		toSerialize["useNtlm"] = o.UseNtlm
	}
	if !utils.IsNil(o.UserAgent) {
		toSerialize["userAgent"] = o.UserAgent
	}
	if !utils.IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !utils.IsNil(o.VerifyCertificate) {
		toSerialize["verifyCertificate"] = o.VerifyCertificate
	}
	if !utils.IsNil(o.AllowUnsafeLegacyRenegotiation) {
		toSerialize["allowUnsafeLegacyRenegotiation"] = o.AllowUnsafeLegacyRenegotiation
	}
	if !utils.IsNil(o.FollowRedirects) {
		toSerialize["followRedirects"] = o.FollowRedirects
	}
	if !utils.IsNil(o.FixedPacketRate) {
		toSerialize["fixedPacketRate"] = o.FixedPacketRate
	}
	if !utils.IsNil(o.OverrideAgentProxy) {
		toSerialize["overrideAgentProxy"] = o.OverrideAgentProxy
	}
	if !utils.IsNil(o.OverrideProxyId) {
		toSerialize["overrideProxyId"] = o.OverrideProxyId
	}
	if !utils.IsNil(o.CollectProxyNetworkData) {
		toSerialize["collectProxyNetworkData"] = o.CollectProxyNetworkData
	}
	if !utils.IsNil(o.EmulatedDeviceId) {
		toSerialize["emulatedDeviceId"] = o.EmulatedDeviceId
	}
	if !utils.IsNil(o.PageLoadTargetTime) {
		toSerialize["pageLoadTargetTime"] = o.PageLoadTargetTime
	}
	if !utils.IsNil(o.PageLoadTimeLimit) {
		toSerialize["pageLoadTimeLimit"] = o.PageLoadTimeLimit
	}
	if !utils.IsNil(o.BlockDomains) {
		toSerialize["blockDomains"] = o.BlockDomains
	}
	if !utils.IsNil(o.DisableScreenshot) {
		toSerialize["disableScreenshot"] = o.DisableScreenshot
	}
	if !utils.IsNil(o.AllowMicAndCamera) {
		toSerialize["allowMicAndCamera"] = o.AllowMicAndCamera
	}
	if !utils.IsNil(o.AllowGeolocation) {
		toSerialize["allowGeolocation"] = o.AllowGeolocation
	}
	if !utils.IsNil(o.BrowserLanguage) {
		toSerialize["browserLanguage"] = o.BrowserLanguage
	}
	if !utils.IsNil(o.PageLoadingStrategy) {
		toSerialize["pageLoadingStrategy"] = o.PageLoadingStrategy
	}
	if !utils.IsNil(o.RandomizedStartTime) {
		toSerialize["randomizedStartTime"] = o.RandomizedStartTime
	}
	toSerialize["agents"] = o.Agents
	return toSerialize, nil
}

func (o *PageLoadInstantTestRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"agents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPageLoadInstantTestRequest := _PageLoadInstantTestRequest{}

    err = json.Unmarshal(data, &varPageLoadInstantTestRequest)

	if err != nil {
		return err
	}

	*o = PageLoadInstantTestRequest(varPageLoadInstantTestRequest)

	return err
}

type NullablePageLoadInstantTestRequest struct {
	value *PageLoadInstantTestRequest
	isSet bool
}

func (v NullablePageLoadInstantTestRequest) Get() *PageLoadInstantTestRequest {
	return v.value
}

func (v *NullablePageLoadInstantTestRequest) Set(val *PageLoadInstantTestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePageLoadInstantTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePageLoadInstantTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageLoadInstantTestRequest(val *PageLoadInstantTestRequest) *NullablePageLoadInstantTestRequest {
	return &NullablePageLoadInstantTestRequest{value: val, isSet: true}
}

func (v NullablePageLoadInstantTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageLoadInstantTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


