/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
	"fmt"
)

// TestPageLoadingStrategy * `normal`: The test waits until the entire page is fully loaded, including the downloading and parsing of HTML content as well as all associated resources, before advancing to the next action in the transaction test script.  * `eager`: The test waits for the DOMContentLoaded event, indicating that HTML content is downloaded and parsed, and the document reaches the \"interactive\" readiness state, before proceeding to the next action in the test script. * `none`: The test only waits for the download of HTML content. Once the HTML is downloaded, the test continues to the next action in the transaction test script without waiting for additional resources. 
type TestPageLoadingStrategy string

// List of TestPageLoadingStrategy
const (
	TESTPAGELOADINGSTRATEGY_NORMAL TestPageLoadingStrategy = "normal"
	TESTPAGELOADINGSTRATEGY_EAGER TestPageLoadingStrategy = "eager"
	TESTPAGELOADINGSTRATEGY_NONE TestPageLoadingStrategy = "none"
)

// All allowed values of TestPageLoadingStrategy enum
var AllowedTestPageLoadingStrategyEnumValues = []TestPageLoadingStrategy{
	"normal",
	"eager",
	"none",
}

func (v *TestPageLoadingStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestPageLoadingStrategy(value)
	for _, existing := range AllowedTestPageLoadingStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestPageLoadingStrategy", value)
}

// NewTestPageLoadingStrategyFromValue returns a pointer to a valid TestPageLoadingStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestPageLoadingStrategyFromValue(v string) (*TestPageLoadingStrategy, error) {
	ev := TestPageLoadingStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestPageLoadingStrategy: valid values are %v", v, AllowedTestPageLoadingStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestPageLoadingStrategy) IsValid() bool {
	for _, existing := range AllowedTestPageLoadingStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestPageLoadingStrategy value
func (v TestPageLoadingStrategy) Ptr() *TestPageLoadingStrategy {
	return &v
}

type NullableTestPageLoadingStrategy struct {
	value *TestPageLoadingStrategy
	isSet bool
}

func (v NullableTestPageLoadingStrategy) Get() *TestPageLoadingStrategy {
	return v.value
}

func (v *NullableTestPageLoadingStrategy) Set(val *TestPageLoadingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableTestPageLoadingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableTestPageLoadingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestPageLoadingStrategy(val *TestPageLoadingStrategy) *NullableTestPageLoadingStrategy {
	return &NullableTestPageLoadingStrategy{value: val, isSet: true}
}

func (v NullableTestPageLoadingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestPageLoadingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

