/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
	"fmt"
)

// FtpServerRequestType Set the type of activity for the test.
type FtpServerRequestType string

// List of FtpServerRequestType
const (
	FTPSERVERREQUESTTYPE_DOWNLOAD FtpServerRequestType = "download"
	FTPSERVERREQUESTTYPE_UPLOAD FtpServerRequestType = "upload"
	FTPSERVERREQUESTTYPE_LIST FtpServerRequestType = "list"
)

// All allowed values of FtpServerRequestType enum
var AllowedFtpServerRequestTypeEnumValues = []FtpServerRequestType{
	"download",
	"upload",
	"list",
}

func (v *FtpServerRequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FtpServerRequestType(value)
	for _, existing := range AllowedFtpServerRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FtpServerRequestType", value)
}

// NewFtpServerRequestTypeFromValue returns a pointer to a valid FtpServerRequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFtpServerRequestTypeFromValue(v string) (*FtpServerRequestType, error) {
	ev := FtpServerRequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FtpServerRequestType: valid values are %v", v, AllowedFtpServerRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FtpServerRequestType) IsValid() bool {
	for _, existing := range AllowedFtpServerRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FtpServerRequestType value
func (v FtpServerRequestType) Ptr() *FtpServerRequestType {
	return &v
}

type NullableFtpServerRequestType struct {
	value *FtpServerRequestType
	isSet bool
}

func (v NullableFtpServerRequestType) Get() *FtpServerRequestType {
	return v.value
}

func (v *NullableFtpServerRequestType) Set(val *FtpServerRequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableFtpServerRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableFtpServerRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFtpServerRequestType(val *FtpServerRequestType) *NullableFtpServerRequestType {
	return &NullableFtpServerRequestType{value: val, isSet: true}
}

func (v NullableFtpServerRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFtpServerRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

