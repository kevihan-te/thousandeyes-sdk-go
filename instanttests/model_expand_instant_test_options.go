/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
	"fmt"
)

// ExpandInstantTestOptions the model 'ExpandInstantTestOptions'
type ExpandInstantTestOptions string

// List of ExpandInstantTestOptions
const (
	EXPANDINSTANTTESTOPTIONS_AGENT ExpandInstantTestOptions = "agent"
	EXPANDINSTANTTESTOPTIONS_LABEL ExpandInstantTestOptions = "label"
	EXPANDINSTANTTESTOPTIONS_SHARED_WITH_ACCOUNT ExpandInstantTestOptions = "shared-with-account"
)

// All allowed values of ExpandInstantTestOptions enum
var AllowedExpandInstantTestOptionsEnumValues = []ExpandInstantTestOptions{
	"agent",
	"label",
	"shared-with-account",
}

func (v *ExpandInstantTestOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpandInstantTestOptions(value)
	for _, existing := range AllowedExpandInstantTestOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpandInstantTestOptions", value)
}

// NewExpandInstantTestOptionsFromValue returns a pointer to a valid ExpandInstantTestOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpandInstantTestOptionsFromValue(v string) (*ExpandInstantTestOptions, error) {
	ev := ExpandInstantTestOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpandInstantTestOptions: valid values are %v", v, AllowedExpandInstantTestOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpandInstantTestOptions) IsValid() bool {
	for _, existing := range AllowedExpandInstantTestOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpandInstantTestOptions value
func (v ExpandInstantTestOptions) Ptr() *ExpandInstantTestOptions {
	return &v
}

type NullableExpandInstantTestOptions struct {
	value *ExpandInstantTestOptions
	isSet bool
}

func (v NullableExpandInstantTestOptions) Get() *ExpandInstantTestOptions {
	return v.value
}

func (v *NullableExpandInstantTestOptions) Set(val *ExpandInstantTestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandInstantTestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandInstantTestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandInstantTestOptions(val *ExpandInstantTestOptions) *NullableExpandInstantTestOptions {
	return &NullableExpandInstantTestOptions{value: val, isSet: true}
}

func (v NullableExpandInstantTestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandInstantTestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

