/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TestAgent type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestAgent{}

// TestAgent struct for TestAgent
type TestAgent struct {
	// Identifier for the agent (get `agentId` from `/agents` endpoint).
	AgentId *string `json:"agentId,omitempty"`
	// IP address from the agent's `ipAddresses` field (get `ipAddresses` from `/agents` endpoint). Used for interface selection.
	SourceIpAddress *string `json:"sourceIpAddress,omitempty"`
}

// NewTestAgent instantiates a new TestAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestAgent() *TestAgent {
	this := TestAgent{}
	return &this
}

// NewTestAgentWithDefaults instantiates a new TestAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestAgentWithDefaults() *TestAgent {
	this := TestAgent{}
	return &this
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *TestAgent) GetAgentId() string {
	if o == nil || utils.IsNil(o.AgentId) {
		var ret string
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestAgent) GetAgentIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *TestAgent) HasAgentId() bool {
	if o != nil && !utils.IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given string and assigns it to the AgentId field.
func (o *TestAgent) SetAgentId(v string) {
	o.AgentId = &v
}

// GetSourceIpAddress returns the SourceIpAddress field value if set, zero value otherwise.
func (o *TestAgent) GetSourceIpAddress() string {
	if o == nil || utils.IsNil(o.SourceIpAddress) {
		var ret string
		return ret
	}
	return *o.SourceIpAddress
}

// GetSourceIpAddressOk returns a tuple with the SourceIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestAgent) GetSourceIpAddressOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SourceIpAddress) {
		return nil, false
	}
	return o.SourceIpAddress, true
}

// HasSourceIpAddress returns a boolean if a field has been set.
func (o *TestAgent) HasSourceIpAddress() bool {
	if o != nil && !utils.IsNil(o.SourceIpAddress) {
		return true
	}

	return false
}

// SetSourceIpAddress gets a reference to the given string and assigns it to the SourceIpAddress field.
func (o *TestAgent) SetSourceIpAddress(v string) {
	o.SourceIpAddress = &v
}

func (o TestAgent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestAgent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !utils.IsNil(o.SourceIpAddress) {
		toSerialize["sourceIpAddress"] = o.SourceIpAddress
	}
	return toSerialize, nil
}

type NullableTestAgent struct {
	value *TestAgent
	isSet bool
}

func (v NullableTestAgent) Get() *TestAgent {
	return v.value
}

func (v *NullableTestAgent) Set(val *TestAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableTestAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableTestAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestAgent(val *TestAgent) *NullableTestAgent {
	return &NullableTestAgent{value: val, isSet: true}
}

func (v NullableTestAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


