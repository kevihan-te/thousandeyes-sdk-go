/*
Instant Tests API

The Instant Tests API operations lets you create and run new instant tests. You will need to be a regular user or have the following permissions:   * `API Access`   * `View tests`  The response does not include the immediate test results. Use the Test Results endpoints to get test results after creating and executing an instant test. You can find the URLs for these endpoints in the _links section of the test definition that is returned when you create the instant test. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package instanttests

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
	"fmt"
)

// checks if the SipServerInstantTestResponse type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &SipServerInstantTestResponse{}

// SipServerInstantTestResponse struct for SipServerInstantTestResponse
type SipServerInstantTestResponse struct {
	// User that created the test.
	CreatedBy *string `json:"createdBy,omitempty"`
	// UTC created date (ISO date-time format).
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	// A description of the test.
	Description *string `json:"description,omitempty"`
	// Indicates if the test is shared with the account group.
	LiveShare *bool `json:"liveShare,omitempty"`
	// User that modified the test.
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// UTC last modification date (ISO date-time format).
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// Indicates if the test is a saved event.
	SavedEvent *bool `json:"savedEvent,omitempty"`
	// Each test is assigned an unique ID; this is used to access test information and results from other endpoints.
	TestId *string `json:"testId,omitempty"`
	// The name of the test. Test name must be unique.
	TestName *string `json:"testName,omitempty"`
	Type *string `json:"type,omitempty"`
	Links *TestLinks `json:"_links,omitempty"`
	Labels []TestLabel `json:"labels,omitempty"`
	SharedWithAccounts []SharedWithAccount `json:"sharedWithAccounts,omitempty"`
	// Set `true` to measure MTU sizes on network from agents to the target.
	MtuMeasurements *bool `json:"mtuMeasurements,omitempty"`
	// Enable or disable network measurements. Set to true to enable or false to disable network measurements.
	NetworkMeasurements *bool `json:"networkMeasurements,omitempty"`
	// Number of path traces executed by the agent.
	NumPathTraces *int32 `json:"numPathTraces,omitempty"`
	// Options regex, this field does not require escaping.
	OptionsRegex *string `json:"optionsRegex,omitempty"`
	PathTraceMode *TestPathTraceMode `json:"pathTraceMode,omitempty"`
	ProbeMode *TestProbeMode `json:"probeMode,omitempty"`
	// Indicates whether agents should randomize the start time in each test round.
	RandomizedStartTime *bool `json:"randomizedStartTime,omitempty"`
	// Set to true to perform SIP registration on the test target with the SIP REGISTER command.
	RegisterEnabled *bool `json:"registerEnabled,omitempty"`
	// Target time for test completion in milliseconds.
	SipTargetTime *int32 `json:"sipTargetTime,omitempty"`
	// Time limit in milliseconds.
	SipTimeLimit *int32 `json:"sipTimeLimit,omitempty"`
	// Sets packets rate sent to measure the network in packets per second.
	FixedPacketRate *int32 `json:"fixedPacketRate,omitempty"`
	Ipv6Policy *TestIpv6Policy `json:"ipv6Policy,omitempty"`
	// Username for authentication with SIP server.
	AuthUser *string `json:"authUser,omitempty"`
	// Password for Basic/NTLM authentication.
	Password *string `json:"password,omitempty"`
	// Target port.
	Port int32 `json:"port"`
	Protocol *SipTestProtocol `json:"protocol,omitempty"`
	// SIP server to be tested, specified by domain name or IP address.
	SipRegistrar *string `json:"sipRegistrar,omitempty"`
	// Username for SIP registration, should be unique within a ThousandEyes account group.
	User *string `json:"user,omitempty"`
	// Contains list of agents.
	Agents []AgentResponse `json:"agents,omitempty"`
}

type _SipServerInstantTestResponse SipServerInstantTestResponse

// NewSipServerInstantTestResponse instantiates a new SipServerInstantTestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSipServerInstantTestResponse(port int32) *SipServerInstantTestResponse {
	this := SipServerInstantTestResponse{}
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	var registerEnabled bool = false
	this.RegisterEnabled = &registerEnabled
	var sipTimeLimit int32 = 5
	this.SipTimeLimit = &sipTimeLimit
	var ipv6Policy TestIpv6Policy = TESTIPV6POLICY_USE_AGENT_POLICY
	this.Ipv6Policy = &ipv6Policy
	this.Port = port
	var protocol SipTestProtocol = SIPTESTPROTOCOL_TCP
	this.Protocol = &protocol
	return &this
}

// NewSipServerInstantTestResponseWithDefaults instantiates a new SipServerInstantTestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSipServerInstantTestResponseWithDefaults() *SipServerInstantTestResponse {
	this := SipServerInstantTestResponse{}
	var networkMeasurements bool = true
	this.NetworkMeasurements = &networkMeasurements
	var numPathTraces int32 = 3
	this.NumPathTraces = &numPathTraces
	var pathTraceMode TestPathTraceMode = TESTPATHTRACEMODE_CLASSIC
	this.PathTraceMode = &pathTraceMode
	var probeMode TestProbeMode = TESTPROBEMODE_AUTO
	this.ProbeMode = &probeMode
	var randomizedStartTime bool = false
	this.RandomizedStartTime = &randomizedStartTime
	var registerEnabled bool = false
	this.RegisterEnabled = &registerEnabled
	var sipTimeLimit int32 = 5
	this.SipTimeLimit = &sipTimeLimit
	var ipv6Policy TestIpv6Policy = TESTIPV6POLICY_USE_AGENT_POLICY
	this.Ipv6Policy = &ipv6Policy
	var port int32 = 49153
	this.Port = port
	var protocol SipTestProtocol = SIPTESTPROTOCOL_TCP
	this.Protocol = &protocol
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetCreatedBy() string {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetCreatedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *SipServerInstantTestResponse) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetCreatedDate() time.Time {
	if o == nil || utils.IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasCreatedDate() bool {
	if o != nil && !utils.IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *SipServerInstantTestResponse) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SipServerInstantTestResponse) SetDescription(v string) {
	o.Description = &v
}

// GetLiveShare returns the LiveShare field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetLiveShare() bool {
	if o == nil || utils.IsNil(o.LiveShare) {
		var ret bool
		return ret
	}
	return *o.LiveShare
}

// GetLiveShareOk returns a tuple with the LiveShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetLiveShareOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.LiveShare) {
		return nil, false
	}
	return o.LiveShare, true
}

// HasLiveShare returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasLiveShare() bool {
	if o != nil && !utils.IsNil(o.LiveShare) {
		return true
	}

	return false
}

// SetLiveShare gets a reference to the given bool and assigns it to the LiveShare field.
func (o *SipServerInstantTestResponse) SetLiveShare(v bool) {
	o.LiveShare = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetModifiedBy() string {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetModifiedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasModifiedBy() bool {
	if o != nil && !utils.IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *SipServerInstantTestResponse) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetModifiedDate() time.Time {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasModifiedDate() bool {
	if o != nil && !utils.IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *SipServerInstantTestResponse) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetSavedEvent returns the SavedEvent field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetSavedEvent() bool {
	if o == nil || utils.IsNil(o.SavedEvent) {
		var ret bool
		return ret
	}
	return *o.SavedEvent
}

// GetSavedEventOk returns a tuple with the SavedEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetSavedEventOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.SavedEvent) {
		return nil, false
	}
	return o.SavedEvent, true
}

// HasSavedEvent returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasSavedEvent() bool {
	if o != nil && !utils.IsNil(o.SavedEvent) {
		return true
	}

	return false
}

// SetSavedEvent gets a reference to the given bool and assigns it to the SavedEvent field.
func (o *SipServerInstantTestResponse) SetSavedEvent(v bool) {
	o.SavedEvent = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *SipServerInstantTestResponse) SetTestId(v string) {
	o.TestId = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *SipServerInstantTestResponse) SetTestName(v string) {
	o.TestName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetType() string {
	if o == nil || utils.IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SipServerInstantTestResponse) SetType(v string) {
	o.Type = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetLinks() TestLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret TestLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetLinksOk() (*TestLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given TestLinks and assigns it to the Links field.
func (o *SipServerInstantTestResponse) SetLinks(v TestLinks) {
	o.Links = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetLabels() []TestLabel {
	if o == nil || utils.IsNil(o.Labels) {
		var ret []TestLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetLabelsOk() ([]TestLabel, bool) {
	if o == nil || utils.IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasLabels() bool {
	if o != nil && !utils.IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []TestLabel and assigns it to the Labels field.
func (o *SipServerInstantTestResponse) SetLabels(v []TestLabel) {
	o.Labels = v
}

// GetSharedWithAccounts returns the SharedWithAccounts field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetSharedWithAccounts() []SharedWithAccount {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		var ret []SharedWithAccount
		return ret
	}
	return o.SharedWithAccounts
}

// GetSharedWithAccountsOk returns a tuple with the SharedWithAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetSharedWithAccountsOk() ([]SharedWithAccount, bool) {
	if o == nil || utils.IsNil(o.SharedWithAccounts) {
		return nil, false
	}
	return o.SharedWithAccounts, true
}

// HasSharedWithAccounts returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasSharedWithAccounts() bool {
	if o != nil && !utils.IsNil(o.SharedWithAccounts) {
		return true
	}

	return false
}

// SetSharedWithAccounts gets a reference to the given []SharedWithAccount and assigns it to the SharedWithAccounts field.
func (o *SipServerInstantTestResponse) SetSharedWithAccounts(v []SharedWithAccount) {
	o.SharedWithAccounts = v
}

// GetMtuMeasurements returns the MtuMeasurements field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetMtuMeasurements() bool {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		var ret bool
		return ret
	}
	return *o.MtuMeasurements
}

// GetMtuMeasurementsOk returns a tuple with the MtuMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetMtuMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.MtuMeasurements) {
		return nil, false
	}
	return o.MtuMeasurements, true
}

// HasMtuMeasurements returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasMtuMeasurements() bool {
	if o != nil && !utils.IsNil(o.MtuMeasurements) {
		return true
	}

	return false
}

// SetMtuMeasurements gets a reference to the given bool and assigns it to the MtuMeasurements field.
func (o *SipServerInstantTestResponse) SetMtuMeasurements(v bool) {
	o.MtuMeasurements = &v
}

// GetNetworkMeasurements returns the NetworkMeasurements field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetNetworkMeasurements() bool {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		var ret bool
		return ret
	}
	return *o.NetworkMeasurements
}

// GetNetworkMeasurementsOk returns a tuple with the NetworkMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetNetworkMeasurementsOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.NetworkMeasurements) {
		return nil, false
	}
	return o.NetworkMeasurements, true
}

// HasNetworkMeasurements returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasNetworkMeasurements() bool {
	if o != nil && !utils.IsNil(o.NetworkMeasurements) {
		return true
	}

	return false
}

// SetNetworkMeasurements gets a reference to the given bool and assigns it to the NetworkMeasurements field.
func (o *SipServerInstantTestResponse) SetNetworkMeasurements(v bool) {
	o.NetworkMeasurements = &v
}

// GetNumPathTraces returns the NumPathTraces field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetNumPathTraces() int32 {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		var ret int32
		return ret
	}
	return *o.NumPathTraces
}

// GetNumPathTracesOk returns a tuple with the NumPathTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetNumPathTracesOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.NumPathTraces) {
		return nil, false
	}
	return o.NumPathTraces, true
}

// HasNumPathTraces returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasNumPathTraces() bool {
	if o != nil && !utils.IsNil(o.NumPathTraces) {
		return true
	}

	return false
}

// SetNumPathTraces gets a reference to the given int32 and assigns it to the NumPathTraces field.
func (o *SipServerInstantTestResponse) SetNumPathTraces(v int32) {
	o.NumPathTraces = &v
}

// GetOptionsRegex returns the OptionsRegex field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetOptionsRegex() string {
	if o == nil || utils.IsNil(o.OptionsRegex) {
		var ret string
		return ret
	}
	return *o.OptionsRegex
}

// GetOptionsRegexOk returns a tuple with the OptionsRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetOptionsRegexOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OptionsRegex) {
		return nil, false
	}
	return o.OptionsRegex, true
}

// HasOptionsRegex returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasOptionsRegex() bool {
	if o != nil && !utils.IsNil(o.OptionsRegex) {
		return true
	}

	return false
}

// SetOptionsRegex gets a reference to the given string and assigns it to the OptionsRegex field.
func (o *SipServerInstantTestResponse) SetOptionsRegex(v string) {
	o.OptionsRegex = &v
}

// GetPathTraceMode returns the PathTraceMode field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetPathTraceMode() TestPathTraceMode {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		var ret TestPathTraceMode
		return ret
	}
	return *o.PathTraceMode
}

// GetPathTraceModeOk returns a tuple with the PathTraceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetPathTraceModeOk() (*TestPathTraceMode, bool) {
	if o == nil || utils.IsNil(o.PathTraceMode) {
		return nil, false
	}
	return o.PathTraceMode, true
}

// HasPathTraceMode returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasPathTraceMode() bool {
	if o != nil && !utils.IsNil(o.PathTraceMode) {
		return true
	}

	return false
}

// SetPathTraceMode gets a reference to the given TestPathTraceMode and assigns it to the PathTraceMode field.
func (o *SipServerInstantTestResponse) SetPathTraceMode(v TestPathTraceMode) {
	o.PathTraceMode = &v
}

// GetProbeMode returns the ProbeMode field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetProbeMode() TestProbeMode {
	if o == nil || utils.IsNil(o.ProbeMode) {
		var ret TestProbeMode
		return ret
	}
	return *o.ProbeMode
}

// GetProbeModeOk returns a tuple with the ProbeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetProbeModeOk() (*TestProbeMode, bool) {
	if o == nil || utils.IsNil(o.ProbeMode) {
		return nil, false
	}
	return o.ProbeMode, true
}

// HasProbeMode returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasProbeMode() bool {
	if o != nil && !utils.IsNil(o.ProbeMode) {
		return true
	}

	return false
}

// SetProbeMode gets a reference to the given TestProbeMode and assigns it to the ProbeMode field.
func (o *SipServerInstantTestResponse) SetProbeMode(v TestProbeMode) {
	o.ProbeMode = &v
}

// GetRandomizedStartTime returns the RandomizedStartTime field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetRandomizedStartTime() bool {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		var ret bool
		return ret
	}
	return *o.RandomizedStartTime
}

// GetRandomizedStartTimeOk returns a tuple with the RandomizedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetRandomizedStartTimeOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RandomizedStartTime) {
		return nil, false
	}
	return o.RandomizedStartTime, true
}

// HasRandomizedStartTime returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasRandomizedStartTime() bool {
	if o != nil && !utils.IsNil(o.RandomizedStartTime) {
		return true
	}

	return false
}

// SetRandomizedStartTime gets a reference to the given bool and assigns it to the RandomizedStartTime field.
func (o *SipServerInstantTestResponse) SetRandomizedStartTime(v bool) {
	o.RandomizedStartTime = &v
}

// GetRegisterEnabled returns the RegisterEnabled field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetRegisterEnabled() bool {
	if o == nil || utils.IsNil(o.RegisterEnabled) {
		var ret bool
		return ret
	}
	return *o.RegisterEnabled
}

// GetRegisterEnabledOk returns a tuple with the RegisterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetRegisterEnabledOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.RegisterEnabled) {
		return nil, false
	}
	return o.RegisterEnabled, true
}

// HasRegisterEnabled returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasRegisterEnabled() bool {
	if o != nil && !utils.IsNil(o.RegisterEnabled) {
		return true
	}

	return false
}

// SetRegisterEnabled gets a reference to the given bool and assigns it to the RegisterEnabled field.
func (o *SipServerInstantTestResponse) SetRegisterEnabled(v bool) {
	o.RegisterEnabled = &v
}

// GetSipTargetTime returns the SipTargetTime field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetSipTargetTime() int32 {
	if o == nil || utils.IsNil(o.SipTargetTime) {
		var ret int32
		return ret
	}
	return *o.SipTargetTime
}

// GetSipTargetTimeOk returns a tuple with the SipTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetSipTargetTimeOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.SipTargetTime) {
		return nil, false
	}
	return o.SipTargetTime, true
}

// HasSipTargetTime returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasSipTargetTime() bool {
	if o != nil && !utils.IsNil(o.SipTargetTime) {
		return true
	}

	return false
}

// SetSipTargetTime gets a reference to the given int32 and assigns it to the SipTargetTime field.
func (o *SipServerInstantTestResponse) SetSipTargetTime(v int32) {
	o.SipTargetTime = &v
}

// GetSipTimeLimit returns the SipTimeLimit field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetSipTimeLimit() int32 {
	if o == nil || utils.IsNil(o.SipTimeLimit) {
		var ret int32
		return ret
	}
	return *o.SipTimeLimit
}

// GetSipTimeLimitOk returns a tuple with the SipTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetSipTimeLimitOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.SipTimeLimit) {
		return nil, false
	}
	return o.SipTimeLimit, true
}

// HasSipTimeLimit returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasSipTimeLimit() bool {
	if o != nil && !utils.IsNil(o.SipTimeLimit) {
		return true
	}

	return false
}

// SetSipTimeLimit gets a reference to the given int32 and assigns it to the SipTimeLimit field.
func (o *SipServerInstantTestResponse) SetSipTimeLimit(v int32) {
	o.SipTimeLimit = &v
}

// GetFixedPacketRate returns the FixedPacketRate field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetFixedPacketRate() int32 {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		var ret int32
		return ret
	}
	return *o.FixedPacketRate
}

// GetFixedPacketRateOk returns a tuple with the FixedPacketRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetFixedPacketRateOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.FixedPacketRate) {
		return nil, false
	}
	return o.FixedPacketRate, true
}

// HasFixedPacketRate returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasFixedPacketRate() bool {
	if o != nil && !utils.IsNil(o.FixedPacketRate) {
		return true
	}

	return false
}

// SetFixedPacketRate gets a reference to the given int32 and assigns it to the FixedPacketRate field.
func (o *SipServerInstantTestResponse) SetFixedPacketRate(v int32) {
	o.FixedPacketRate = &v
}

// GetIpv6Policy returns the Ipv6Policy field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetIpv6Policy() TestIpv6Policy {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		var ret TestIpv6Policy
		return ret
	}
	return *o.Ipv6Policy
}

// GetIpv6PolicyOk returns a tuple with the Ipv6Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetIpv6PolicyOk() (*TestIpv6Policy, bool) {
	if o == nil || utils.IsNil(o.Ipv6Policy) {
		return nil, false
	}
	return o.Ipv6Policy, true
}

// HasIpv6Policy returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasIpv6Policy() bool {
	if o != nil && !utils.IsNil(o.Ipv6Policy) {
		return true
	}

	return false
}

// SetIpv6Policy gets a reference to the given TestIpv6Policy and assigns it to the Ipv6Policy field.
func (o *SipServerInstantTestResponse) SetIpv6Policy(v TestIpv6Policy) {
	o.Ipv6Policy = &v
}

// GetAuthUser returns the AuthUser field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetAuthUser() string {
	if o == nil || utils.IsNil(o.AuthUser) {
		var ret string
		return ret
	}
	return *o.AuthUser
}

// GetAuthUserOk returns a tuple with the AuthUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetAuthUserOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AuthUser) {
		return nil, false
	}
	return o.AuthUser, true
}

// HasAuthUser returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasAuthUser() bool {
	if o != nil && !utils.IsNil(o.AuthUser) {
		return true
	}

	return false
}

// SetAuthUser gets a reference to the given string and assigns it to the AuthUser field.
func (o *SipServerInstantTestResponse) SetAuthUser(v string) {
	o.AuthUser = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetPassword() string {
	if o == nil || utils.IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetPasswordOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasPassword() bool {
	if o != nil && !utils.IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SipServerInstantTestResponse) SetPassword(v string) {
	o.Password = &v
}

// GetPort returns the Port field value
func (o *SipServerInstantTestResponse) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SipServerInstantTestResponse) SetPort(v int32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetProtocol() SipTestProtocol {
	if o == nil || utils.IsNil(o.Protocol) {
		var ret SipTestProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetProtocolOk() (*SipTestProtocol, bool) {
	if o == nil || utils.IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasProtocol() bool {
	if o != nil && !utils.IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given SipTestProtocol and assigns it to the Protocol field.
func (o *SipServerInstantTestResponse) SetProtocol(v SipTestProtocol) {
	o.Protocol = &v
}

// GetSipRegistrar returns the SipRegistrar field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetSipRegistrar() string {
	if o == nil || utils.IsNil(o.SipRegistrar) {
		var ret string
		return ret
	}
	return *o.SipRegistrar
}

// GetSipRegistrarOk returns a tuple with the SipRegistrar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetSipRegistrarOk() (*string, bool) {
	if o == nil || utils.IsNil(o.SipRegistrar) {
		return nil, false
	}
	return o.SipRegistrar, true
}

// HasSipRegistrar returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasSipRegistrar() bool {
	if o != nil && !utils.IsNil(o.SipRegistrar) {
		return true
	}

	return false
}

// SetSipRegistrar gets a reference to the given string and assigns it to the SipRegistrar field.
func (o *SipServerInstantTestResponse) SetSipRegistrar(v string) {
	o.SipRegistrar = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetUser() string {
	if o == nil || utils.IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetUserOk() (*string, bool) {
	if o == nil || utils.IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasUser() bool {
	if o != nil && !utils.IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *SipServerInstantTestResponse) SetUser(v string) {
	o.User = &v
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *SipServerInstantTestResponse) GetAgents() []AgentResponse {
	if o == nil || utils.IsNil(o.Agents) {
		var ret []AgentResponse
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SipServerInstantTestResponse) GetAgentsOk() ([]AgentResponse, bool) {
	if o == nil || utils.IsNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *SipServerInstantTestResponse) HasAgents() bool {
	if o != nil && !utils.IsNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []AgentResponse and assigns it to the Agents field.
func (o *SipServerInstantTestResponse) SetAgents(v []AgentResponse) {
	o.Agents = v
}

func (o SipServerInstantTestResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SipServerInstantTestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !utils.IsNil(o.LiveShare) {
		toSerialize["liveShare"] = o.LiveShare
	}
	if !utils.IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !utils.IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !utils.IsNil(o.SavedEvent) {
		toSerialize["savedEvent"] = o.SavedEvent
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !utils.IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !utils.IsNil(o.SharedWithAccounts) {
		toSerialize["sharedWithAccounts"] = o.SharedWithAccounts
	}
	if !utils.IsNil(o.MtuMeasurements) {
		toSerialize["mtuMeasurements"] = o.MtuMeasurements
	}
	if !utils.IsNil(o.NetworkMeasurements) {
		toSerialize["networkMeasurements"] = o.NetworkMeasurements
	}
	if !utils.IsNil(o.NumPathTraces) {
		toSerialize["numPathTraces"] = o.NumPathTraces
	}
	if !utils.IsNil(o.OptionsRegex) {
		toSerialize["optionsRegex"] = o.OptionsRegex
	}
	if !utils.IsNil(o.PathTraceMode) {
		toSerialize["pathTraceMode"] = o.PathTraceMode
	}
	if !utils.IsNil(o.ProbeMode) {
		toSerialize["probeMode"] = o.ProbeMode
	}
	if !utils.IsNil(o.RandomizedStartTime) {
		toSerialize["randomizedStartTime"] = o.RandomizedStartTime
	}
	if !utils.IsNil(o.RegisterEnabled) {
		toSerialize["registerEnabled"] = o.RegisterEnabled
	}
	if !utils.IsNil(o.SipTargetTime) {
		toSerialize["sipTargetTime"] = o.SipTargetTime
	}
	if !utils.IsNil(o.SipTimeLimit) {
		toSerialize["sipTimeLimit"] = o.SipTimeLimit
	}
	if !utils.IsNil(o.FixedPacketRate) {
		toSerialize["fixedPacketRate"] = o.FixedPacketRate
	}
	if !utils.IsNil(o.Ipv6Policy) {
		toSerialize["ipv6Policy"] = o.Ipv6Policy
	}
	if !utils.IsNil(o.AuthUser) {
		toSerialize["authUser"] = o.AuthUser
	}
	if !utils.IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["port"] = o.Port
	if !utils.IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !utils.IsNil(o.SipRegistrar) {
		toSerialize["sipRegistrar"] = o.SipRegistrar
	}
	if !utils.IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !utils.IsNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	return toSerialize, nil
}

func (o *SipServerInstantTestResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSipServerInstantTestResponse := _SipServerInstantTestResponse{}

    err = json.Unmarshal(data, &varSipServerInstantTestResponse)

	if err != nil {
		return err
	}

	*o = SipServerInstantTestResponse(varSipServerInstantTestResponse)

	return err
}

type NullableSipServerInstantTestResponse struct {
	value *SipServerInstantTestResponse
	isSet bool
}

func (v NullableSipServerInstantTestResponse) Get() *SipServerInstantTestResponse {
	return v.value
}

func (v *NullableSipServerInstantTestResponse) Set(val *SipServerInstantTestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSipServerInstantTestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSipServerInstantTestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSipServerInstantTestResponse(val *SipServerInstantTestResponse) *NullableSipServerInstantTestResponse {
	return &NullableSipServerInstantTestResponse{value: val, isSet: true}
}

func (v NullableSipServerInstantTestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSipServerInstantTestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


