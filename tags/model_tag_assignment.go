/*
Tags API

The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tags

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TagAssignment type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TagAssignment{}

// TagAssignment struct for TagAssignment
type TagAssignment struct {
	Assignments []Assignment `json:"assignments,omitempty"`
}

// NewTagAssignment instantiates a new TagAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagAssignment() *TagAssignment {
	this := TagAssignment{}
	return &this
}

// NewTagAssignmentWithDefaults instantiates a new TagAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagAssignmentWithDefaults() *TagAssignment {
	this := TagAssignment{}
	return &this
}

// GetAssignments returns the Assignments field value if set, zero value otherwise.
func (o *TagAssignment) GetAssignments() []Assignment {
	if o == nil || utils.IsNil(o.Assignments) {
		var ret []Assignment
		return ret
	}
	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagAssignment) GetAssignmentsOk() ([]Assignment, bool) {
	if o == nil || utils.IsNil(o.Assignments) {
		return nil, false
	}
	return o.Assignments, true
}

// HasAssignments returns a boolean if a field has been set.
func (o *TagAssignment) HasAssignments() bool {
	if o != nil && !utils.IsNil(o.Assignments) {
		return true
	}

	return false
}

// SetAssignments gets a reference to the given []Assignment and assigns it to the Assignments field.
func (o *TagAssignment) SetAssignments(v []Assignment) {
	o.Assignments = v
}

func (o TagAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignments) {
		toSerialize["assignments"] = o.Assignments
	}
	return toSerialize, nil
}

type NullableTagAssignment struct {
	value *TagAssignment
	isSet bool
}

func (v NullableTagAssignment) Get() *TagAssignment {
	return v.value
}

func (v *NullableTagAssignment) Set(val *TagAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableTagAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableTagAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagAssignment(val *TagAssignment) *NullableTagAssignment {
	return &NullableTagAssignment{value: val, isSet: true}
}

func (v NullableTagAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


