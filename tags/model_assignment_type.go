/*
Tags API

The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tags

import (
	"encoding/json"
	"fmt"
)

// AssignmentType the model 'AssignmentType'
type AssignmentType string

// List of AssignmentType
const (
	ASSIGNMENTTYPE_TEST AssignmentType = "test"
	ASSIGNMENTTYPE_V_AGENT AssignmentType = "v-agent"
	ASSIGNMENTTYPE_ENDPOINT_TEST AssignmentType = "endpoint-test"
	ASSIGNMENTTYPE_DASHBOARD AssignmentType = "dashboard"
)

// All allowed values of AssignmentType enum
var AllowedAssignmentTypeEnumValues = []AssignmentType{
	"test",
	"v-agent",
	"endpoint-test",
	"dashboard",
}

func (v *AssignmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssignmentType(value)
	for _, existing := range AllowedAssignmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssignmentType", value)
}

// NewAssignmentTypeFromValue returns a pointer to a valid AssignmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssignmentTypeFromValue(v string) (*AssignmentType, error) {
	ev := AssignmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssignmentType: valid values are %v", v, AllowedAssignmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssignmentType) IsValid() bool {
	for _, existing := range AllowedAssignmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssignmentType value
func (v AssignmentType) Ptr() *AssignmentType {
	return &v
}

type NullableAssignmentType struct {
	value *AssignmentType
	isSet bool
}

func (v NullableAssignmentType) Get() *AssignmentType {
	return v.value
}

func (v *NullableAssignmentType) Set(val *AssignmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignmentType(val *AssignmentType) *NullableAssignmentType {
	return &NullableAssignmentType{value: val, isSet: true}
}

func (v NullableAssignmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

