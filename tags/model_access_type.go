/*
Tags API

The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tags

import (
	"encoding/json"
	"fmt"
)

// AccessType The access level of the tag. The access level impacts the visibility of the label in UI and the permissions to modify the label.
type AccessType string

// List of AccessType
const (
	ACCESSTYPE_ALL AccessType = "all"
	ACCESSTYPE_PARTNER AccessType = "partner"
	ACCESSTYPE_SYSTEM AccessType = "system"
)

// All allowed values of AccessType enum
var AllowedAccessTypeEnumValues = []AccessType{
	"all",
	"partner",
	"system",
}

func (v *AccessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessType(value)
	for _, existing := range AllowedAccessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessType", value)
}

// NewAccessTypeFromValue returns a pointer to a valid AccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessTypeFromValue(v string) (*AccessType, error) {
	ev := AccessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessType: valid values are %v", v, AllowedAccessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessType) IsValid() bool {
	for _, existing := range AllowedAccessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessType value
func (v AccessType) Ptr() *AccessType {
	return &v
}

type NullableAccessType struct {
	value *AccessType
	isSet bool
}

func (v NullableAccessType) Get() *AccessType {
	return v.value
}

func (v *NullableAccessType) Set(val *AccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessType(val *AccessType) *NullableAccessType {
	return &NullableAccessType{value: val, isSet: true}
}

func (v NullableAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

