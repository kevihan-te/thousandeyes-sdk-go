/*
Tags API

The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tags

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Assignment type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Assignment{}

// Assignment struct for Assignment
type Assignment struct {
	// Object Id
	Id *string `json:"id,omitempty"`
	Type *AssignmentType `json:"type,omitempty"`
}

// NewAssignment instantiates a new Assignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignment() *Assignment {
	this := Assignment{}
	return &this
}

// NewAssignmentWithDefaults instantiates a new Assignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignmentWithDefaults() *Assignment {
	this := Assignment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Assignment) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assignment) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Assignment) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Assignment) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Assignment) GetType() AssignmentType {
	if o == nil || utils.IsNil(o.Type) {
		var ret AssignmentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assignment) GetTypeOk() (*AssignmentType, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Assignment) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AssignmentType and assigns it to the Type field.
func (o *Assignment) SetType(v AssignmentType) {
	o.Type = &v
}

func (o Assignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAssignment struct {
	value *Assignment
	isSet bool
}

func (v NullableAssignment) Get() *Assignment {
	return v.value
}

func (v *NullableAssignment) Set(val *Assignment) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignment(val *Assignment) *NullableAssignment {
	return &NullableAssignment{value: val, isSet: true}
}

func (v NullableAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


