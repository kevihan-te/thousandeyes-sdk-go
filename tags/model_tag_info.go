/*
Tags API

The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tags

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TagInfo type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TagInfo{}

// TagInfo struct for TagInfo
type TagInfo struct {
	Assignments []Assignment `json:"assignments,omitempty"`
	AccessType *AccessType `json:"accessType,omitempty"`
	// The account group ID
	Aid *int32 `json:"aid,omitempty"`
	// Tag color
	Color *string `json:"color,omitempty"`
	// Tag creation date
	CreateDate *string `json:"createDate,omitempty"`
	Icon utils.NullableString `json:"icon,omitempty"`
	// The tag's description.
	Description utils.NullableString `json:"description,omitempty"`
	// The tag ID
	Id *string `json:"id,omitempty"`
	// The tags's key
	Key *string `json:"key,omitempty"`
	LegacyId utils.NullableFloat32 `json:"legacyId,omitempty"`
	ObjectType *ObjectType `json:"objectType,omitempty"`
	// The tag's value
	Value *string `json:"value,omitempty"`
}

// NewTagInfo instantiates a new TagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagInfo() *TagInfo {
	this := TagInfo{}
	return &this
}

// NewTagInfoWithDefaults instantiates a new TagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagInfoWithDefaults() *TagInfo {
	this := TagInfo{}
	return &this
}

// GetAssignments returns the Assignments field value if set, zero value otherwise.
func (o *TagInfo) GetAssignments() []Assignment {
	if o == nil || utils.IsNil(o.Assignments) {
		var ret []Assignment
		return ret
	}
	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetAssignmentsOk() ([]Assignment, bool) {
	if o == nil || utils.IsNil(o.Assignments) {
		return nil, false
	}
	return o.Assignments, true
}

// HasAssignments returns a boolean if a field has been set.
func (o *TagInfo) HasAssignments() bool {
	if o != nil && !utils.IsNil(o.Assignments) {
		return true
	}

	return false
}

// SetAssignments gets a reference to the given []Assignment and assigns it to the Assignments field.
func (o *TagInfo) SetAssignments(v []Assignment) {
	o.Assignments = v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *TagInfo) GetAccessType() AccessType {
	if o == nil || utils.IsNil(o.AccessType) {
		var ret AccessType
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil || utils.IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *TagInfo) HasAccessType() bool {
	if o != nil && !utils.IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given AccessType and assigns it to the AccessType field.
func (o *TagInfo) SetAccessType(v AccessType) {
	o.AccessType = &v
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *TagInfo) GetAid() int32 {
	if o == nil || utils.IsNil(o.Aid) {
		var ret int32
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetAidOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *TagInfo) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given int32 and assigns it to the Aid field.
func (o *TagInfo) SetAid(v int32) {
	o.Aid = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *TagInfo) GetColor() string {
	if o == nil || utils.IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetColorOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *TagInfo) HasColor() bool {
	if o != nil && !utils.IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *TagInfo) SetColor(v string) {
	o.Color = &v
}

// GetCreateDate returns the CreateDate field value if set, zero value otherwise.
func (o *TagInfo) GetCreateDate() string {
	if o == nil || utils.IsNil(o.CreateDate) {
		var ret string
		return ret
	}
	return *o.CreateDate
}

// GetCreateDateOk returns a tuple with the CreateDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetCreateDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CreateDate) {
		return nil, false
	}
	return o.CreateDate, true
}

// HasCreateDate returns a boolean if a field has been set.
func (o *TagInfo) HasCreateDate() bool {
	if o != nil && !utils.IsNil(o.CreateDate) {
		return true
	}

	return false
}

// SetCreateDate gets a reference to the given string and assigns it to the CreateDate field.
func (o *TagInfo) SetCreateDate(v string) {
	o.CreateDate = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagInfo) GetIcon() string {
	if o == nil || utils.IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagInfo) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *TagInfo) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *TagInfo) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *TagInfo) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *TagInfo) UnsetIcon() {
	o.Icon.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagInfo) GetDescription() string {
	if o == nil || utils.IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TagInfo) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TagInfo) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TagInfo) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TagInfo) UnsetDescription() {
	o.Description.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TagInfo) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TagInfo) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TagInfo) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *TagInfo) GetKey() string {
	if o == nil || utils.IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetKeyOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *TagInfo) HasKey() bool {
	if o != nil && !utils.IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *TagInfo) SetKey(v string) {
	o.Key = &v
}

// GetLegacyId returns the LegacyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagInfo) GetLegacyId() float32 {
	if o == nil || utils.IsNil(o.LegacyId.Get()) {
		var ret float32
		return ret
	}
	return *o.LegacyId.Get()
}

// GetLegacyIdOk returns a tuple with the LegacyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagInfo) GetLegacyIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LegacyId.Get(), o.LegacyId.IsSet()
}

// HasLegacyId returns a boolean if a field has been set.
func (o *TagInfo) HasLegacyId() bool {
	if o != nil && o.LegacyId.IsSet() {
		return true
	}

	return false
}

// SetLegacyId gets a reference to the given NullableFloat32 and assigns it to the LegacyId field.
func (o *TagInfo) SetLegacyId(v float32) {
	o.LegacyId.Set(&v)
}
// SetLegacyIdNil sets the value for LegacyId to be an explicit nil
func (o *TagInfo) SetLegacyIdNil() {
	o.LegacyId.Set(nil)
}

// UnsetLegacyId ensures that no value is present for LegacyId, not even an explicit nil
func (o *TagInfo) UnsetLegacyId() {
	o.LegacyId.Unset()
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *TagInfo) GetObjectType() ObjectType {
	if o == nil || utils.IsNil(o.ObjectType) {
		var ret ObjectType
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetObjectTypeOk() (*ObjectType, bool) {
	if o == nil || utils.IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *TagInfo) HasObjectType() bool {
	if o != nil && !utils.IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given ObjectType and assigns it to the ObjectType field.
func (o *TagInfo) SetObjectType(v ObjectType) {
	o.ObjectType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagInfo) GetValue() string {
	if o == nil || utils.IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagInfo) GetValueOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagInfo) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagInfo) SetValue(v string) {
	o.Value = &v
}

func (o TagInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Assignments) {
		toSerialize["assignments"] = o.Assignments
	}
	if !utils.IsNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !utils.IsNil(o.CreateDate) {
		toSerialize["createDate"] = o.CreateDate
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if o.LegacyId.IsSet() {
		toSerialize["legacyId"] = o.LegacyId.Get()
	}
	if !utils.IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTagInfo struct {
	value *TagInfo
	isSet bool
}

func (v NullableTagInfo) Get() *TagInfo {
	return v.value
}

func (v *NullableTagInfo) Set(val *TagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagInfo(val *TagInfo) *NullableTagInfo {
	return &NullableTagInfo{value: val, isSet: true}
}

func (v NullableTagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


