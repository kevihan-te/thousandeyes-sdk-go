/*
Tags API

The ThousandEyes Tags API provides a tagging system with key/value pairs. It allows you to tag assets within the ThousandEyes platform (such as agents, tests, or alert rules) with meaningful metadata. For example: `branch:sfo`, `branch:nyc`, and `team:netops`.  This feature provides:  * Support for automation. * Powerful and flexible reports/dashboards. * Support for third-party integrations.  Things to note with the ThousandEyes Tags API:  * Tags are backwards-compatible with existing labels. * Tags are separated by Tests (CEA), Agents (CEA), Endpoint Agents, Scheduled Endpoint Tests, and Reports. A single tag can only apply to one type of target object, so each tag must specify the target type of object via a `type` field. * Tags are defined in a single table so that they can be represented using a single model - `Tag`. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tags

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Tags type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Tags{}

// Tags struct for Tags
type Tags struct {
	Tags []Tag `json:"tags,omitempty"`
	Links *SelfLinks `json:"_links,omitempty"`
}

// NewTags instantiates a new Tags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTags() *Tags {
	this := Tags{}
	return &this
}

// NewTagsWithDefaults instantiates a new Tags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagsWithDefaults() *Tags {
	this := Tags{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Tags) GetTags() []Tag {
	if o == nil || utils.IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tags) GetTagsOk() ([]Tag, bool) {
	if o == nil || utils.IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Tags) HasTags() bool {
	if o != nil && !utils.IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Tags) SetTags(v []Tag) {
	o.Tags = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Tags) GetLinks() SelfLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret SelfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tags) GetLinksOk() (*SelfLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Tags) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinks and assigns it to the Links field.
func (o *Tags) SetLinks(v SelfLinks) {
	o.Links = &v
}

func (o Tags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableTags struct {
	value *Tags
	isSet bool
}

func (v NullableTags) Get() *Tags {
	return v.value
}

func (v *NullableTags) Set(val *Tags) {
	v.value = val
	v.isSet = true
}

func (v NullableTags) IsSet() bool {
	return v.isSet
}

func (v *NullableTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTags(val *Tags) *NullableTags {
	return &NullableTags{value: val, isSet: true}
}

func (v NullableTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


