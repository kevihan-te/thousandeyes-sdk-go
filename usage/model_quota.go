/*
Usage API

 These usage endpoints define the following operations:  * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View organization usage` permission to access this endpoint.     * This operation offers visibility across all account groups within the organization.     * Users with `View organization usage` permission in multiple organizations should query the operation with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the Usage API operations for detailed usage instructions and optional parameters. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package usage

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the Quota type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Quota{}

// Quota struct for Quota
type Quota struct {
	OrganizationQuota *OrganizationQuota `json:"organizationQuota,omitempty"`
	AccountGroupQuotas []AccountGroupQuota `json:"accountGroupQuotas,omitempty"`
}

// NewQuota instantiates a new Quota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuota() *Quota {
	this := Quota{}
	return &this
}

// NewQuotaWithDefaults instantiates a new Quota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaWithDefaults() *Quota {
	this := Quota{}
	return &this
}

// GetOrganizationQuota returns the OrganizationQuota field value if set, zero value otherwise.
func (o *Quota) GetOrganizationQuota() OrganizationQuota {
	if o == nil || utils.IsNil(o.OrganizationQuota) {
		var ret OrganizationQuota
		return ret
	}
	return *o.OrganizationQuota
}

// GetOrganizationQuotaOk returns a tuple with the OrganizationQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quota) GetOrganizationQuotaOk() (*OrganizationQuota, bool) {
	if o == nil || utils.IsNil(o.OrganizationQuota) {
		return nil, false
	}
	return o.OrganizationQuota, true
}

// HasOrganizationQuota returns a boolean if a field has been set.
func (o *Quota) HasOrganizationQuota() bool {
	if o != nil && !utils.IsNil(o.OrganizationQuota) {
		return true
	}

	return false
}

// SetOrganizationQuota gets a reference to the given OrganizationQuota and assigns it to the OrganizationQuota field.
func (o *Quota) SetOrganizationQuota(v OrganizationQuota) {
	o.OrganizationQuota = &v
}

// GetAccountGroupQuotas returns the AccountGroupQuotas field value if set, zero value otherwise.
func (o *Quota) GetAccountGroupQuotas() []AccountGroupQuota {
	if o == nil || utils.IsNil(o.AccountGroupQuotas) {
		var ret []AccountGroupQuota
		return ret
	}
	return o.AccountGroupQuotas
}

// GetAccountGroupQuotasOk returns a tuple with the AccountGroupQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quota) GetAccountGroupQuotasOk() ([]AccountGroupQuota, bool) {
	if o == nil || utils.IsNil(o.AccountGroupQuotas) {
		return nil, false
	}
	return o.AccountGroupQuotas, true
}

// HasAccountGroupQuotas returns a boolean if a field has been set.
func (o *Quota) HasAccountGroupQuotas() bool {
	if o != nil && !utils.IsNil(o.AccountGroupQuotas) {
		return true
	}

	return false
}

// SetAccountGroupQuotas gets a reference to the given []AccountGroupQuota and assigns it to the AccountGroupQuotas field.
func (o *Quota) SetAccountGroupQuotas(v []AccountGroupQuota) {
	o.AccountGroupQuotas = v
}

func (o Quota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.OrganizationQuota) {
		toSerialize["organizationQuota"] = o.OrganizationQuota
	}
	if !utils.IsNil(o.AccountGroupQuotas) {
		toSerialize["accountGroupQuotas"] = o.AccountGroupQuotas
	}
	return toSerialize, nil
}

type NullableQuota struct {
	value *Quota
	isSet bool
}

func (v NullableQuota) Get() *Quota {
	return v.value
}

func (v *NullableQuota) Set(val *Quota) {
	v.value = val
	v.isSet = true
}

func (v NullableQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuota(val *Quota) *NullableQuota {
	return &NullableQuota{value: val, isSet: true}
}

func (v NullableQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


