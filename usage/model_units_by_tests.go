/*
Usage API

 These usage endpoints define the following operations:  * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View organization usage` permission to access this endpoint.     * This operation offers visibility across all account groups within the organization.     * Users with `View organization usage` permission in multiple organizations should query the operation with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the Usage API operations for detailed usage instructions and optional parameters. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package usage

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the UnitsByTests type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &UnitsByTests{}

// UnitsByTests struct for UnitsByTests
type UnitsByTests struct {
	// Unique ID of the account group owning the test that is generating units
	Aid *string `json:"aid,omitempty"`
	// Name of the account group which owns the test that is generating the units
	AccountGroupName *string `json:"accountGroupName,omitempty"`
	// Units generated by the by the enterprise agents running the test
	EnterpriseUnitsUsed *int32 `json:"enterpriseUnitsUsed,omitempty"`
	// Enterprise Units projected in the current usage period, based on units consumed to date and configuration of the test
	EnterpriseUnitsProjected *int32 `json:"enterpriseUnitsProjected,omitempty"`
	// Units generated by the by the cloud agents running the test
	CloudUnitsUsed *int32 `json:"cloudUnitsUsed,omitempty"`
	// Cloud Units projected in the current usage period, based on units consumed to date and configuration of the test
	CloudUnitsProjected *int32 `json:"cloudUnitsProjected,omitempty"`
	// Unique ID of the test generating usage
	TestId *string `json:"testId,omitempty"`
	// Name of the test generating usage
	TestName *string `json:"testName,omitempty"`
	// Type of test generating usage. Note that this is a friendly testType entry (so it shouldnâ€™t be parsed to discover the correct operation to query for configuration details).
	TestType *string `json:"testType,omitempty"`
	// Indicates whether the test is scheduled or instant
	IsInstantTest *bool `json:"isInstantTest,omitempty"`
}

// NewUnitsByTests instantiates a new UnitsByTests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitsByTests() *UnitsByTests {
	this := UnitsByTests{}
	return &this
}

// NewUnitsByTestsWithDefaults instantiates a new UnitsByTests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitsByTestsWithDefaults() *UnitsByTests {
	this := UnitsByTests{}
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *UnitsByTests) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *UnitsByTests) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *UnitsByTests) SetAid(v string) {
	o.Aid = &v
}

// GetAccountGroupName returns the AccountGroupName field value if set, zero value otherwise.
func (o *UnitsByTests) GetAccountGroupName() string {
	if o == nil || utils.IsNil(o.AccountGroupName) {
		var ret string
		return ret
	}
	return *o.AccountGroupName
}

// GetAccountGroupNameOk returns a tuple with the AccountGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetAccountGroupNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountGroupName) {
		return nil, false
	}
	return o.AccountGroupName, true
}

// HasAccountGroupName returns a boolean if a field has been set.
func (o *UnitsByTests) HasAccountGroupName() bool {
	if o != nil && !utils.IsNil(o.AccountGroupName) {
		return true
	}

	return false
}

// SetAccountGroupName gets a reference to the given string and assigns it to the AccountGroupName field.
func (o *UnitsByTests) SetAccountGroupName(v string) {
	o.AccountGroupName = &v
}

// GetEnterpriseUnitsUsed returns the EnterpriseUnitsUsed field value if set, zero value otherwise.
func (o *UnitsByTests) GetEnterpriseUnitsUsed() int32 {
	if o == nil || utils.IsNil(o.EnterpriseUnitsUsed) {
		var ret int32
		return ret
	}
	return *o.EnterpriseUnitsUsed
}

// GetEnterpriseUnitsUsedOk returns a tuple with the EnterpriseUnitsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetEnterpriseUnitsUsedOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EnterpriseUnitsUsed) {
		return nil, false
	}
	return o.EnterpriseUnitsUsed, true
}

// HasEnterpriseUnitsUsed returns a boolean if a field has been set.
func (o *UnitsByTests) HasEnterpriseUnitsUsed() bool {
	if o != nil && !utils.IsNil(o.EnterpriseUnitsUsed) {
		return true
	}

	return false
}

// SetEnterpriseUnitsUsed gets a reference to the given int32 and assigns it to the EnterpriseUnitsUsed field.
func (o *UnitsByTests) SetEnterpriseUnitsUsed(v int32) {
	o.EnterpriseUnitsUsed = &v
}

// GetEnterpriseUnitsProjected returns the EnterpriseUnitsProjected field value if set, zero value otherwise.
func (o *UnitsByTests) GetEnterpriseUnitsProjected() int32 {
	if o == nil || utils.IsNil(o.EnterpriseUnitsProjected) {
		var ret int32
		return ret
	}
	return *o.EnterpriseUnitsProjected
}

// GetEnterpriseUnitsProjectedOk returns a tuple with the EnterpriseUnitsProjected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetEnterpriseUnitsProjectedOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.EnterpriseUnitsProjected) {
		return nil, false
	}
	return o.EnterpriseUnitsProjected, true
}

// HasEnterpriseUnitsProjected returns a boolean if a field has been set.
func (o *UnitsByTests) HasEnterpriseUnitsProjected() bool {
	if o != nil && !utils.IsNil(o.EnterpriseUnitsProjected) {
		return true
	}

	return false
}

// SetEnterpriseUnitsProjected gets a reference to the given int32 and assigns it to the EnterpriseUnitsProjected field.
func (o *UnitsByTests) SetEnterpriseUnitsProjected(v int32) {
	o.EnterpriseUnitsProjected = &v
}

// GetCloudUnitsUsed returns the CloudUnitsUsed field value if set, zero value otherwise.
func (o *UnitsByTests) GetCloudUnitsUsed() int32 {
	if o == nil || utils.IsNil(o.CloudUnitsUsed) {
		var ret int32
		return ret
	}
	return *o.CloudUnitsUsed
}

// GetCloudUnitsUsedOk returns a tuple with the CloudUnitsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetCloudUnitsUsedOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.CloudUnitsUsed) {
		return nil, false
	}
	return o.CloudUnitsUsed, true
}

// HasCloudUnitsUsed returns a boolean if a field has been set.
func (o *UnitsByTests) HasCloudUnitsUsed() bool {
	if o != nil && !utils.IsNil(o.CloudUnitsUsed) {
		return true
	}

	return false
}

// SetCloudUnitsUsed gets a reference to the given int32 and assigns it to the CloudUnitsUsed field.
func (o *UnitsByTests) SetCloudUnitsUsed(v int32) {
	o.CloudUnitsUsed = &v
}

// GetCloudUnitsProjected returns the CloudUnitsProjected field value if set, zero value otherwise.
func (o *UnitsByTests) GetCloudUnitsProjected() int32 {
	if o == nil || utils.IsNil(o.CloudUnitsProjected) {
		var ret int32
		return ret
	}
	return *o.CloudUnitsProjected
}

// GetCloudUnitsProjectedOk returns a tuple with the CloudUnitsProjected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetCloudUnitsProjectedOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.CloudUnitsProjected) {
		return nil, false
	}
	return o.CloudUnitsProjected, true
}

// HasCloudUnitsProjected returns a boolean if a field has been set.
func (o *UnitsByTests) HasCloudUnitsProjected() bool {
	if o != nil && !utils.IsNil(o.CloudUnitsProjected) {
		return true
	}

	return false
}

// SetCloudUnitsProjected gets a reference to the given int32 and assigns it to the CloudUnitsProjected field.
func (o *UnitsByTests) SetCloudUnitsProjected(v int32) {
	o.CloudUnitsProjected = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *UnitsByTests) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *UnitsByTests) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *UnitsByTests) SetTestId(v string) {
	o.TestId = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *UnitsByTests) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *UnitsByTests) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *UnitsByTests) SetTestName(v string) {
	o.TestName = &v
}

// GetTestType returns the TestType field value if set, zero value otherwise.
func (o *UnitsByTests) GetTestType() string {
	if o == nil || utils.IsNil(o.TestType) {
		var ret string
		return ret
	}
	return *o.TestType
}

// GetTestTypeOk returns a tuple with the TestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetTestTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestType) {
		return nil, false
	}
	return o.TestType, true
}

// HasTestType returns a boolean if a field has been set.
func (o *UnitsByTests) HasTestType() bool {
	if o != nil && !utils.IsNil(o.TestType) {
		return true
	}

	return false
}

// SetTestType gets a reference to the given string and assigns it to the TestType field.
func (o *UnitsByTests) SetTestType(v string) {
	o.TestType = &v
}

// GetIsInstantTest returns the IsInstantTest field value if set, zero value otherwise.
func (o *UnitsByTests) GetIsInstantTest() bool {
	if o == nil || utils.IsNil(o.IsInstantTest) {
		var ret bool
		return ret
	}
	return *o.IsInstantTest
}

// GetIsInstantTestOk returns a tuple with the IsInstantTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitsByTests) GetIsInstantTestOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsInstantTest) {
		return nil, false
	}
	return o.IsInstantTest, true
}

// HasIsInstantTest returns a boolean if a field has been set.
func (o *UnitsByTests) HasIsInstantTest() bool {
	if o != nil && !utils.IsNil(o.IsInstantTest) {
		return true
	}

	return false
}

// SetIsInstantTest gets a reference to the given bool and assigns it to the IsInstantTest field.
func (o *UnitsByTests) SetIsInstantTest(v bool) {
	o.IsInstantTest = &v
}

func (o UnitsByTests) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnitsByTests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.AccountGroupName) {
		toSerialize["accountGroupName"] = o.AccountGroupName
	}
	if !utils.IsNil(o.EnterpriseUnitsUsed) {
		toSerialize["enterpriseUnitsUsed"] = o.EnterpriseUnitsUsed
	}
	if !utils.IsNil(o.EnterpriseUnitsProjected) {
		toSerialize["enterpriseUnitsProjected"] = o.EnterpriseUnitsProjected
	}
	if !utils.IsNil(o.CloudUnitsUsed) {
		toSerialize["cloudUnitsUsed"] = o.CloudUnitsUsed
	}
	if !utils.IsNil(o.CloudUnitsProjected) {
		toSerialize["cloudUnitsProjected"] = o.CloudUnitsProjected
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !utils.IsNil(o.TestType) {
		toSerialize["testType"] = o.TestType
	}
	if !utils.IsNil(o.IsInstantTest) {
		toSerialize["isInstantTest"] = o.IsInstantTest
	}
	return toSerialize, nil
}

type NullableUnitsByTests struct {
	value *UnitsByTests
	isSet bool
}

func (v NullableUnitsByTests) Get() *UnitsByTests {
	return v.value
}

func (v *NullableUnitsByTests) Set(val *UnitsByTests) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitsByTests) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitsByTests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitsByTests(val *UnitsByTests) *NullableUnitsByTests {
	return &NullableUnitsByTests{value: val, isSet: true}
}

func (v NullableUnitsByTests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitsByTests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


