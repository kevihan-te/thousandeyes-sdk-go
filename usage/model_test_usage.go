/*
Usage API

 These usage endpoints define the following operations:  * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View organization usage` permission to access this endpoint.     * This operation offers visibility across all account groups within the organization.     * Users with `View organization usage` permission in multiple organizations should query the operation with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the Usage API operations for detailed usage instructions and optional parameters. 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package usage

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the TestUsage type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &TestUsage{}

// TestUsage struct for TestUsage
type TestUsage struct {
	// Unique identifier of the account group which owns the test.
	Aid *string `json:"aid,omitempty"`
	// Name of the account group which owns the test.
	AccountGroupName *string `json:"accountGroupName,omitempty"`
	// Unique identifier of the test generating usage.
	TestId *string `json:"testId,omitempty"`
	// Name of the test generating usage.
	TestName *string `json:"testName,omitempty"`
	// The type of test that generated the usage data. Note that this parameter provides a user-friendly description of the test type and should not be parsed to determine the endpoint for querying configuration details.
	TestType *string `json:"testType,omitempty"`
	// Number of cloud units that the test has consumed in the usage period.
	CloudUnitsUsed *int64 `json:"cloudUnitsUsed,omitempty"`
	// The estimated number of cloud units that the test is expected to consume during the usage period. This estimate is determined by considering the units consumed up to the current time and the test's configuration. It's important to note that this value is updated every hour. For new tests, the `cloudUnitsProjected` parameter is absent until the projection is calculated.
	CloudUnitsProjected *int64 `json:"cloudUnitsProjected,omitempty"`
}

// NewTestUsage instantiates a new TestUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestUsage() *TestUsage {
	this := TestUsage{}
	return &this
}

// NewTestUsageWithDefaults instantiates a new TestUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestUsageWithDefaults() *TestUsage {
	this := TestUsage{}
	return &this
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *TestUsage) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *TestUsage) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *TestUsage) SetAid(v string) {
	o.Aid = &v
}

// GetAccountGroupName returns the AccountGroupName field value if set, zero value otherwise.
func (o *TestUsage) GetAccountGroupName() string {
	if o == nil || utils.IsNil(o.AccountGroupName) {
		var ret string
		return ret
	}
	return *o.AccountGroupName
}

// GetAccountGroupNameOk returns a tuple with the AccountGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetAccountGroupNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.AccountGroupName) {
		return nil, false
	}
	return o.AccountGroupName, true
}

// HasAccountGroupName returns a boolean if a field has been set.
func (o *TestUsage) HasAccountGroupName() bool {
	if o != nil && !utils.IsNil(o.AccountGroupName) {
		return true
	}

	return false
}

// SetAccountGroupName gets a reference to the given string and assigns it to the AccountGroupName field.
func (o *TestUsage) SetAccountGroupName(v string) {
	o.AccountGroupName = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *TestUsage) GetTestId() string {
	if o == nil || utils.IsNil(o.TestId) {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetTestIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestId) {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *TestUsage) HasTestId() bool {
	if o != nil && !utils.IsNil(o.TestId) {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *TestUsage) SetTestId(v string) {
	o.TestId = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *TestUsage) GetTestName() string {
	if o == nil || utils.IsNil(o.TestName) {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetTestNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestName) {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *TestUsage) HasTestName() bool {
	if o != nil && !utils.IsNil(o.TestName) {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *TestUsage) SetTestName(v string) {
	o.TestName = &v
}

// GetTestType returns the TestType field value if set, zero value otherwise.
func (o *TestUsage) GetTestType() string {
	if o == nil || utils.IsNil(o.TestType) {
		var ret string
		return ret
	}
	return *o.TestType
}

// GetTestTypeOk returns a tuple with the TestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetTestTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.TestType) {
		return nil, false
	}
	return o.TestType, true
}

// HasTestType returns a boolean if a field has been set.
func (o *TestUsage) HasTestType() bool {
	if o != nil && !utils.IsNil(o.TestType) {
		return true
	}

	return false
}

// SetTestType gets a reference to the given string and assigns it to the TestType field.
func (o *TestUsage) SetTestType(v string) {
	o.TestType = &v
}

// GetCloudUnitsUsed returns the CloudUnitsUsed field value if set, zero value otherwise.
func (o *TestUsage) GetCloudUnitsUsed() int64 {
	if o == nil || utils.IsNil(o.CloudUnitsUsed) {
		var ret int64
		return ret
	}
	return *o.CloudUnitsUsed
}

// GetCloudUnitsUsedOk returns a tuple with the CloudUnitsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetCloudUnitsUsedOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CloudUnitsUsed) {
		return nil, false
	}
	return o.CloudUnitsUsed, true
}

// HasCloudUnitsUsed returns a boolean if a field has been set.
func (o *TestUsage) HasCloudUnitsUsed() bool {
	if o != nil && !utils.IsNil(o.CloudUnitsUsed) {
		return true
	}

	return false
}

// SetCloudUnitsUsed gets a reference to the given int64 and assigns it to the CloudUnitsUsed field.
func (o *TestUsage) SetCloudUnitsUsed(v int64) {
	o.CloudUnitsUsed = &v
}

// GetCloudUnitsProjected returns the CloudUnitsProjected field value if set, zero value otherwise.
func (o *TestUsage) GetCloudUnitsProjected() int64 {
	if o == nil || utils.IsNil(o.CloudUnitsProjected) {
		var ret int64
		return ret
	}
	return *o.CloudUnitsProjected
}

// GetCloudUnitsProjectedOk returns a tuple with the CloudUnitsProjected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestUsage) GetCloudUnitsProjectedOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CloudUnitsProjected) {
		return nil, false
	}
	return o.CloudUnitsProjected, true
}

// HasCloudUnitsProjected returns a boolean if a field has been set.
func (o *TestUsage) HasCloudUnitsProjected() bool {
	if o != nil && !utils.IsNil(o.CloudUnitsProjected) {
		return true
	}

	return false
}

// SetCloudUnitsProjected gets a reference to the given int64 and assigns it to the CloudUnitsProjected field.
func (o *TestUsage) SetCloudUnitsProjected(v int64) {
	o.CloudUnitsProjected = &v
}

func (o TestUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.AccountGroupName) {
		toSerialize["accountGroupName"] = o.AccountGroupName
	}
	if !utils.IsNil(o.TestId) {
		toSerialize["testId"] = o.TestId
	}
	if !utils.IsNil(o.TestName) {
		toSerialize["testName"] = o.TestName
	}
	if !utils.IsNil(o.TestType) {
		toSerialize["testType"] = o.TestType
	}
	if !utils.IsNil(o.CloudUnitsUsed) {
		toSerialize["cloudUnitsUsed"] = o.CloudUnitsUsed
	}
	if !utils.IsNil(o.CloudUnitsProjected) {
		toSerialize["cloudUnitsProjected"] = o.CloudUnitsProjected
	}
	return toSerialize, nil
}

type NullableTestUsage struct {
	value *TestUsage
	isSet bool
}

func (v NullableTestUsage) Get() *TestUsage {
	return v.value
}

func (v *NullableTestUsage) Set(val *TestUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableTestUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableTestUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestUsage(val *TestUsage) *NullableTestUsage {
	return &NullableTestUsage{value: val, isSet: true}
}

func (v NullableTestUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


