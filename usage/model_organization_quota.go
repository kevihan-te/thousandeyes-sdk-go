/*
Usage API

 These usage endpoints define the following operations:  * **Usage**: Retrieve usage data for the specified time period (default is one month).          * Users must have the `View organization usage` permission to access this endpoint.     * This operation offers visibility across all account groups within the organization.     * Users with `View organization usage` permission in multiple organizations should query the operation with the `aid` query string parameter (see optional parameters) for each organization.  * **Quotas**: Obtain organization and account usage quotas. Additionally, users with the appropriate permissions can create, update, or delete these quotas.          * Users must have the necessary permissions to perform quota-related actions.  Refer to the Usage API operations for detailed usage instructions and optional parameters. 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package usage

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the OrganizationQuota type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &OrganizationQuota{}

// OrganizationQuota struct for OrganizationQuota
type OrganizationQuota struct {
	// Value of the quota for the given Organization.
	Value int64 `json:"value"`
	// Unique ID of the organization.
	OrgId *string `json:"orgId,omitempty"`
}

type _OrganizationQuota OrganizationQuota

// NewOrganizationQuota instantiates a new OrganizationQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationQuota(value int64) *OrganizationQuota {
	this := OrganizationQuota{}
	this.Value = value
	return &this
}

// NewOrganizationQuotaWithDefaults instantiates a new OrganizationQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationQuotaWithDefaults() *OrganizationQuota {
	this := OrganizationQuota{}
	return &this
}

// GetValue returns the Value field value
func (o *OrganizationQuota) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *OrganizationQuota) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *OrganizationQuota) SetValue(v int64) {
	o.Value = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *OrganizationQuota) GetOrgId() string {
	if o == nil || utils.IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationQuota) GetOrgIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *OrganizationQuota) HasOrgId() bool {
	if o != nil && !utils.IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *OrganizationQuota) SetOrgId(v string) {
	o.OrgId = &v
}

func (o OrganizationQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if !utils.IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	return toSerialize, nil
}

func (o *OrganizationQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationQuota := _OrganizationQuota{}

    err = json.Unmarshal(data, &varOrganizationQuota)

	if err != nil {
		return err
	}

	*o = OrganizationQuota(varOrganizationQuota)

	return err
}

type NullableOrganizationQuota struct {
	value *OrganizationQuota
	isSet bool
}

func (v NullableOrganizationQuota) Get() *OrganizationQuota {
	return v.value
}

func (v *NullableOrganizationQuota) Set(val *OrganizationQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationQuota(val *OrganizationQuota) *NullableOrganizationQuota {
	return &NullableOrganizationQuota{value: val, isSet: true}
}

func (v NullableOrganizationQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


