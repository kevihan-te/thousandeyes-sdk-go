/*
Internet Insights API

We are happy to announce the release of the Internet Insights API set. This limited release includes endpoints that:  * Make our catalog provider and Internet outage data accessible to API users. * Provide access to advanced filtering, which is part of our next-generation API efforts to allow API users to fine-tune queries across all of our APIs in a consistent manner.  Internet Insights provide visibility into core Internet infrastructure, including ISPs, DNS providers, IaaS, CDNs , and SaaS providers. It tracks the macro-level impact of Internet events on individual users and enterprise networks connecting at the edge of the Internet. These events include Outages, Routing hijacks and leaks, DDoS attacks, And political interference, among others.  Future releases of the Internet Insights API set will further unlock access to core Internet Insights functionality, unlocking potential integrations to enrich customer process flows.  For more information about Internet Insights, see the [Internet Insights](https://docs.thousandeyes.com/product-documentation/internet-insights). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package internetinsights

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiCatalogProviderFilter type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiCatalogProviderFilter{}

// ApiCatalogProviderFilter Advanced filter query used to filter the response. The provider name, location, asn can be partial names. Can filter on: - Provider name - Provider type - Region - Location - ASN - included
type ApiCatalogProviderFilter struct {
	// The name of the catalog provider.
	ProviderName *string `json:"providerName,omitempty"`
	// The type of catalog provider.
	ProviderType *string `json:"providerType,omitempty"`
	// The catalog provider region.
	Region *string `json:"region,omitempty"`
	// Location of the catalog provider.
	Location *string `json:"location,omitempty"`
	// Name of the ASN (Autonomous Systems Number) covered by providers.
	Asn *string `json:"asn,omitempty"`
	// Indicates whether the catalog provider is included in the licensed packages. true returns providers covered by licensed packages, false returns providers not covered by licensed packages.
	Included *bool `json:"included,omitempty"`
}

// NewApiCatalogProviderFilter instantiates a new ApiCatalogProviderFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCatalogProviderFilter() *ApiCatalogProviderFilter {
	this := ApiCatalogProviderFilter{}
	return &this
}

// NewApiCatalogProviderFilterWithDefaults instantiates a new ApiCatalogProviderFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCatalogProviderFilterWithDefaults() *ApiCatalogProviderFilter {
	this := ApiCatalogProviderFilter{}
	return &this
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *ApiCatalogProviderFilter) GetProviderName() string {
	if o == nil || utils.IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProviderFilter) GetProviderNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *ApiCatalogProviderFilter) HasProviderName() bool {
	if o != nil && !utils.IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *ApiCatalogProviderFilter) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetProviderType returns the ProviderType field value if set, zero value otherwise.
func (o *ApiCatalogProviderFilter) GetProviderType() string {
	if o == nil || utils.IsNil(o.ProviderType) {
		var ret string
		return ret
	}
	return *o.ProviderType
}

// GetProviderTypeOk returns a tuple with the ProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProviderFilter) GetProviderTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProviderType) {
		return nil, false
	}
	return o.ProviderType, true
}

// HasProviderType returns a boolean if a field has been set.
func (o *ApiCatalogProviderFilter) HasProviderType() bool {
	if o != nil && !utils.IsNil(o.ProviderType) {
		return true
	}

	return false
}

// SetProviderType gets a reference to the given string and assigns it to the ProviderType field.
func (o *ApiCatalogProviderFilter) SetProviderType(v string) {
	o.ProviderType = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ApiCatalogProviderFilter) GetRegion() string {
	if o == nil || utils.IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProviderFilter) GetRegionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ApiCatalogProviderFilter) HasRegion() bool {
	if o != nil && !utils.IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ApiCatalogProviderFilter) SetRegion(v string) {
	o.Region = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ApiCatalogProviderFilter) GetLocation() string {
	if o == nil || utils.IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProviderFilter) GetLocationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ApiCatalogProviderFilter) HasLocation() bool {
	if o != nil && !utils.IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ApiCatalogProviderFilter) SetLocation(v string) {
	o.Location = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *ApiCatalogProviderFilter) GetAsn() string {
	if o == nil || utils.IsNil(o.Asn) {
		var ret string
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProviderFilter) GetAsnOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *ApiCatalogProviderFilter) HasAsn() bool {
	if o != nil && !utils.IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given string and assigns it to the Asn field.
func (o *ApiCatalogProviderFilter) SetAsn(v string) {
	o.Asn = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *ApiCatalogProviderFilter) GetIncluded() bool {
	if o == nil || utils.IsNil(o.Included) {
		var ret bool
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProviderFilter) GetIncludedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Included) {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *ApiCatalogProviderFilter) HasIncluded() bool {
	if o != nil && !utils.IsNil(o.Included) {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given bool and assigns it to the Included field.
func (o *ApiCatalogProviderFilter) SetIncluded(v bool) {
	o.Included = &v
}

func (o ApiCatalogProviderFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCatalogProviderFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.ProviderName) {
		toSerialize["providerName"] = o.ProviderName
	}
	if !utils.IsNil(o.ProviderType) {
		toSerialize["providerType"] = o.ProviderType
	}
	if !utils.IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !utils.IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !utils.IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !utils.IsNil(o.Included) {
		toSerialize["included"] = o.Included
	}
	return toSerialize, nil
}

type NullableApiCatalogProviderFilter struct {
	value *ApiCatalogProviderFilter
	isSet bool
}

func (v NullableApiCatalogProviderFilter) Get() *ApiCatalogProviderFilter {
	return v.value
}

func (v *NullableApiCatalogProviderFilter) Set(val *ApiCatalogProviderFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCatalogProviderFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCatalogProviderFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCatalogProviderFilter(val *ApiCatalogProviderFilter) *NullableApiCatalogProviderFilter {
	return &NullableApiCatalogProviderFilter{value: val, isSet: true}
}

func (v NullableApiCatalogProviderFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCatalogProviderFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


