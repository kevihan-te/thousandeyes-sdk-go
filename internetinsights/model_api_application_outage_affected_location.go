/*
Internet Insights API

We are happy to announce the release of the Internet Insights API set. This limited release includes endpoints that:  * Make our catalog provider and Internet outage data accessible to API users. * Provide access to advanced filtering, which is part of our next-generation API efforts to allow API users to fine-tune queries across all of our APIs in a consistent manner.  Internet Insights provide visibility into core Internet infrastructure, including ISPs, DNS providers, IaaS, CDNs , and SaaS providers. It tracks the macro-level impact of Internet events on individual users and enterprise networks connecting at the edge of the Internet. These events include Outages, Routing hijacks and leaks, DDoS attacks, And political interference, among others.  Future releases of the Internet Insights API set will further unlock access to core Internet Insights functionality, unlocking potential integrations to enrich customer process flows.  For more information about Internet Insights, see the [Internet Insights](https://docs.thousandeyes.com/product-documentation/internet-insights). 

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package internetinsights

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiApplicationOutageAffectedLocation type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiApplicationOutageAffectedLocation{}

// ApiApplicationOutageAffectedLocation struct for ApiApplicationOutageAffectedLocation
type ApiApplicationOutageAffectedLocation struct {
	// The affected location.
	Location *string `json:"location,omitempty"`
	// The number of affected servers in this location.
	AffectedServers []ApiApplicationOutageAffectedServer `json:"affectedServers,omitempty"`
}

// NewApiApplicationOutageAffectedLocation instantiates a new ApiApplicationOutageAffectedLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiApplicationOutageAffectedLocation() *ApiApplicationOutageAffectedLocation {
	this := ApiApplicationOutageAffectedLocation{}
	return &this
}

// NewApiApplicationOutageAffectedLocationWithDefaults instantiates a new ApiApplicationOutageAffectedLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiApplicationOutageAffectedLocationWithDefaults() *ApiApplicationOutageAffectedLocation {
	this := ApiApplicationOutageAffectedLocation{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ApiApplicationOutageAffectedLocation) GetLocation() string {
	if o == nil || utils.IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiApplicationOutageAffectedLocation) GetLocationOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ApiApplicationOutageAffectedLocation) HasLocation() bool {
	if o != nil && !utils.IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ApiApplicationOutageAffectedLocation) SetLocation(v string) {
	o.Location = &v
}

// GetAffectedServers returns the AffectedServers field value if set, zero value otherwise.
func (o *ApiApplicationOutageAffectedLocation) GetAffectedServers() []ApiApplicationOutageAffectedServer {
	if o == nil || utils.IsNil(o.AffectedServers) {
		var ret []ApiApplicationOutageAffectedServer
		return ret
	}
	return o.AffectedServers
}

// GetAffectedServersOk returns a tuple with the AffectedServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiApplicationOutageAffectedLocation) GetAffectedServersOk() ([]ApiApplicationOutageAffectedServer, bool) {
	if o == nil || utils.IsNil(o.AffectedServers) {
		return nil, false
	}
	return o.AffectedServers, true
}

// HasAffectedServers returns a boolean if a field has been set.
func (o *ApiApplicationOutageAffectedLocation) HasAffectedServers() bool {
	if o != nil && !utils.IsNil(o.AffectedServers) {
		return true
	}

	return false
}

// SetAffectedServers gets a reference to the given []ApiApplicationOutageAffectedServer and assigns it to the AffectedServers field.
func (o *ApiApplicationOutageAffectedLocation) SetAffectedServers(v []ApiApplicationOutageAffectedServer) {
	o.AffectedServers = v
}

func (o ApiApplicationOutageAffectedLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiApplicationOutageAffectedLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !utils.IsNil(o.AffectedServers) {
		toSerialize["affectedServers"] = o.AffectedServers
	}
	return toSerialize, nil
}

type NullableApiApplicationOutageAffectedLocation struct {
	value *ApiApplicationOutageAffectedLocation
	isSet bool
}

func (v NullableApiApplicationOutageAffectedLocation) Get() *ApiApplicationOutageAffectedLocation {
	return v.value
}

func (v *NullableApiApplicationOutageAffectedLocation) Set(val *ApiApplicationOutageAffectedLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableApiApplicationOutageAffectedLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableApiApplicationOutageAffectedLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiApplicationOutageAffectedLocation(val *ApiApplicationOutageAffectedLocation) *NullableApiApplicationOutageAffectedLocation {
	return &NullableApiApplicationOutageAffectedLocation{value: val, isSet: true}
}

func (v NullableApiApplicationOutageAffectedLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiApplicationOutageAffectedLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


