/*
Internet Insights API

We are happy to announce the release of the Internet Insights API set. This limited release includes endpoints that:  * Make our catalog provider and Internet outage data accessible to API users. * Provide access to advanced filtering, which is part of our next-generation API efforts to allow API users to fine-tune queries across all of our APIs in a consistent manner.  Internet Insights provide visibility into core Internet infrastructure, including ISPs, DNS providers, IaaS, CDNs , and SaaS providers. It tracks the macro-level impact of Internet events on individual users and enterprise networks connecting at the edge of the Internet. These events include Outages, Routing hijacks and leaks, DDoS attacks, And political interference, among others.  Future releases of the Internet Insights API set will further unlock access to core Internet Insights functionality, unlocking potential integrations to enrich customer process flows.  For more information about Internet Insights, see the [Internet Insights](https://docs.thousandeyes.com/product-documentation/internet-insights). 

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package internetinsights

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiCatalogProvider type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiCatalogProvider{}

// ApiCatalogProvider Catalog provider
type ApiCatalogProvider struct {
	// The catalog provider ID.
	Id *string `json:"id,omitempty"`
	// The name of the catalog provider.
	ProviderName *string `json:"providerName,omitempty"`
	// The type of catalog provider.
	ProviderType *string `json:"providerType,omitempty"`
	// The catalog provider region.
	Region *string `json:"region,omitempty"`
	// The type of data produced by the provider.
	DataType *string `json:"dataType,omitempty"`
	// The number of ASN's covered by the provider.
	AsnsCount *int32 `json:"asnsCount,omitempty"`
	// The number of countries covered by the provider.
	CountriesCount *int32 `json:"countriesCount,omitempty"`
	// The number of locations covered by the provider.
	LocationsCount *int32 `json:"locationsCount,omitempty"`
	// The number of interfaces covered by the provider.
	InterfacesCount *int32 `json:"interfacesCount,omitempty"`
	// Indicates whether the catalog provider is included in the licensed packages.
	Included *bool `json:"included,omitempty"`
	Links *SelfLinks `json:"_links,omitempty"`
}

// NewApiCatalogProvider instantiates a new ApiCatalogProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiCatalogProvider() *ApiCatalogProvider {
	this := ApiCatalogProvider{}
	return &this
}

// NewApiCatalogProviderWithDefaults instantiates a new ApiCatalogProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiCatalogProviderWithDefaults() *ApiCatalogProvider {
	this := ApiCatalogProvider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiCatalogProvider) SetId(v string) {
	o.Id = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetProviderName() string {
	if o == nil || utils.IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetProviderNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasProviderName() bool {
	if o != nil && !utils.IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *ApiCatalogProvider) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetProviderType returns the ProviderType field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetProviderType() string {
	if o == nil || utils.IsNil(o.ProviderType) {
		var ret string
		return ret
	}
	return *o.ProviderType
}

// GetProviderTypeOk returns a tuple with the ProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetProviderTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ProviderType) {
		return nil, false
	}
	return o.ProviderType, true
}

// HasProviderType returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasProviderType() bool {
	if o != nil && !utils.IsNil(o.ProviderType) {
		return true
	}

	return false
}

// SetProviderType gets a reference to the given string and assigns it to the ProviderType field.
func (o *ApiCatalogProvider) SetProviderType(v string) {
	o.ProviderType = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetRegion() string {
	if o == nil || utils.IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetRegionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasRegion() bool {
	if o != nil && !utils.IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ApiCatalogProvider) SetRegion(v string) {
	o.Region = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetDataType() string {
	if o == nil || utils.IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetDataTypeOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasDataType() bool {
	if o != nil && !utils.IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ApiCatalogProvider) SetDataType(v string) {
	o.DataType = &v
}

// GetAsnsCount returns the AsnsCount field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetAsnsCount() int32 {
	if o == nil || utils.IsNil(o.AsnsCount) {
		var ret int32
		return ret
	}
	return *o.AsnsCount
}

// GetAsnsCountOk returns a tuple with the AsnsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetAsnsCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.AsnsCount) {
		return nil, false
	}
	return o.AsnsCount, true
}

// HasAsnsCount returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasAsnsCount() bool {
	if o != nil && !utils.IsNil(o.AsnsCount) {
		return true
	}

	return false
}

// SetAsnsCount gets a reference to the given int32 and assigns it to the AsnsCount field.
func (o *ApiCatalogProvider) SetAsnsCount(v int32) {
	o.AsnsCount = &v
}

// GetCountriesCount returns the CountriesCount field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetCountriesCount() int32 {
	if o == nil || utils.IsNil(o.CountriesCount) {
		var ret int32
		return ret
	}
	return *o.CountriesCount
}

// GetCountriesCountOk returns a tuple with the CountriesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetCountriesCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.CountriesCount) {
		return nil, false
	}
	return o.CountriesCount, true
}

// HasCountriesCount returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasCountriesCount() bool {
	if o != nil && !utils.IsNil(o.CountriesCount) {
		return true
	}

	return false
}

// SetCountriesCount gets a reference to the given int32 and assigns it to the CountriesCount field.
func (o *ApiCatalogProvider) SetCountriesCount(v int32) {
	o.CountriesCount = &v
}

// GetLocationsCount returns the LocationsCount field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetLocationsCount() int32 {
	if o == nil || utils.IsNil(o.LocationsCount) {
		var ret int32
		return ret
	}
	return *o.LocationsCount
}

// GetLocationsCountOk returns a tuple with the LocationsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetLocationsCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.LocationsCount) {
		return nil, false
	}
	return o.LocationsCount, true
}

// HasLocationsCount returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasLocationsCount() bool {
	if o != nil && !utils.IsNil(o.LocationsCount) {
		return true
	}

	return false
}

// SetLocationsCount gets a reference to the given int32 and assigns it to the LocationsCount field.
func (o *ApiCatalogProvider) SetLocationsCount(v int32) {
	o.LocationsCount = &v
}

// GetInterfacesCount returns the InterfacesCount field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetInterfacesCount() int32 {
	if o == nil || utils.IsNil(o.InterfacesCount) {
		var ret int32
		return ret
	}
	return *o.InterfacesCount
}

// GetInterfacesCountOk returns a tuple with the InterfacesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetInterfacesCountOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.InterfacesCount) {
		return nil, false
	}
	return o.InterfacesCount, true
}

// HasInterfacesCount returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasInterfacesCount() bool {
	if o != nil && !utils.IsNil(o.InterfacesCount) {
		return true
	}

	return false
}

// SetInterfacesCount gets a reference to the given int32 and assigns it to the InterfacesCount field.
func (o *ApiCatalogProvider) SetInterfacesCount(v int32) {
	o.InterfacesCount = &v
}

// GetIncluded returns the Included field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetIncluded() bool {
	if o == nil || utils.IsNil(o.Included) {
		var ret bool
		return ret
	}
	return *o.Included
}

// GetIncludedOk returns a tuple with the Included field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetIncludedOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.Included) {
		return nil, false
	}
	return o.Included, true
}

// HasIncluded returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasIncluded() bool {
	if o != nil && !utils.IsNil(o.Included) {
		return true
	}

	return false
}

// SetIncluded gets a reference to the given bool and assigns it to the Included field.
func (o *ApiCatalogProvider) SetIncluded(v bool) {
	o.Included = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApiCatalogProvider) GetLinks() SelfLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret SelfLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiCatalogProvider) GetLinksOk() (*SelfLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApiCatalogProvider) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given SelfLinks and assigns it to the Links field.
func (o *ApiCatalogProvider) SetLinks(v SelfLinks) {
	o.Links = &v
}

func (o ApiCatalogProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiCatalogProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.ProviderName) {
		toSerialize["providerName"] = o.ProviderName
	}
	if !utils.IsNil(o.ProviderType) {
		toSerialize["providerType"] = o.ProviderType
	}
	if !utils.IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !utils.IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !utils.IsNil(o.AsnsCount) {
		toSerialize["asnsCount"] = o.AsnsCount
	}
	if !utils.IsNil(o.CountriesCount) {
		toSerialize["countriesCount"] = o.CountriesCount
	}
	if !utils.IsNil(o.LocationsCount) {
		toSerialize["locationsCount"] = o.LocationsCount
	}
	if !utils.IsNil(o.InterfacesCount) {
		toSerialize["interfacesCount"] = o.InterfacesCount
	}
	if !utils.IsNil(o.Included) {
		toSerialize["included"] = o.Included
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableApiCatalogProvider struct {
	value *ApiCatalogProvider
	isSet bool
}

func (v NullableApiCatalogProvider) Get() *ApiCatalogProvider {
	return v.value
}

func (v *NullableApiCatalogProvider) Set(val *ApiCatalogProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCatalogProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCatalogProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCatalogProvider(val *ApiCatalogProvider) *NullableApiCatalogProvider {
	return &NullableApiCatalogProvider{value: val, isSet: true}
}

func (v NullableApiCatalogProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCatalogProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


