/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the ApiDashboardAsw type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiDashboardAsw{}

// ApiDashboardAsw Alert suppression window shown in a widget.
type ApiDashboardAsw struct {
	// Identifier of the alert suppression window.
	Id *string `json:"id,omitempty"`
	// Name of the alert suppression window.
	Name *string `json:"name,omitempty"`
	TestIds []string `json:"testIds,omitempty"`
	StartTimes []time.Time `json:"startTimes,omitempty"`
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
	Repeat *AswRepeat `json:"repeat,omitempty"`
	RepeatEvery *int32 `json:"repeatEvery,omitempty"`
	RepeatUnit *AswRepeatUnit `json:"repeatUnit,omitempty"`
}

// NewApiDashboardAsw instantiates a new ApiDashboardAsw object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDashboardAsw() *ApiDashboardAsw {
	this := ApiDashboardAsw{}
	return &this
}

// NewApiDashboardAswWithDefaults instantiates a new ApiDashboardAsw object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDashboardAswWithDefaults() *ApiDashboardAsw {
	this := ApiDashboardAsw{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetId() string {
	if o == nil || utils.IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasId() bool {
	if o != nil && !utils.IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiDashboardAsw) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetName() string {
	if o == nil || utils.IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetNameOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasName() bool {
	if o != nil && !utils.IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiDashboardAsw) SetName(v string) {
	o.Name = &v
}

// GetTestIds returns the TestIds field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetTestIds() []string {
	if o == nil || utils.IsNil(o.TestIds) {
		var ret []string
		return ret
	}
	return o.TestIds
}

// GetTestIdsOk returns a tuple with the TestIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetTestIdsOk() ([]string, bool) {
	if o == nil || utils.IsNil(o.TestIds) {
		return nil, false
	}
	return o.TestIds, true
}

// HasTestIds returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasTestIds() bool {
	if o != nil && !utils.IsNil(o.TestIds) {
		return true
	}

	return false
}

// SetTestIds gets a reference to the given []string and assigns it to the TestIds field.
func (o *ApiDashboardAsw) SetTestIds(v []string) {
	o.TestIds = v
}

// GetStartTimes returns the StartTimes field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetStartTimes() []time.Time {
	if o == nil || utils.IsNil(o.StartTimes) {
		var ret []time.Time
		return ret
	}
	return o.StartTimes
}

// GetStartTimesOk returns a tuple with the StartTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetStartTimesOk() ([]time.Time, bool) {
	if o == nil || utils.IsNil(o.StartTimes) {
		return nil, false
	}
	return o.StartTimes, true
}

// HasStartTimes returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasStartTimes() bool {
	if o != nil && !utils.IsNil(o.StartTimes) {
		return true
	}

	return false
}

// SetStartTimes gets a reference to the given []time.Time and assigns it to the StartTimes field.
func (o *ApiDashboardAsw) SetStartTimes(v []time.Time) {
	o.StartTimes = v
}

// GetDurationInSeconds returns the DurationInSeconds field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetDurationInSeconds() int64 {
	if o == nil || utils.IsNil(o.DurationInSeconds) {
		var ret int64
		return ret
	}
	return *o.DurationInSeconds
}

// GetDurationInSecondsOk returns a tuple with the DurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetDurationInSecondsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.DurationInSeconds) {
		return nil, false
	}
	return o.DurationInSeconds, true
}

// HasDurationInSeconds returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasDurationInSeconds() bool {
	if o != nil && !utils.IsNil(o.DurationInSeconds) {
		return true
	}

	return false
}

// SetDurationInSeconds gets a reference to the given int64 and assigns it to the DurationInSeconds field.
func (o *ApiDashboardAsw) SetDurationInSeconds(v int64) {
	o.DurationInSeconds = &v
}

// GetRepeat returns the Repeat field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetRepeat() AswRepeat {
	if o == nil || utils.IsNil(o.Repeat) {
		var ret AswRepeat
		return ret
	}
	return *o.Repeat
}

// GetRepeatOk returns a tuple with the Repeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetRepeatOk() (*AswRepeat, bool) {
	if o == nil || utils.IsNil(o.Repeat) {
		return nil, false
	}
	return o.Repeat, true
}

// HasRepeat returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasRepeat() bool {
	if o != nil && !utils.IsNil(o.Repeat) {
		return true
	}

	return false
}

// SetRepeat gets a reference to the given AswRepeat and assigns it to the Repeat field.
func (o *ApiDashboardAsw) SetRepeat(v AswRepeat) {
	o.Repeat = &v
}

// GetRepeatEvery returns the RepeatEvery field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetRepeatEvery() int32 {
	if o == nil || utils.IsNil(o.RepeatEvery) {
		var ret int32
		return ret
	}
	return *o.RepeatEvery
}

// GetRepeatEveryOk returns a tuple with the RepeatEvery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetRepeatEveryOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.RepeatEvery) {
		return nil, false
	}
	return o.RepeatEvery, true
}

// HasRepeatEvery returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasRepeatEvery() bool {
	if o != nil && !utils.IsNil(o.RepeatEvery) {
		return true
	}

	return false
}

// SetRepeatEvery gets a reference to the given int32 and assigns it to the RepeatEvery field.
func (o *ApiDashboardAsw) SetRepeatEvery(v int32) {
	o.RepeatEvery = &v
}

// GetRepeatUnit returns the RepeatUnit field value if set, zero value otherwise.
func (o *ApiDashboardAsw) GetRepeatUnit() AswRepeatUnit {
	if o == nil || utils.IsNil(o.RepeatUnit) {
		var ret AswRepeatUnit
		return ret
	}
	return *o.RepeatUnit
}

// GetRepeatUnitOk returns a tuple with the RepeatUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiDashboardAsw) GetRepeatUnitOk() (*AswRepeatUnit, bool) {
	if o == nil || utils.IsNil(o.RepeatUnit) {
		return nil, false
	}
	return o.RepeatUnit, true
}

// HasRepeatUnit returns a boolean if a field has been set.
func (o *ApiDashboardAsw) HasRepeatUnit() bool {
	if o != nil && !utils.IsNil(o.RepeatUnit) {
		return true
	}

	return false
}

// SetRepeatUnit gets a reference to the given AswRepeatUnit and assigns it to the RepeatUnit field.
func (o *ApiDashboardAsw) SetRepeatUnit(v AswRepeatUnit) {
	o.RepeatUnit = &v
}

func (o ApiDashboardAsw) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDashboardAsw) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !utils.IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !utils.IsNil(o.TestIds) {
		toSerialize["testIds"] = o.TestIds
	}
	if !utils.IsNil(o.StartTimes) {
		toSerialize["startTimes"] = o.StartTimes
	}
	if !utils.IsNil(o.DurationInSeconds) {
		toSerialize["durationInSeconds"] = o.DurationInSeconds
	}
	if !utils.IsNil(o.Repeat) {
		toSerialize["repeat"] = o.Repeat
	}
	if !utils.IsNil(o.RepeatEvery) {
		toSerialize["repeatEvery"] = o.RepeatEvery
	}
	if !utils.IsNil(o.RepeatUnit) {
		toSerialize["repeatUnit"] = o.RepeatUnit
	}
	return toSerialize, nil
}

type NullableApiDashboardAsw struct {
	value *ApiDashboardAsw
	isSet bool
}

func (v NullableApiDashboardAsw) Get() *ApiDashboardAsw {
	return v.value
}

func (v *NullableApiDashboardAsw) Set(val *ApiDashboardAsw) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDashboardAsw) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDashboardAsw) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDashboardAsw(val *ApiDashboardAsw) *NullableApiDashboardAsw {
	return &NullableApiDashboardAsw{value: val, isSet: true}
}

func (v NullableApiDashboardAsw) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDashboardAsw) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


