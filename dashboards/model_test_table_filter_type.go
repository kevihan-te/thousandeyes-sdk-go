/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// TestTableFilterType the model 'TestTableFilterType'
type TestTableFilterType string

// List of TestTableFilterType
const (
	TESTTABLEFILTERTYPE_ALL TestTableFilterType = "all"
	TESTTABLEFILTERTYPE_ANY TestTableFilterType = "any"
)

// All allowed values of TestTableFilterType enum
var AllowedTestTableFilterTypeEnumValues = []TestTableFilterType{
	"all",
	"any",
}

func (v *TestTableFilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestTableFilterType(value)
	for _, existing := range AllowedTestTableFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestTableFilterType", value)
}

// NewTestTableFilterTypeFromValue returns a pointer to a valid TestTableFilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestTableFilterTypeFromValue(v string) (*TestTableFilterType, error) {
	ev := TestTableFilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestTableFilterType: valid values are %v", v, AllowedTestTableFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestTableFilterType) IsValid() bool {
	for _, existing := range AllowedTestTableFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestTableFilterType value
func (v TestTableFilterType) Ptr() *TestTableFilterType {
	return &v
}

type NullableTestTableFilterType struct {
	value *TestTableFilterType
	isSet bool
}

func (v NullableTestTableFilterType) Get() *TestTableFilterType {
	return v.value
}

func (v *NullableTestTableFilterType) Set(val *TestTableFilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableTestTableFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableTestTableFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestTableFilterType(val *TestTableFilterType) *NullableTestTableFilterType {
	return &NullableTestTableFilterType{value: val, isSet: true}
}

func (v NullableTestTableFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestTableFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

