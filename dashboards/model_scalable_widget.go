/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ScalableWidget type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ScalableWidget{}

// ScalableWidget struct for ScalableWidget
type ScalableWidget struct {
	// Minimum scale configured in the widget.
	MinScale *float32 `json:"minScale,omitempty"`
	// Maximum scale configured in the widget.
	MaxScale *float32 `json:"maxScale,omitempty"`
	Unit *ApiWidgetFixedYScalePrefix `json:"unit,omitempty"`
}

// NewScalableWidget instantiates a new ScalableWidget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScalableWidget() *ScalableWidget {
	this := ScalableWidget{}
	return &this
}

// NewScalableWidgetWithDefaults instantiates a new ScalableWidget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScalableWidgetWithDefaults() *ScalableWidget {
	this := ScalableWidget{}
	return &this
}

// GetMinScale returns the MinScale field value if set, zero value otherwise.
func (o *ScalableWidget) GetMinScale() float32 {
	if o == nil || utils.IsNil(o.MinScale) {
		var ret float32
		return ret
	}
	return *o.MinScale
}

// GetMinScaleOk returns a tuple with the MinScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalableWidget) GetMinScaleOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.MinScale) {
		return nil, false
	}
	return o.MinScale, true
}

// HasMinScale returns a boolean if a field has been set.
func (o *ScalableWidget) HasMinScale() bool {
	if o != nil && !utils.IsNil(o.MinScale) {
		return true
	}

	return false
}

// SetMinScale gets a reference to the given float32 and assigns it to the MinScale field.
func (o *ScalableWidget) SetMinScale(v float32) {
	o.MinScale = &v
}

// GetMaxScale returns the MaxScale field value if set, zero value otherwise.
func (o *ScalableWidget) GetMaxScale() float32 {
	if o == nil || utils.IsNil(o.MaxScale) {
		var ret float32
		return ret
	}
	return *o.MaxScale
}

// GetMaxScaleOk returns a tuple with the MaxScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalableWidget) GetMaxScaleOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.MaxScale) {
		return nil, false
	}
	return o.MaxScale, true
}

// HasMaxScale returns a boolean if a field has been set.
func (o *ScalableWidget) HasMaxScale() bool {
	if o != nil && !utils.IsNil(o.MaxScale) {
		return true
	}

	return false
}

// SetMaxScale gets a reference to the given float32 and assigns it to the MaxScale field.
func (o *ScalableWidget) SetMaxScale(v float32) {
	o.MaxScale = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ScalableWidget) GetUnit() ApiWidgetFixedYScalePrefix {
	if o == nil || utils.IsNil(o.Unit) {
		var ret ApiWidgetFixedYScalePrefix
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScalableWidget) GetUnitOk() (*ApiWidgetFixedYScalePrefix, bool) {
	if o == nil || utils.IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ScalableWidget) HasUnit() bool {
	if o != nil && !utils.IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given ApiWidgetFixedYScalePrefix and assigns it to the Unit field.
func (o *ScalableWidget) SetUnit(v ApiWidgetFixedYScalePrefix) {
	o.Unit = &v
}

func (o ScalableWidget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScalableWidget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.MinScale) {
		toSerialize["minScale"] = o.MinScale
	}
	if !utils.IsNil(o.MaxScale) {
		toSerialize["maxScale"] = o.MaxScale
	}
	if !utils.IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableScalableWidget struct {
	value *ScalableWidget
	isSet bool
}

func (v NullableScalableWidget) Get() *ScalableWidget {
	return v.value
}

func (v *NullableScalableWidget) Set(val *ScalableWidget) {
	v.value = val
	v.isSet = true
}

func (v NullableScalableWidget) IsSet() bool {
	return v.isSet
}

func (v *NullableScalableWidget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalableWidget(val *ScalableWidget) *NullableScalableWidget {
	return &NullableScalableWidget{value: val, isSet: true}
}

func (v NullableScalableWidget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalableWidget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


