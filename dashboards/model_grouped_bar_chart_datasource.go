/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// GroupedBarChartDatasource Datasource of the grouped bar chart widget.
type GroupedBarChartDatasource string

// List of GroupedBarChartDatasource
const (
	GROUPEDBARCHARTDATASOURCE_ALERTS GroupedBarChartDatasource = "ALERTS"
	GROUPEDBARCHARTDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS GroupedBarChartDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	GROUPEDBARCHARTDATASOURCE_DEVICES GroupedBarChartDatasource = "DEVICES"
	GROUPEDBARCHARTDATASOURCE_ENDPOINT_AGENTS GroupedBarChartDatasource = "ENDPOINT_AGENTS"
	GROUPEDBARCHARTDATASOURCE_ENDPOINT_AST_TEST GroupedBarChartDatasource = "ENDPOINT_AST_TEST"
	GROUPEDBARCHARTDATASOURCE_ENDPOINT_BROWSER_SESSION GroupedBarChartDatasource = "ENDPOINT_BROWSER_SESSION"
	GROUPEDBARCHARTDATASOURCE_ENDPOINT_LOCAL_NETWORK GroupedBarChartDatasource = "ENDPOINT_LOCAL_NETWORK"
	GROUPEDBARCHARTDATASOURCE_ENDPOINT_LOCAL_NETWORK_WIRELESS GroupedBarChartDatasource = "ENDPOINT_LOCAL_NETWORK_WIRELESS"
	GROUPEDBARCHARTDATASOURCE_ENDPOINT_SCHEDULED_TEST GroupedBarChartDatasource = "ENDPOINT_SCHEDULED_TEST"
	GROUPEDBARCHARTDATASOURCE_INTERNET_INSIGHTS GroupedBarChartDatasource = "INTERNET_INSIGHTS"
	GROUPEDBARCHARTDATASOURCE_ROUTING GroupedBarChartDatasource = "ROUTING"
	GROUPEDBARCHARTDATASOURCE_CLOUD_NATIVE_MONITORING GroupedBarChartDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of GroupedBarChartDatasource enum
var AllowedGroupedBarChartDatasourceEnumValues = []GroupedBarChartDatasource{
	"ALERTS",
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"DEVICES",
	"ENDPOINT_AGENTS",
	"ENDPOINT_AST_TEST",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_LOCAL_NETWORK",
	"ENDPOINT_LOCAL_NETWORK_WIRELESS",
	"ENDPOINT_SCHEDULED_TEST",
	"INTERNET_INSIGHTS",
	"ROUTING",
	"CLOUD_NATIVE_MONITORING",
}

func (v *GroupedBarChartDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupedBarChartDatasource(value)
	for _, existing := range AllowedGroupedBarChartDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupedBarChartDatasource", value)
}

// NewGroupedBarChartDatasourceFromValue returns a pointer to a valid GroupedBarChartDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupedBarChartDatasourceFromValue(v string) (*GroupedBarChartDatasource, error) {
	ev := GroupedBarChartDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupedBarChartDatasource: valid values are %v", v, AllowedGroupedBarChartDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupedBarChartDatasource) IsValid() bool {
	for _, existing := range AllowedGroupedBarChartDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupedBarChartDatasource value
func (v GroupedBarChartDatasource) Ptr() *GroupedBarChartDatasource {
	return &v
}

type NullableGroupedBarChartDatasource struct {
	value *GroupedBarChartDatasource
	isSet bool
}

func (v NullableGroupedBarChartDatasource) Get() *GroupedBarChartDatasource {
	return v.value
}

func (v *NullableGroupedBarChartDatasource) Set(val *GroupedBarChartDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupedBarChartDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupedBarChartDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupedBarChartDatasource(val *GroupedBarChartDatasource) *NullableGroupedBarChartDatasource {
	return &NullableGroupedBarChartDatasource{value: val, isSet: true}
}

func (v NullableGroupedBarChartDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupedBarChartDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

