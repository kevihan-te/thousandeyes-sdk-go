/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// BoxAndWhiskersDatasource Datasource of the box and whiskers widget.
type BoxAndWhiskersDatasource string

// List of BoxAndWhiskersDatasource
const (
	BOXANDWHISKERSDATASOURCE_ALERTS BoxAndWhiskersDatasource = "ALERTS"
	BOXANDWHISKERSDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS BoxAndWhiskersDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	BOXANDWHISKERSDATASOURCE_DEVICES BoxAndWhiskersDatasource = "DEVICES"
	BOXANDWHISKERSDATASOURCE_ENDPOINT_AGENTS BoxAndWhiskersDatasource = "ENDPOINT_AGENTS"
	BOXANDWHISKERSDATASOURCE_ENDPOINT_AST_TEST BoxAndWhiskersDatasource = "ENDPOINT_AST_TEST"
	BOXANDWHISKERSDATASOURCE_ENDPOINT_BROWSER_SESSION BoxAndWhiskersDatasource = "ENDPOINT_BROWSER_SESSION"
	BOXANDWHISKERSDATASOURCE_ENDPOINT_LOCAL_NETWORK BoxAndWhiskersDatasource = "ENDPOINT_LOCAL_NETWORK"
	BOXANDWHISKERSDATASOURCE_ENDPOINT_LOCAL_NETWORK_WIRELESS BoxAndWhiskersDatasource = "ENDPOINT_LOCAL_NETWORK_WIRELESS"
	BOXANDWHISKERSDATASOURCE_ENDPOINT_SCHEDULED_TEST BoxAndWhiskersDatasource = "ENDPOINT_SCHEDULED_TEST"
	BOXANDWHISKERSDATASOURCE_INTERNET_INSIGHTS BoxAndWhiskersDatasource = "INTERNET_INSIGHTS"
	BOXANDWHISKERSDATASOURCE_ROUTING BoxAndWhiskersDatasource = "ROUTING"
	BOXANDWHISKERSDATASOURCE_CLOUD_NATIVE_MONITORING BoxAndWhiskersDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of BoxAndWhiskersDatasource enum
var AllowedBoxAndWhiskersDatasourceEnumValues = []BoxAndWhiskersDatasource{
	"ALERTS",
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"DEVICES",
	"ENDPOINT_AGENTS",
	"ENDPOINT_AST_TEST",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_LOCAL_NETWORK",
	"ENDPOINT_LOCAL_NETWORK_WIRELESS",
	"ENDPOINT_SCHEDULED_TEST",
	"INTERNET_INSIGHTS",
	"ROUTING",
	"CLOUD_NATIVE_MONITORING",
}

func (v *BoxAndWhiskersDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BoxAndWhiskersDatasource(value)
	for _, existing := range AllowedBoxAndWhiskersDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BoxAndWhiskersDatasource", value)
}

// NewBoxAndWhiskersDatasourceFromValue returns a pointer to a valid BoxAndWhiskersDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBoxAndWhiskersDatasourceFromValue(v string) (*BoxAndWhiskersDatasource, error) {
	ev := BoxAndWhiskersDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BoxAndWhiskersDatasource: valid values are %v", v, AllowedBoxAndWhiskersDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BoxAndWhiskersDatasource) IsValid() bool {
	for _, existing := range AllowedBoxAndWhiskersDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BoxAndWhiskersDatasource value
func (v BoxAndWhiskersDatasource) Ptr() *BoxAndWhiskersDatasource {
	return &v
}

type NullableBoxAndWhiskersDatasource struct {
	value *BoxAndWhiskersDatasource
	isSet bool
}

func (v NullableBoxAndWhiskersDatasource) Get() *BoxAndWhiskersDatasource {
	return v.value
}

func (v *NullableBoxAndWhiskersDatasource) Set(val *BoxAndWhiskersDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableBoxAndWhiskersDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableBoxAndWhiskersDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoxAndWhiskersDatasource(val *BoxAndWhiskersDatasource) *NullableBoxAndWhiskersDatasource {
	return &NullableBoxAndWhiskersDatasource{value: val, isSet: true}
}

func (v NullableBoxAndWhiskersDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoxAndWhiskersDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

