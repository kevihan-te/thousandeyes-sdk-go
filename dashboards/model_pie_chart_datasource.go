/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// PieChartDatasource Datasource of the pie chart widget.
type PieChartDatasource string

// List of PieChartDatasource
const (
	PIECHARTDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS PieChartDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	PIECHARTDATASOURCE_ENDPOINT_AGENTS PieChartDatasource = "ENDPOINT_AGENTS"
	PIECHARTDATASOURCE_ENDPOINT_BROWSER_SESSION PieChartDatasource = "ENDPOINT_BROWSER_SESSION"
	PIECHARTDATASOURCE_ENDPOINT_SCHEDULED_TEST PieChartDatasource = "ENDPOINT_SCHEDULED_TEST"
	PIECHARTDATASOURCE_CLOUD_NATIVE_MONITORING PieChartDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of PieChartDatasource enum
var AllowedPieChartDatasourceEnumValues = []PieChartDatasource{
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"ENDPOINT_AGENTS",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_SCHEDULED_TEST",
	"CLOUD_NATIVE_MONITORING",
}

func (v *PieChartDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PieChartDatasource(value)
	for _, existing := range AllowedPieChartDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PieChartDatasource", value)
}

// NewPieChartDatasourceFromValue returns a pointer to a valid PieChartDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPieChartDatasourceFromValue(v string) (*PieChartDatasource, error) {
	ev := PieChartDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PieChartDatasource: valid values are %v", v, AllowedPieChartDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PieChartDatasource) IsValid() bool {
	for _, existing := range AllowedPieChartDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PieChartDatasource value
func (v PieChartDatasource) Ptr() *PieChartDatasource {
	return &v
}

type NullablePieChartDatasource struct {
	value *PieChartDatasource
	isSet bool
}

func (v NullablePieChartDatasource) Get() *PieChartDatasource {
	return v.value
}

func (v *NullablePieChartDatasource) Set(val *PieChartDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullablePieChartDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullablePieChartDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePieChartDatasource(val *PieChartDatasource) *NullablePieChartDatasource {
	return &NullablePieChartDatasource{value: val, isSet: true}
}

func (v NullablePieChartDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePieChartDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

