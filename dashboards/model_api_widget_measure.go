/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiWidgetMeasure type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiWidgetMeasure{}

// ApiWidgetMeasure Determines how to aggregate the the metric.
type ApiWidgetMeasure struct {
	Type *WidgetMeasureType `json:"type,omitempty"`
	// The percentile value to use when `type == NTH_PERCENTILE`.
	PercentileValue *float32 `json:"percentileValue,omitempty"`
}

// NewApiWidgetMeasure instantiates a new ApiWidgetMeasure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiWidgetMeasure() *ApiWidgetMeasure {
	this := ApiWidgetMeasure{}
	return &this
}

// NewApiWidgetMeasureWithDefaults instantiates a new ApiWidgetMeasure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiWidgetMeasureWithDefaults() *ApiWidgetMeasure {
	this := ApiWidgetMeasure{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiWidgetMeasure) GetType() WidgetMeasureType {
	if o == nil || utils.IsNil(o.Type) {
		var ret WidgetMeasureType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWidgetMeasure) GetTypeOk() (*WidgetMeasureType, bool) {
	if o == nil || utils.IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiWidgetMeasure) HasType() bool {
	if o != nil && !utils.IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given WidgetMeasureType and assigns it to the Type field.
func (o *ApiWidgetMeasure) SetType(v WidgetMeasureType) {
	o.Type = &v
}

// GetPercentileValue returns the PercentileValue field value if set, zero value otherwise.
func (o *ApiWidgetMeasure) GetPercentileValue() float32 {
	if o == nil || utils.IsNil(o.PercentileValue) {
		var ret float32
		return ret
	}
	return *o.PercentileValue
}

// GetPercentileValueOk returns a tuple with the PercentileValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWidgetMeasure) GetPercentileValueOk() (*float32, bool) {
	if o == nil || utils.IsNil(o.PercentileValue) {
		return nil, false
	}
	return o.PercentileValue, true
}

// HasPercentileValue returns a boolean if a field has been set.
func (o *ApiWidgetMeasure) HasPercentileValue() bool {
	if o != nil && !utils.IsNil(o.PercentileValue) {
		return true
	}

	return false
}

// SetPercentileValue gets a reference to the given float32 and assigns it to the PercentileValue field.
func (o *ApiWidgetMeasure) SetPercentileValue(v float32) {
	o.PercentileValue = &v
}

func (o ApiWidgetMeasure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiWidgetMeasure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !utils.IsNil(o.PercentileValue) {
		toSerialize["percentileValue"] = o.PercentileValue
	}
	return toSerialize, nil
}

type NullableApiWidgetMeasure struct {
	value *ApiWidgetMeasure
	isSet bool
}

func (v NullableApiWidgetMeasure) Get() *ApiWidgetMeasure {
	return v.value
}

func (v *NullableApiWidgetMeasure) Set(val *ApiWidgetMeasure) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWidgetMeasure) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWidgetMeasure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWidgetMeasure(val *ApiWidgetMeasure) *NullableApiWidgetMeasure {
	return &NullableApiWidgetMeasure{value: val, isSet: true}
}

func (v NullableApiWidgetMeasure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWidgetMeasure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


