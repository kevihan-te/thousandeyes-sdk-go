/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ApiWidgetDataPoint type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiWidgetDataPoint{}

// ApiWidgetDataPoint Data point of a widget.
type ApiWidgetDataPoint struct {
	// Timestamp of the aggregated data point.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// Number of test data points aggregated into the widget data point.
	NumberOfDataPoints *int64 `json:"numberOfDataPoints,omitempty"`
	// Aggregated value.
	Value *float64 `json:"value,omitempty"`
	Groups []ApiDataPointGroup `json:"groups,omitempty"`
}

// NewApiWidgetDataPoint instantiates a new ApiWidgetDataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiWidgetDataPoint() *ApiWidgetDataPoint {
	this := ApiWidgetDataPoint{}
	return &this
}

// NewApiWidgetDataPointWithDefaults instantiates a new ApiWidgetDataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiWidgetDataPointWithDefaults() *ApiWidgetDataPoint {
	this := ApiWidgetDataPoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ApiWidgetDataPoint) GetTimestamp() int64 {
	if o == nil || utils.IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWidgetDataPoint) GetTimestampOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ApiWidgetDataPoint) HasTimestamp() bool {
	if o != nil && !utils.IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ApiWidgetDataPoint) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetNumberOfDataPoints returns the NumberOfDataPoints field value if set, zero value otherwise.
func (o *ApiWidgetDataPoint) GetNumberOfDataPoints() int64 {
	if o == nil || utils.IsNil(o.NumberOfDataPoints) {
		var ret int64
		return ret
	}
	return *o.NumberOfDataPoints
}

// GetNumberOfDataPointsOk returns a tuple with the NumberOfDataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWidgetDataPoint) GetNumberOfDataPointsOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.NumberOfDataPoints) {
		return nil, false
	}
	return o.NumberOfDataPoints, true
}

// HasNumberOfDataPoints returns a boolean if a field has been set.
func (o *ApiWidgetDataPoint) HasNumberOfDataPoints() bool {
	if o != nil && !utils.IsNil(o.NumberOfDataPoints) {
		return true
	}

	return false
}

// SetNumberOfDataPoints gets a reference to the given int64 and assigns it to the NumberOfDataPoints field.
func (o *ApiWidgetDataPoint) SetNumberOfDataPoints(v int64) {
	o.NumberOfDataPoints = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApiWidgetDataPoint) GetValue() float64 {
	if o == nil || utils.IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWidgetDataPoint) GetValueOk() (*float64, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApiWidgetDataPoint) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *ApiWidgetDataPoint) SetValue(v float64) {
	o.Value = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ApiWidgetDataPoint) GetGroups() []ApiDataPointGroup {
	if o == nil || utils.IsNil(o.Groups) {
		var ret []ApiDataPointGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWidgetDataPoint) GetGroupsOk() ([]ApiDataPointGroup, bool) {
	if o == nil || utils.IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ApiWidgetDataPoint) HasGroups() bool {
	if o != nil && !utils.IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []ApiDataPointGroup and assigns it to the Groups field.
func (o *ApiWidgetDataPoint) SetGroups(v []ApiDataPointGroup) {
	o.Groups = v
}

func (o ApiWidgetDataPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiWidgetDataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !utils.IsNil(o.NumberOfDataPoints) {
		toSerialize["numberOfDataPoints"] = o.NumberOfDataPoints
	}
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !utils.IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	return toSerialize, nil
}

type NullableApiWidgetDataPoint struct {
	value *ApiWidgetDataPoint
	isSet bool
}

func (v NullableApiWidgetDataPoint) Get() *ApiWidgetDataPoint {
	return v.value
}

func (v *NullableApiWidgetDataPoint) Set(val *ApiWidgetDataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWidgetDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWidgetDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWidgetDataPoint(val *ApiWidgetDataPoint) *NullableApiWidgetDataPoint {
	return &NullableApiWidgetDataPoint{value: val, isSet: true}
}

func (v NullableApiWidgetDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWidgetDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


