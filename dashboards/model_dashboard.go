/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"time"
)

// checks if the Dashboard type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &Dashboard{}

// Dashboard Dashboard upon which this dashboard snapshot is based upon.
type Dashboard struct {
	// Default global dashboard filter ID (obtained from `/dashboards/filters` endpoint).
	GlobalFilterId *string `json:"globalFilterId,omitempty"`
	// Identifier of a dashboard.
	DashboardId *string `json:"dashboardId,omitempty"`
	// Title of a dashboard.
	Title *string `json:"title,omitempty"`
	// Indicates if a dashboard is built-in. True for built-in dashboards, false for user-created dashboards.
	IsBuiltIn *bool `json:"isBuiltIn,omitempty"`
	// Identifier for the account group associated with a dashboard.
	Aid *string `json:"aid,omitempty"`
	// Identifier for the user that created a dashboard.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Identifier for the user that last modified a dashboard.
	ModifiedBy *string `json:"modifiedBy,omitempty"`
	// UTC date/time when a dashboard was last modified (ISO date-time format).
	ModifiedDate *time.Time `json:"modifiedDate,omitempty"`
	// A dashboard can be viewed by other users in the account. If true, only the creator of the dashboard may view it. If false, all users in the same account may view it.
	IsPrivate *bool `json:"isPrivate,omitempty"`
	// Indicates whether this dashboard is the user's default. True for default, false if not.
	IsDefaultForUser *bool `json:"isDefaultForUser,omitempty"`
	// Indicates whether this dashboard is the account group's default. True for default, false if not.
	IsDefaultForAccount *bool `json:"isDefaultForAccount,omitempty"`
	Widgets []ApiWidget `json:"widgets,omitempty"`
	// A text description of the dashboard's purpose and functionality. This information assists users in understanding the dashboard but isn't displayed when viewing a dashboard.
	Description *string `json:"description,omitempty"`
	DefaultTimespan *DefaultTimespan `json:"defaultTimespan,omitempty"`
	// When set to `true`, the defaultTimespan is used and overrides the widget's timespan. If set to `false`, the the widget's timespan is used.
	IsGlobalOverride *bool `json:"isGlobalOverride,omitempty"`
	// True if this dashboard was previously a report.
	IsMigratedReport *bool `json:"isMigratedReport,omitempty"`
	Links *DashboardLinks `json:"_links,omitempty"`
}

// NewDashboard instantiates a new Dashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboard() *Dashboard {
	this := Dashboard{}
	return &this
}

// NewDashboardWithDefaults instantiates a new Dashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardWithDefaults() *Dashboard {
	this := Dashboard{}
	return &this
}

// GetGlobalFilterId returns the GlobalFilterId field value if set, zero value otherwise.
func (o *Dashboard) GetGlobalFilterId() string {
	if o == nil || utils.IsNil(o.GlobalFilterId) {
		var ret string
		return ret
	}
	return *o.GlobalFilterId
}

// GetGlobalFilterIdOk returns a tuple with the GlobalFilterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetGlobalFilterIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.GlobalFilterId) {
		return nil, false
	}
	return o.GlobalFilterId, true
}

// HasGlobalFilterId returns a boolean if a field has been set.
func (o *Dashboard) HasGlobalFilterId() bool {
	if o != nil && !utils.IsNil(o.GlobalFilterId) {
		return true
	}

	return false
}

// SetGlobalFilterId gets a reference to the given string and assigns it to the GlobalFilterId field.
func (o *Dashboard) SetGlobalFilterId(v string) {
	o.GlobalFilterId = &v
}

// GetDashboardId returns the DashboardId field value if set, zero value otherwise.
func (o *Dashboard) GetDashboardId() string {
	if o == nil || utils.IsNil(o.DashboardId) {
		var ret string
		return ret
	}
	return *o.DashboardId
}

// GetDashboardIdOk returns a tuple with the DashboardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDashboardIdOk() (*string, bool) {
	if o == nil || utils.IsNil(o.DashboardId) {
		return nil, false
	}
	return o.DashboardId, true
}

// HasDashboardId returns a boolean if a field has been set.
func (o *Dashboard) HasDashboardId() bool {
	if o != nil && !utils.IsNil(o.DashboardId) {
		return true
	}

	return false
}

// SetDashboardId gets a reference to the given string and assigns it to the DashboardId field.
func (o *Dashboard) SetDashboardId(v string) {
	o.DashboardId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Dashboard) GetTitle() string {
	if o == nil || utils.IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetTitleOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Dashboard) HasTitle() bool {
	if o != nil && !utils.IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Dashboard) SetTitle(v string) {
	o.Title = &v
}

// GetIsBuiltIn returns the IsBuiltIn field value if set, zero value otherwise.
func (o *Dashboard) GetIsBuiltIn() bool {
	if o == nil || utils.IsNil(o.IsBuiltIn) {
		var ret bool
		return ret
	}
	return *o.IsBuiltIn
}

// GetIsBuiltInOk returns a tuple with the IsBuiltIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIsBuiltInOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsBuiltIn) {
		return nil, false
	}
	return o.IsBuiltIn, true
}

// HasIsBuiltIn returns a boolean if a field has been set.
func (o *Dashboard) HasIsBuiltIn() bool {
	if o != nil && !utils.IsNil(o.IsBuiltIn) {
		return true
	}

	return false
}

// SetIsBuiltIn gets a reference to the given bool and assigns it to the IsBuiltIn field.
func (o *Dashboard) SetIsBuiltIn(v bool) {
	o.IsBuiltIn = &v
}

// GetAid returns the Aid field value if set, zero value otherwise.
func (o *Dashboard) GetAid() string {
	if o == nil || utils.IsNil(o.Aid) {
		var ret string
		return ret
	}
	return *o.Aid
}

// GetAidOk returns a tuple with the Aid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetAidOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Aid) {
		return nil, false
	}
	return o.Aid, true
}

// HasAid returns a boolean if a field has been set.
func (o *Dashboard) HasAid() bool {
	if o != nil && !utils.IsNil(o.Aid) {
		return true
	}

	return false
}

// SetAid gets a reference to the given string and assigns it to the Aid field.
func (o *Dashboard) SetAid(v string) {
	o.Aid = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Dashboard) GetCreatedBy() string {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetCreatedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Dashboard) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Dashboard) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *Dashboard) GetModifiedBy() string {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetModifiedByOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *Dashboard) HasModifiedBy() bool {
	if o != nil && !utils.IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *Dashboard) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *Dashboard) GetModifiedDate() time.Time {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *Dashboard) HasModifiedDate() bool {
	if o != nil && !utils.IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given time.Time and assigns it to the ModifiedDate field.
func (o *Dashboard) SetModifiedDate(v time.Time) {
	o.ModifiedDate = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *Dashboard) GetIsPrivate() bool {
	if o == nil || utils.IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIsPrivateOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *Dashboard) HasIsPrivate() bool {
	if o != nil && !utils.IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *Dashboard) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetIsDefaultForUser returns the IsDefaultForUser field value if set, zero value otherwise.
func (o *Dashboard) GetIsDefaultForUser() bool {
	if o == nil || utils.IsNil(o.IsDefaultForUser) {
		var ret bool
		return ret
	}
	return *o.IsDefaultForUser
}

// GetIsDefaultForUserOk returns a tuple with the IsDefaultForUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIsDefaultForUserOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefaultForUser) {
		return nil, false
	}
	return o.IsDefaultForUser, true
}

// HasIsDefaultForUser returns a boolean if a field has been set.
func (o *Dashboard) HasIsDefaultForUser() bool {
	if o != nil && !utils.IsNil(o.IsDefaultForUser) {
		return true
	}

	return false
}

// SetIsDefaultForUser gets a reference to the given bool and assigns it to the IsDefaultForUser field.
func (o *Dashboard) SetIsDefaultForUser(v bool) {
	o.IsDefaultForUser = &v
}

// GetIsDefaultForAccount returns the IsDefaultForAccount field value if set, zero value otherwise.
func (o *Dashboard) GetIsDefaultForAccount() bool {
	if o == nil || utils.IsNil(o.IsDefaultForAccount) {
		var ret bool
		return ret
	}
	return *o.IsDefaultForAccount
}

// GetIsDefaultForAccountOk returns a tuple with the IsDefaultForAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIsDefaultForAccountOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsDefaultForAccount) {
		return nil, false
	}
	return o.IsDefaultForAccount, true
}

// HasIsDefaultForAccount returns a boolean if a field has been set.
func (o *Dashboard) HasIsDefaultForAccount() bool {
	if o != nil && !utils.IsNil(o.IsDefaultForAccount) {
		return true
	}

	return false
}

// SetIsDefaultForAccount gets a reference to the given bool and assigns it to the IsDefaultForAccount field.
func (o *Dashboard) SetIsDefaultForAccount(v bool) {
	o.IsDefaultForAccount = &v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *Dashboard) GetWidgets() []ApiWidget {
	if o == nil || utils.IsNil(o.Widgets) {
		var ret []ApiWidget
		return ret
	}
	return o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetWidgetsOk() ([]ApiWidget, bool) {
	if o == nil || utils.IsNil(o.Widgets) {
		return nil, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *Dashboard) HasWidgets() bool {
	if o != nil && !utils.IsNil(o.Widgets) {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given []ApiWidget and assigns it to the Widgets field.
func (o *Dashboard) SetWidgets(v []ApiWidget) {
	o.Widgets = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Dashboard) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Dashboard) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Dashboard) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultTimespan returns the DefaultTimespan field value if set, zero value otherwise.
func (o *Dashboard) GetDefaultTimespan() DefaultTimespan {
	if o == nil || utils.IsNil(o.DefaultTimespan) {
		var ret DefaultTimespan
		return ret
	}
	return *o.DefaultTimespan
}

// GetDefaultTimespanOk returns a tuple with the DefaultTimespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetDefaultTimespanOk() (*DefaultTimespan, bool) {
	if o == nil || utils.IsNil(o.DefaultTimespan) {
		return nil, false
	}
	return o.DefaultTimespan, true
}

// HasDefaultTimespan returns a boolean if a field has been set.
func (o *Dashboard) HasDefaultTimespan() bool {
	if o != nil && !utils.IsNil(o.DefaultTimespan) {
		return true
	}

	return false
}

// SetDefaultTimespan gets a reference to the given DefaultTimespan and assigns it to the DefaultTimespan field.
func (o *Dashboard) SetDefaultTimespan(v DefaultTimespan) {
	o.DefaultTimespan = &v
}

// GetIsGlobalOverride returns the IsGlobalOverride field value if set, zero value otherwise.
func (o *Dashboard) GetIsGlobalOverride() bool {
	if o == nil || utils.IsNil(o.IsGlobalOverride) {
		var ret bool
		return ret
	}
	return *o.IsGlobalOverride
}

// GetIsGlobalOverrideOk returns a tuple with the IsGlobalOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIsGlobalOverrideOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsGlobalOverride) {
		return nil, false
	}
	return o.IsGlobalOverride, true
}

// HasIsGlobalOverride returns a boolean if a field has been set.
func (o *Dashboard) HasIsGlobalOverride() bool {
	if o != nil && !utils.IsNil(o.IsGlobalOverride) {
		return true
	}

	return false
}

// SetIsGlobalOverride gets a reference to the given bool and assigns it to the IsGlobalOverride field.
func (o *Dashboard) SetIsGlobalOverride(v bool) {
	o.IsGlobalOverride = &v
}

// GetIsMigratedReport returns the IsMigratedReport field value if set, zero value otherwise.
func (o *Dashboard) GetIsMigratedReport() bool {
	if o == nil || utils.IsNil(o.IsMigratedReport) {
		var ret bool
		return ret
	}
	return *o.IsMigratedReport
}

// GetIsMigratedReportOk returns a tuple with the IsMigratedReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIsMigratedReportOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.IsMigratedReport) {
		return nil, false
	}
	return o.IsMigratedReport, true
}

// HasIsMigratedReport returns a boolean if a field has been set.
func (o *Dashboard) HasIsMigratedReport() bool {
	if o != nil && !utils.IsNil(o.IsMigratedReport) {
		return true
	}

	return false
}

// SetIsMigratedReport gets a reference to the given bool and assigns it to the IsMigratedReport field.
func (o *Dashboard) SetIsMigratedReport(v bool) {
	o.IsMigratedReport = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Dashboard) GetLinks() DashboardLinks {
	if o == nil || utils.IsNil(o.Links) {
		var ret DashboardLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetLinksOk() (*DashboardLinks, bool) {
	if o == nil || utils.IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Dashboard) HasLinks() bool {
	if o != nil && !utils.IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DashboardLinks and assigns it to the Links field.
func (o *Dashboard) SetLinks(v DashboardLinks) {
	o.Links = &v
}

func (o Dashboard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dashboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.GlobalFilterId) {
		toSerialize["globalFilterId"] = o.GlobalFilterId
	}
	if !utils.IsNil(o.DashboardId) {
		toSerialize["dashboardId"] = o.DashboardId
	}
	if !utils.IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !utils.IsNil(o.IsBuiltIn) {
		toSerialize["isBuiltIn"] = o.IsBuiltIn
	}
	if !utils.IsNil(o.Aid) {
		toSerialize["aid"] = o.Aid
	}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !utils.IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !utils.IsNil(o.IsPrivate) {
		toSerialize["isPrivate"] = o.IsPrivate
	}
	if !utils.IsNil(o.IsDefaultForUser) {
		toSerialize["isDefaultForUser"] = o.IsDefaultForUser
	}
	if !utils.IsNil(o.IsDefaultForAccount) {
		toSerialize["isDefaultForAccount"] = o.IsDefaultForAccount
	}
	if !utils.IsNil(o.Widgets) {
		toSerialize["widgets"] = o.Widgets
	}
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !utils.IsNil(o.DefaultTimespan) {
		toSerialize["defaultTimespan"] = o.DefaultTimespan
	}
	if !utils.IsNil(o.IsGlobalOverride) {
		toSerialize["isGlobalOverride"] = o.IsGlobalOverride
	}
	if !utils.IsNil(o.IsMigratedReport) {
		toSerialize["isMigratedReport"] = o.IsMigratedReport
	}
	if !utils.IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableDashboard struct {
	value *Dashboard
	isSet bool
}

func (v NullableDashboard) Get() *Dashboard {
	return v.value
}

func (v *NullableDashboard) Set(val *Dashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard(val *Dashboard) *NullableDashboard {
	return &NullableDashboard{value: val, isSet: true}
}

func (v NullableDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


