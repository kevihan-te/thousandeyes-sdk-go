/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the LegacyApiDashboard type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LegacyApiDashboard{}

// LegacyApiDashboard struct for LegacyApiDashboard
type LegacyApiDashboard struct {
	// Identifier for the account group associated with a dashboard.
	AccountId *int64 `json:"accountId,omitempty"`
	// Identifier for the user that created a dashboard.
	CreatedBy *int64 `json:"createdBy,omitempty"`
	// Identifier for the user that last modified a dashboard.
	ModifiedBy *int64 `json:"modifiedBy,omitempty"`
	// UTC date/time when a dashboard was last modified.
	ModifiedDate *string `json:"modifiedDate,omitempty"`
	// When set to `true`, the defaultTimespan is used and overrides the widget's timespan. If set to `false`, the the widget's timespan is used.
	GlobalOverride *bool `json:"globalOverride,omitempty"`
	// True if this dashboard was previously a report.
	MigratedReport *bool `json:"migratedReport,omitempty"`
	// A links array containing the self and the snapshots links.
	ApiLink []map[string]interface{} `json:"apiLink,omitempty"`
}

// NewLegacyApiDashboard instantiates a new LegacyApiDashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyApiDashboard() *LegacyApiDashboard {
	this := LegacyApiDashboard{}
	return &this
}

// NewLegacyApiDashboardWithDefaults instantiates a new LegacyApiDashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyApiDashboardWithDefaults() *LegacyApiDashboard {
	this := LegacyApiDashboard{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetAccountId() int64 {
	if o == nil || utils.IsNil(o.AccountId) {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetAccountIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasAccountId() bool {
	if o != nil && !utils.IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *LegacyApiDashboard) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetCreatedBy() int64 {
	if o == nil || utils.IsNil(o.CreatedBy) {
		var ret int64
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetCreatedByOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasCreatedBy() bool {
	if o != nil && !utils.IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given int64 and assigns it to the CreatedBy field.
func (o *LegacyApiDashboard) SetCreatedBy(v int64) {
	o.CreatedBy = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetModifiedBy() int64 {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		var ret int64
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetModifiedByOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasModifiedBy() bool {
	if o != nil && !utils.IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given int64 and assigns it to the ModifiedBy field.
func (o *LegacyApiDashboard) SetModifiedBy(v int64) {
	o.ModifiedBy = &v
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetModifiedDate() string {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		var ret string
		return ret
	}
	return *o.ModifiedDate
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetModifiedDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ModifiedDate) {
		return nil, false
	}
	return o.ModifiedDate, true
}

// HasModifiedDate returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasModifiedDate() bool {
	if o != nil && !utils.IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given string and assigns it to the ModifiedDate field.
func (o *LegacyApiDashboard) SetModifiedDate(v string) {
	o.ModifiedDate = &v
}

// GetGlobalOverride returns the GlobalOverride field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetGlobalOverride() bool {
	if o == nil || utils.IsNil(o.GlobalOverride) {
		var ret bool
		return ret
	}
	return *o.GlobalOverride
}

// GetGlobalOverrideOk returns a tuple with the GlobalOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetGlobalOverrideOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.GlobalOverride) {
		return nil, false
	}
	return o.GlobalOverride, true
}

// HasGlobalOverride returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasGlobalOverride() bool {
	if o != nil && !utils.IsNil(o.GlobalOverride) {
		return true
	}

	return false
}

// SetGlobalOverride gets a reference to the given bool and assigns it to the GlobalOverride field.
func (o *LegacyApiDashboard) SetGlobalOverride(v bool) {
	o.GlobalOverride = &v
}

// GetMigratedReport returns the MigratedReport field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetMigratedReport() bool {
	if o == nil || utils.IsNil(o.MigratedReport) {
		var ret bool
		return ret
	}
	return *o.MigratedReport
}

// GetMigratedReportOk returns a tuple with the MigratedReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetMigratedReportOk() (*bool, bool) {
	if o == nil || utils.IsNil(o.MigratedReport) {
		return nil, false
	}
	return o.MigratedReport, true
}

// HasMigratedReport returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasMigratedReport() bool {
	if o != nil && !utils.IsNil(o.MigratedReport) {
		return true
	}

	return false
}

// SetMigratedReport gets a reference to the given bool and assigns it to the MigratedReport field.
func (o *LegacyApiDashboard) SetMigratedReport(v bool) {
	o.MigratedReport = &v
}

// GetApiLink returns the ApiLink field value if set, zero value otherwise.
func (o *LegacyApiDashboard) GetApiLink() []map[string]interface{} {
	if o == nil || utils.IsNil(o.ApiLink) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ApiLink
}

// GetApiLinkOk returns a tuple with the ApiLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyApiDashboard) GetApiLinkOk() ([]map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.ApiLink) {
		return nil, false
	}
	return o.ApiLink, true
}

// HasApiLink returns a boolean if a field has been set.
func (o *LegacyApiDashboard) HasApiLink() bool {
	if o != nil && !utils.IsNil(o.ApiLink) {
		return true
	}

	return false
}

// SetApiLink gets a reference to the given []map[string]interface{} and assigns it to the ApiLink field.
func (o *LegacyApiDashboard) SetApiLink(v []map[string]interface{}) {
	o.ApiLink = v
}

func (o LegacyApiDashboard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyApiDashboard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !utils.IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !utils.IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if !utils.IsNil(o.ModifiedDate) {
		toSerialize["modifiedDate"] = o.ModifiedDate
	}
	if !utils.IsNil(o.GlobalOverride) {
		toSerialize["globalOverride"] = o.GlobalOverride
	}
	if !utils.IsNil(o.MigratedReport) {
		toSerialize["migratedReport"] = o.MigratedReport
	}
	if !utils.IsNil(o.ApiLink) {
		toSerialize["apiLink"] = o.ApiLink
	}
	return toSerialize, nil
}

type NullableLegacyApiDashboard struct {
	value *LegacyApiDashboard
	isSet bool
}

func (v NullableLegacyApiDashboard) Get() *LegacyApiDashboard {
	return v.value
}

func (v *NullableLegacyApiDashboard) Set(val *LegacyApiDashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyApiDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyApiDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyApiDashboard(val *LegacyApiDashboard) *NullableLegacyApiDashboard {
	return &NullableLegacyApiDashboard{value: val, isSet: true}
}

func (v NullableLegacyApiDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyApiDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


