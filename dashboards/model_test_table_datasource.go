/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// TestTableDatasource Datasource of the test table widget.
type TestTableDatasource string

// List of TestTableDatasource
const (
	TESTTABLEDATASOURCE_ALERTS TestTableDatasource = "ALERTS"
	TESTTABLEDATASOURCE_DEVICES TestTableDatasource = "DEVICES"
	TESTTABLEDATASOURCE_DNSP TestTableDatasource = "DNSP"
	TESTTABLEDATASOURCE_ENDPOINT_AGENTS TestTableDatasource = "ENDPOINT_AGENTS"
	TESTTABLEDATASOURCE_ENDPOINT_SCHEDULED_TEST TestTableDatasource = "ENDPOINT_SCHEDULED_TEST"
	TESTTABLEDATASOURCE_ENDPOINT_AST_TEST TestTableDatasource = "ENDPOINT_AST_TEST"
	TESTTABLEDATASOURCE_ENDPOINT_BROWSER_SESSION TestTableDatasource = "ENDPOINT_BROWSER_SESSION"
	TESTTABLEDATASOURCE_ENDPOINT_LOCAL_NETWORK TestTableDatasource = "ENDPOINT_LOCAL_NETWORK"
	TESTTABLEDATASOURCE_ENDPOINT_LOCAL_NETWORK_WIRELESS TestTableDatasource = "ENDPOINT_LOCAL_NETWORK_WIRELESS"
	TESTTABLEDATASOURCE_ROUTING TestTableDatasource = "ROUTING"
	TESTTABLEDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS TestTableDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	TESTTABLEDATASOURCE_INTERNET_INSIGHTS TestTableDatasource = "INTERNET_INSIGHTS"
	TESTTABLEDATASOURCE_APPDYNAMICS_SERVICE_HEALTH TestTableDatasource = "APPDYNAMICS_SERVICE_HEALTH"
	TESTTABLEDATASOURCE_CLOUD_NATIVE_MONITORING TestTableDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of TestTableDatasource enum
var AllowedTestTableDatasourceEnumValues = []TestTableDatasource{
	"ALERTS",
	"DEVICES",
	"DNSP",
	"ENDPOINT_AGENTS",
	"ENDPOINT_SCHEDULED_TEST",
	"ENDPOINT_AST_TEST",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_LOCAL_NETWORK",
	"ENDPOINT_LOCAL_NETWORK_WIRELESS",
	"ROUTING",
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"INTERNET_INSIGHTS",
	"APPDYNAMICS_SERVICE_HEALTH",
	"CLOUD_NATIVE_MONITORING",
}

func (v *TestTableDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestTableDatasource(value)
	for _, existing := range AllowedTestTableDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestTableDatasource", value)
}

// NewTestTableDatasourceFromValue returns a pointer to a valid TestTableDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestTableDatasourceFromValue(v string) (*TestTableDatasource, error) {
	ev := TestTableDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestTableDatasource: valid values are %v", v, AllowedTestTableDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestTableDatasource) IsValid() bool {
	for _, existing := range AllowedTestTableDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestTableDatasource value
func (v TestTableDatasource) Ptr() *TestTableDatasource {
	return &v
}

type NullableTestTableDatasource struct {
	value *TestTableDatasource
	isSet bool
}

func (v NullableTestTableDatasource) Get() *TestTableDatasource {
	return v.value
}

func (v *NullableTestTableDatasource) Set(val *TestTableDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableTestTableDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableTestTableDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestTableDatasource(val *TestTableDatasource) *NullableTestTableDatasource {
	return &NullableTestTableDatasource{value: val, isSet: true}
}

func (v NullableTestTableDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestTableDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

