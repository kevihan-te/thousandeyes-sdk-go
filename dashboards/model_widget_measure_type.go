/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// WidgetMeasureType Determines how to aggregate the the metric.
type WidgetMeasureType string

// List of WidgetMeasureType
const (
	WIDGETMEASURETYPE_MINIMUM WidgetMeasureType = "MINIMUM"
	WIDGETMEASURETYPE_MAXIMUM WidgetMeasureType = "MAXIMUM"
	WIDGETMEASURETYPE_MEAN WidgetMeasureType = "MEAN"
	WIDGETMEASURETYPE_MEDIAN WidgetMeasureType = "MEDIAN"
	WIDGETMEASURETYPE_NTH_PERCENTILE WidgetMeasureType = "NTH_PERCENTILE"
	WIDGETMEASURETYPE_PERCPOSITIVE WidgetMeasureType = "PERCPOSITIVE"
	WIDGETMEASURETYPE_PERCZERO WidgetMeasureType = "PERCZERO"
	WIDGETMEASURETYPE_STDDEV WidgetMeasureType = "STDDEV"
	WIDGETMEASURETYPE_TOTAL WidgetMeasureType = "TOTAL"
	WIDGETMEASURETYPE_VALUES WidgetMeasureType = "VALUES"
	WIDGETMEASURETYPE_SUM WidgetMeasureType = "SUM"
	WIDGETMEASURETYPE_CLOUD_NATIVE_MONITORING_MEAN WidgetMeasureType = "CLOUD_NATIVE_MONITORING-MEAN"
	WIDGETMEASURETYPE_CLOUD_NATIVE_MONITORING_SUM WidgetMeasureType = "CLOUD_NATIVE_MONITORING-SUM"
)

// All allowed values of WidgetMeasureType enum
var AllowedWidgetMeasureTypeEnumValues = []WidgetMeasureType{
	"MINIMUM",
	"MAXIMUM",
	"MEAN",
	"MEDIAN",
	"NTH_PERCENTILE",
	"PERCPOSITIVE",
	"PERCZERO",
	"STDDEV",
	"TOTAL",
	"VALUES",
	"SUM",
	"CLOUD_NATIVE_MONITORING-MEAN",
	"CLOUD_NATIVE_MONITORING-SUM",
}

func (v *WidgetMeasureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidgetMeasureType(value)
	for _, existing := range AllowedWidgetMeasureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidgetMeasureType", value)
}

// NewWidgetMeasureTypeFromValue returns a pointer to a valid WidgetMeasureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWidgetMeasureTypeFromValue(v string) (*WidgetMeasureType, error) {
	ev := WidgetMeasureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WidgetMeasureType: valid values are %v", v, AllowedWidgetMeasureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WidgetMeasureType) IsValid() bool {
	for _, existing := range AllowedWidgetMeasureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WidgetMeasureType value
func (v WidgetMeasureType) Ptr() *WidgetMeasureType {
	return &v
}

type NullableWidgetMeasureType struct {
	value *WidgetMeasureType
	isSet bool
}

func (v NullableWidgetMeasureType) Get() *WidgetMeasureType {
	return v.value
}

func (v *NullableWidgetMeasureType) Set(val *WidgetMeasureType) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetMeasureType) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetMeasureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetMeasureType(val *WidgetMeasureType) *NullableWidgetMeasureType {
	return &NullableWidgetMeasureType{value: val, isSet: true}
}

func (v NullableWidgetMeasureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetMeasureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

