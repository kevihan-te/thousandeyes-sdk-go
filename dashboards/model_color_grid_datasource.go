/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// ColorGridDatasource Datasource of the color grid widget.
type ColorGridDatasource string

// List of ColorGridDatasource
const (
	COLORGRIDDATASOURCE_THIRD_PARTY_APPLICATIONS ColorGridDatasource = "THIRD_PARTY_APPLICATIONS"
	COLORGRIDDATASOURCE_ALERTS ColorGridDatasource = "ALERTS"
	COLORGRIDDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS ColorGridDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	COLORGRIDDATASOURCE_DEVICES ColorGridDatasource = "DEVICES"
	COLORGRIDDATASOURCE_ENDPOINT_AGENTS ColorGridDatasource = "ENDPOINT_AGENTS"
	COLORGRIDDATASOURCE_ENDPOINT_AST_TEST ColorGridDatasource = "ENDPOINT_AST_TEST"
	COLORGRIDDATASOURCE_ENDPOINT_BROWSER_SESSION ColorGridDatasource = "ENDPOINT_BROWSER_SESSION"
	COLORGRIDDATASOURCE_ENDPOINT_LOCAL_NETWORK ColorGridDatasource = "ENDPOINT_LOCAL_NETWORK"
	COLORGRIDDATASOURCE_ENDPOINT_LOCAL_NETWORK_WIRELESS ColorGridDatasource = "ENDPOINT_LOCAL_NETWORK_WIRELESS"
	COLORGRIDDATASOURCE_ENDPOINT_SCHEDULED_TEST ColorGridDatasource = "ENDPOINT_SCHEDULED_TEST"
	COLORGRIDDATASOURCE_INTERNET_INSIGHTS ColorGridDatasource = "INTERNET_INSIGHTS"
	COLORGRIDDATASOURCE_ROUTING ColorGridDatasource = "ROUTING"
	COLORGRIDDATASOURCE_CLOUD_NATIVE_MONITORING ColorGridDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of ColorGridDatasource enum
var AllowedColorGridDatasourceEnumValues = []ColorGridDatasource{
	"THIRD_PARTY_APPLICATIONS",
	"ALERTS",
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"DEVICES",
	"ENDPOINT_AGENTS",
	"ENDPOINT_AST_TEST",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_LOCAL_NETWORK",
	"ENDPOINT_LOCAL_NETWORK_WIRELESS",
	"ENDPOINT_SCHEDULED_TEST",
	"INTERNET_INSIGHTS",
	"ROUTING",
	"CLOUD_NATIVE_MONITORING",
}

func (v *ColorGridDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ColorGridDatasource(value)
	for _, existing := range AllowedColorGridDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ColorGridDatasource", value)
}

// NewColorGridDatasourceFromValue returns a pointer to a valid ColorGridDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewColorGridDatasourceFromValue(v string) (*ColorGridDatasource, error) {
	ev := ColorGridDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ColorGridDatasource: valid values are %v", v, AllowedColorGridDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ColorGridDatasource) IsValid() bool {
	for _, existing := range AllowedColorGridDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ColorGridDatasource value
func (v ColorGridDatasource) Ptr() *ColorGridDatasource {
	return &v
}

type NullableColorGridDatasource struct {
	value *ColorGridDatasource
	isSet bool
}

func (v NullableColorGridDatasource) Get() *ColorGridDatasource {
	return v.value
}

func (v *NullableColorGridDatasource) Set(val *ColorGridDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableColorGridDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableColorGridDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorGridDatasource(val *ColorGridDatasource) *NullableColorGridDatasource {
	return &NullableColorGridDatasource{value: val, isSet: true}
}

func (v NullableColorGridDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorGridDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

