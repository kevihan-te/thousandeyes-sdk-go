/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the DashboardLinks type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &DashboardLinks{}

// DashboardLinks A links object containing the self and the snapshots links.
type DashboardLinks struct {
	Self *Link `json:"self,omitempty"`
	Snapshots *Link `json:"snapshots,omitempty"`
}

// NewDashboardLinks instantiates a new DashboardLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardLinks() *DashboardLinks {
	this := DashboardLinks{}
	return &this
}

// NewDashboardLinksWithDefaults instantiates a new DashboardLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardLinksWithDefaults() *DashboardLinks {
	this := DashboardLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *DashboardLinks) GetSelf() Link {
	if o == nil || utils.IsNil(o.Self) {
		var ret Link
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLinks) GetSelfOk() (*Link, bool) {
	if o == nil || utils.IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *DashboardLinks) HasSelf() bool {
	if o != nil && !utils.IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given Link and assigns it to the Self field.
func (o *DashboardLinks) SetSelf(v Link) {
	o.Self = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *DashboardLinks) GetSnapshots() Link {
	if o == nil || utils.IsNil(o.Snapshots) {
		var ret Link
		return ret
	}
	return *o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardLinks) GetSnapshotsOk() (*Link, bool) {
	if o == nil || utils.IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *DashboardLinks) HasSnapshots() bool {
	if o != nil && !utils.IsNil(o.Snapshots) {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given Link and assigns it to the Snapshots field.
func (o *DashboardLinks) SetSnapshots(v Link) {
	o.Snapshots = &v
}

func (o DashboardLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !utils.IsNil(o.Snapshots) {
		toSerialize["snapshots"] = o.Snapshots
	}
	return toSerialize, nil
}

type NullableDashboardLinks struct {
	value *DashboardLinks
	isSet bool
}

func (v NullableDashboardLinks) Get() *DashboardLinks {
	return v.value
}

func (v *NullableDashboardLinks) Set(val *DashboardLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardLinks(val *DashboardLinks) *NullableDashboardLinks {
	return &NullableDashboardLinks{value: val, isSet: true}
}

func (v NullableDashboardLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


