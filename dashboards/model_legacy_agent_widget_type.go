/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// LegacyAgentWidgetType Type of the agent.
type LegacyAgentWidgetType string

// List of LegacyAgentWidgetType
const (
	LEGACYAGENTWIDGETTYPE_ENTERPRISE_AGENTS LegacyAgentWidgetType = "Enterprise Agents"
	LEGACYAGENTWIDGETTYPE_ENDPOINT_AGENTS LegacyAgentWidgetType = "Endpoint Agents"
)

// All allowed values of LegacyAgentWidgetType enum
var AllowedLegacyAgentWidgetTypeEnumValues = []LegacyAgentWidgetType{
	"Enterprise Agents",
	"Endpoint Agents",
}

func (v *LegacyAgentWidgetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegacyAgentWidgetType(value)
	for _, existing := range AllowedLegacyAgentWidgetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegacyAgentWidgetType", value)
}

// NewLegacyAgentWidgetTypeFromValue returns a pointer to a valid LegacyAgentWidgetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegacyAgentWidgetTypeFromValue(v string) (*LegacyAgentWidgetType, error) {
	ev := LegacyAgentWidgetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegacyAgentWidgetType: valid values are %v", v, AllowedLegacyAgentWidgetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegacyAgentWidgetType) IsValid() bool {
	for _, existing := range AllowedLegacyAgentWidgetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegacyAgentWidgetType value
func (v LegacyAgentWidgetType) Ptr() *LegacyAgentWidgetType {
	return &v
}

type NullableLegacyAgentWidgetType struct {
	value *LegacyAgentWidgetType
	isSet bool
}

func (v NullableLegacyAgentWidgetType) Get() *LegacyAgentWidgetType {
	return v.value
}

func (v *NullableLegacyAgentWidgetType) Set(val *LegacyAgentWidgetType) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyAgentWidgetType) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyAgentWidgetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyAgentWidgetType(val *LegacyAgentWidgetType) *NullableLegacyAgentWidgetType {
	return &NullableLegacyAgentWidgetType{value: val, isSet: true}
}

func (v NullableLegacyAgentWidgetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyAgentWidgetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

