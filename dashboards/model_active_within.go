/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the ActiveWithin type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ActiveWithin{}

// ActiveWithin Timespan in which alerts must have been active to appear in the widget.
type ActiveWithin struct {
	// Timespan value.
	Value *int32 `json:"value,omitempty"`
	// Deprecated
	Unit *LegacyDurationUnit `json:"unit,omitempty"`
}

// NewActiveWithin instantiates a new ActiveWithin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveWithin() *ActiveWithin {
	this := ActiveWithin{}
	return &this
}

// NewActiveWithinWithDefaults instantiates a new ActiveWithin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveWithinWithDefaults() *ActiveWithin {
	this := ActiveWithin{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ActiveWithin) GetValue() int32 {
	if o == nil || utils.IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveWithin) GetValueOk() (*int32, bool) {
	if o == nil || utils.IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ActiveWithin) HasValue() bool {
	if o != nil && !utils.IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *ActiveWithin) SetValue(v int32) {
	o.Value = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
// Deprecated
func (o *ActiveWithin) GetUnit() LegacyDurationUnit {
	if o == nil || utils.IsNil(o.Unit) {
		var ret LegacyDurationUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ActiveWithin) GetUnitOk() (*LegacyDurationUnit, bool) {
	if o == nil || utils.IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ActiveWithin) HasUnit() bool {
	if o != nil && !utils.IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given LegacyDurationUnit and assigns it to the Unit field.
// Deprecated
func (o *ActiveWithin) SetUnit(v LegacyDurationUnit) {
	o.Unit = &v
}

func (o ActiveWithin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveWithin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !utils.IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableActiveWithin struct {
	value *ActiveWithin
	isSet bool
}

func (v NullableActiveWithin) Get() *ActiveWithin {
	return v.value
}

func (v *NullableActiveWithin) Set(val *ActiveWithin) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveWithin) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveWithin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveWithin(val *ActiveWithin) *NullableActiveWithin {
	return &NullableActiveWithin{value: val, isSet: true}
}

func (v NullableActiveWithin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveWithin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


