/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the ApiDataSourceFilters type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiDataSourceFilters{}

// ApiDataSourceFilters List of different datasource filters.
type ApiDataSourceFilters struct {
	// Types of data source.
	DataSourceId string `json:"dataSourceId"`
	// List of different filter properties.
	Filters []ApiDataSourceFilter `json:"filters"`
}

type _ApiDataSourceFilters ApiDataSourceFilters

// NewApiDataSourceFilters instantiates a new ApiDataSourceFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiDataSourceFilters(dataSourceId string, filters []ApiDataSourceFilter) *ApiDataSourceFilters {
	this := ApiDataSourceFilters{}
	this.DataSourceId = dataSourceId
	this.Filters = filters
	return &this
}

// NewApiDataSourceFiltersWithDefaults instantiates a new ApiDataSourceFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiDataSourceFiltersWithDefaults() *ApiDataSourceFilters {
	this := ApiDataSourceFilters{}
	return &this
}

// GetDataSourceId returns the DataSourceId field value
func (o *ApiDataSourceFilters) GetDataSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *ApiDataSourceFilters) GetDataSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *ApiDataSourceFilters) SetDataSourceId(v string) {
	o.DataSourceId = v
}

// GetFilters returns the Filters field value
func (o *ApiDataSourceFilters) GetFilters() []ApiDataSourceFilter {
	if o == nil {
		var ret []ApiDataSourceFilter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *ApiDataSourceFilters) GetFiltersOk() ([]ApiDataSourceFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *ApiDataSourceFilters) SetFilters(v []ApiDataSourceFilter) {
	o.Filters = v
}

func (o ApiDataSourceFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiDataSourceFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataSourceId"] = o.DataSourceId
	toSerialize["filters"] = o.Filters
	return toSerialize, nil
}

func (o *ApiDataSourceFilters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataSourceId",
		"filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiDataSourceFilters := _ApiDataSourceFilters{}

    err = json.Unmarshal(data, &varApiDataSourceFilters)

	if err != nil {
		return err
	}

	*o = ApiDataSourceFilters(varApiDataSourceFilters)

	return err
}

type NullableApiDataSourceFilters struct {
	value *ApiDataSourceFilters
	isSet bool
}

func (v NullableApiDataSourceFilters) Get() *ApiDataSourceFilters {
	return v.value
}

func (v *NullableApiDataSourceFilters) Set(val *ApiDataSourceFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableApiDataSourceFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableApiDataSourceFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiDataSourceFilters(val *ApiDataSourceFilters) *NullableApiDataSourceFilters {
	return &NullableApiDataSourceFilters{value: val, isSet: true}
}

func (v NullableApiDataSourceFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiDataSourceFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


