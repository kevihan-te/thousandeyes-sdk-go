/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// checks if the ApiContextFilterRequest type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &ApiContextFilterRequest{}

// ApiContextFilterRequest Request containing dashboard filter name, description and context details.
type ApiContextFilterRequest struct {
	// List of filters to be applied to a dashboard.
	Context []ApiDataSourceFilters `json:"context"`
	// The name of the dashboard filter, this must be unique.
	Name string `json:"name"`
	// An optional description of the filter.
	Description *string `json:"description,omitempty"`
}

type _ApiContextFilterRequest ApiContextFilterRequest

// NewApiContextFilterRequest instantiates a new ApiContextFilterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiContextFilterRequest(context []ApiDataSourceFilters, name string) *ApiContextFilterRequest {
	this := ApiContextFilterRequest{}
	this.Context = context
	this.Name = name
	return &this
}

// NewApiContextFilterRequestWithDefaults instantiates a new ApiContextFilterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiContextFilterRequestWithDefaults() *ApiContextFilterRequest {
	this := ApiContextFilterRequest{}
	return &this
}

// GetContext returns the Context field value
func (o *ApiContextFilterRequest) GetContext() []ApiDataSourceFilters {
	if o == nil {
		var ret []ApiDataSourceFilters
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *ApiContextFilterRequest) GetContextOk() ([]ApiDataSourceFilters, bool) {
	if o == nil {
		return nil, false
	}
	return o.Context, true
}

// SetContext sets field value
func (o *ApiContextFilterRequest) SetContext(v []ApiDataSourceFilters) {
	o.Context = v
}

// GetName returns the Name field value
func (o *ApiContextFilterRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiContextFilterRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiContextFilterRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiContextFilterRequest) GetDescription() string {
	if o == nil || utils.IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiContextFilterRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiContextFilterRequest) HasDescription() bool {
	if o != nil && !utils.IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiContextFilterRequest) SetDescription(v string) {
	o.Description = &v
}

func (o ApiContextFilterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiContextFilterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["name"] = o.Name
	if !utils.IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *ApiContextFilterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiContextFilterRequest := _ApiContextFilterRequest{}

    err = json.Unmarshal(data, &varApiContextFilterRequest)

	if err != nil {
		return err
	}

	*o = ApiContextFilterRequest(varApiContextFilterRequest)

	return err
}

type NullableApiContextFilterRequest struct {
	value *ApiContextFilterRequest
	isSet bool
}

func (v NullableApiContextFilterRequest) Get() *ApiContextFilterRequest {
	return v.value
}

func (v *NullableApiContextFilterRequest) Set(val *ApiContextFilterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiContextFilterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiContextFilterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiContextFilterRequest(val *ApiContextFilterRequest) *NullableApiContextFilterRequest {
	return &NullableApiContextFilterRequest{value: val, isSet: true}
}

func (v NullableApiContextFilterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiContextFilterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


