/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// ApiAgentWidgetType Type of the agent.
type ApiAgentWidgetType string

// List of ApiAgentWidgetType
const (
	APIAGENTWIDGETTYPE_ENTERPRISE ApiAgentWidgetType = "enterprise"
	APIAGENTWIDGETTYPE_ENDPOINT ApiAgentWidgetType = "endpoint"
)

// All allowed values of ApiAgentWidgetType enum
var AllowedApiAgentWidgetTypeEnumValues = []ApiAgentWidgetType{
	"enterprise",
	"endpoint",
}

func (v *ApiAgentWidgetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiAgentWidgetType(value)
	for _, existing := range AllowedApiAgentWidgetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiAgentWidgetType", value)
}

// NewApiAgentWidgetTypeFromValue returns a pointer to a valid ApiAgentWidgetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiAgentWidgetTypeFromValue(v string) (*ApiAgentWidgetType, error) {
	ev := ApiAgentWidgetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiAgentWidgetType: valid values are %v", v, AllowedApiAgentWidgetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiAgentWidgetType) IsValid() bool {
	for _, existing := range AllowedApiAgentWidgetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiAgentWidgetType value
func (v ApiAgentWidgetType) Ptr() *ApiAgentWidgetType {
	return &v
}

type NullableApiAgentWidgetType struct {
	value *ApiAgentWidgetType
	isSet bool
}

func (v NullableApiAgentWidgetType) Get() *ApiAgentWidgetType {
	return v.value
}

func (v *NullableApiAgentWidgetType) Set(val *ApiAgentWidgetType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAgentWidgetType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAgentWidgetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAgentWidgetType(val *ApiAgentWidgetType) *NullableApiAgentWidgetType {
	return &NullableApiAgentWidgetType{value: val, isSet: true}
}

func (v NullableApiAgentWidgetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAgentWidgetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

