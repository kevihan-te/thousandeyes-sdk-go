/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// AswRepeat the model 'AswRepeat'
type AswRepeat string

// List of AswRepeat
const (
	ASWREPEAT_NONE AswRepeat = "none"
	ASWREPEAT_EVERY_DAY AswRepeat = "every-day"
	ASWREPEAT_ALT_EVERY_DAY AswRepeat = "alt-every-day"
	ASWREPEAT_EVERY_WEEK AswRepeat = "every-week"
	ASWREPEAT_EVERY_TWO_WEEK AswRepeat = "every-two-week"
	ASWREPEAT_EVERY_MONTH AswRepeat = "every-month"
	ASWREPEAT_EVERY_THREE_MONTH AswRepeat = "every-three-month"
	ASWREPEAT_CUSTOM AswRepeat = "custom"
)

// All allowed values of AswRepeat enum
var AllowedAswRepeatEnumValues = []AswRepeat{
	"none",
	"every-day",
	"alt-every-day",
	"every-week",
	"every-two-week",
	"every-month",
	"every-three-month",
	"custom",
}

func (v *AswRepeat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AswRepeat(value)
	for _, existing := range AllowedAswRepeatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AswRepeat", value)
}

// NewAswRepeatFromValue returns a pointer to a valid AswRepeat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAswRepeatFromValue(v string) (*AswRepeat, error) {
	ev := AswRepeat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AswRepeat: valid values are %v", v, AllowedAswRepeatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AswRepeat) IsValid() bool {
	for _, existing := range AllowedAswRepeatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AswRepeat value
func (v AswRepeat) Ptr() *AswRepeat {
	return &v
}

type NullableAswRepeat struct {
	value *AswRepeat
	isSet bool
}

func (v NullableAswRepeat) Get() *AswRepeat {
	return v.value
}

func (v *NullableAswRepeat) Set(val *AswRepeat) {
	v.value = val
	v.isSet = true
}

func (v NullableAswRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableAswRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAswRepeat(val *AswRepeat) *NullableAswRepeat {
	return &NullableAswRepeat{value: val, isSet: true}
}

func (v NullableAswRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAswRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

