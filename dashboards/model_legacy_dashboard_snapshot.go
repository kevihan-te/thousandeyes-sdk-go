/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
)

// checks if the LegacyDashboardSnapshot type satisfies the MappedNullable interface at compile time
var _ utils.MappedNullable = &LegacyDashboardSnapshot{}

// LegacyDashboardSnapshot struct for LegacyDashboardSnapshot
type LegacyDashboardSnapshot struct {
	// Identifier of the account group that the snapshot belongs to.
	AccountId *int64 `json:"accountId,omitempty"`
	// UTC date when dashboard snapshot was created.
	CreatedDate *string `json:"createdDate,omitempty"`
	// Expiration date of the snapshot. If unspecified, the snapshot expires 1 year from its creation date. The expiration date must be set within 5 years from the current date.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// Hyperlink to dashboard snapshot in ThousandEyes Application
	Permalink *string `json:"permalink,omitempty"`
	// A links array containing the self link.
	ApiLinks []map[string]interface{} `json:"apiLinks,omitempty"`
}

// NewLegacyDashboardSnapshot instantiates a new LegacyDashboardSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyDashboardSnapshot() *LegacyDashboardSnapshot {
	this := LegacyDashboardSnapshot{}
	return &this
}

// NewLegacyDashboardSnapshotWithDefaults instantiates a new LegacyDashboardSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyDashboardSnapshotWithDefaults() *LegacyDashboardSnapshot {
	this := LegacyDashboardSnapshot{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *LegacyDashboardSnapshot) GetAccountId() int64 {
	if o == nil || utils.IsNil(o.AccountId) {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyDashboardSnapshot) GetAccountIdOk() (*int64, bool) {
	if o == nil || utils.IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *LegacyDashboardSnapshot) HasAccountId() bool {
	if o != nil && !utils.IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *LegacyDashboardSnapshot) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *LegacyDashboardSnapshot) GetCreatedDate() string {
	if o == nil || utils.IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyDashboardSnapshot) GetCreatedDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *LegacyDashboardSnapshot) HasCreatedDate() bool {
	if o != nil && !utils.IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *LegacyDashboardSnapshot) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *LegacyDashboardSnapshot) GetExpirationDate() string {
	if o == nil || utils.IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyDashboardSnapshot) GetExpirationDateOk() (*string, bool) {
	if o == nil || utils.IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *LegacyDashboardSnapshot) HasExpirationDate() bool {
	if o != nil && !utils.IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *LegacyDashboardSnapshot) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetPermalink returns the Permalink field value if set, zero value otherwise.
func (o *LegacyDashboardSnapshot) GetPermalink() string {
	if o == nil || utils.IsNil(o.Permalink) {
		var ret string
		return ret
	}
	return *o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyDashboardSnapshot) GetPermalinkOk() (*string, bool) {
	if o == nil || utils.IsNil(o.Permalink) {
		return nil, false
	}
	return o.Permalink, true
}

// HasPermalink returns a boolean if a field has been set.
func (o *LegacyDashboardSnapshot) HasPermalink() bool {
	if o != nil && !utils.IsNil(o.Permalink) {
		return true
	}

	return false
}

// SetPermalink gets a reference to the given string and assigns it to the Permalink field.
func (o *LegacyDashboardSnapshot) SetPermalink(v string) {
	o.Permalink = &v
}

// GetApiLinks returns the ApiLinks field value if set, zero value otherwise.
func (o *LegacyDashboardSnapshot) GetApiLinks() []map[string]interface{} {
	if o == nil || utils.IsNil(o.ApiLinks) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ApiLinks
}

// GetApiLinksOk returns a tuple with the ApiLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyDashboardSnapshot) GetApiLinksOk() ([]map[string]interface{}, bool) {
	if o == nil || utils.IsNil(o.ApiLinks) {
		return nil, false
	}
	return o.ApiLinks, true
}

// HasApiLinks returns a boolean if a field has been set.
func (o *LegacyDashboardSnapshot) HasApiLinks() bool {
	if o != nil && !utils.IsNil(o.ApiLinks) {
		return true
	}

	return false
}

// SetApiLinks gets a reference to the given []map[string]interface{} and assigns it to the ApiLinks field.
func (o *LegacyDashboardSnapshot) SetApiLinks(v []map[string]interface{}) {
	o.ApiLinks = v
}

func (o LegacyDashboardSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyDashboardSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !utils.IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !utils.IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !utils.IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !utils.IsNil(o.Permalink) {
		toSerialize["permalink"] = o.Permalink
	}
	if !utils.IsNil(o.ApiLinks) {
		toSerialize["apiLinks"] = o.ApiLinks
	}
	return toSerialize, nil
}

type NullableLegacyDashboardSnapshot struct {
	value *LegacyDashboardSnapshot
	isSet bool
}

func (v NullableLegacyDashboardSnapshot) Get() *LegacyDashboardSnapshot {
	return v.value
}

func (v *NullableLegacyDashboardSnapshot) Set(val *LegacyDashboardSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyDashboardSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyDashboardSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyDashboardSnapshot(val *LegacyDashboardSnapshot) *NullableLegacyDashboardSnapshot {
	return &NullableLegacyDashboardSnapshot{value: val, isSet: true}
}

func (v NullableLegacyDashboardSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyDashboardSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


