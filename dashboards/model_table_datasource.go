/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// TableDatasource Datasource of the table widget.
type TableDatasource string

// List of TableDatasource
const (
	TABLEDATASOURCE_ALERTS TableDatasource = "ALERTS"
	TABLEDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS TableDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	TABLEDATASOURCE_DEVICES TableDatasource = "DEVICES"
	TABLEDATASOURCE_ENDPOINT_AGENTS TableDatasource = "ENDPOINT_AGENTS"
	TABLEDATASOURCE_ENDPOINT_AST_TEST TableDatasource = "ENDPOINT_AST_TEST"
	TABLEDATASOURCE_ENDPOINT_BROWSER_SESSION TableDatasource = "ENDPOINT_BROWSER_SESSION"
	TABLEDATASOURCE_ENDPOINT_LOCAL_NETWORK TableDatasource = "ENDPOINT_LOCAL_NETWORK"
	TABLEDATASOURCE_ENDPOINT_LOCAL_NETWORK_WIRELESS TableDatasource = "ENDPOINT_LOCAL_NETWORK_WIRELESS"
	TABLEDATASOURCE_ENDPOINT_SCHEDULED_TEST TableDatasource = "ENDPOINT_SCHEDULED_TEST"
	TABLEDATASOURCE_INTERNET_INSIGHTS TableDatasource = "INTERNET_INSIGHTS"
	TABLEDATASOURCE_ROUTING TableDatasource = "ROUTING"
	TABLEDATASOURCE_CLOUD_NATIVE_MONITORING TableDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of TableDatasource enum
var AllowedTableDatasourceEnumValues = []TableDatasource{
	"ALERTS",
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"DEVICES",
	"ENDPOINT_AGENTS",
	"ENDPOINT_AST_TEST",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_LOCAL_NETWORK",
	"ENDPOINT_LOCAL_NETWORK_WIRELESS",
	"ENDPOINT_SCHEDULED_TEST",
	"INTERNET_INSIGHTS",
	"ROUTING",
	"CLOUD_NATIVE_MONITORING",
}

func (v *TableDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TableDatasource(value)
	for _, existing := range AllowedTableDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TableDatasource", value)
}

// NewTableDatasourceFromValue returns a pointer to a valid TableDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTableDatasourceFromValue(v string) (*TableDatasource, error) {
	ev := TableDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TableDatasource: valid values are %v", v, AllowedTableDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TableDatasource) IsValid() bool {
	for _, existing := range AllowedTableDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TableDatasource value
func (v TableDatasource) Ptr() *TableDatasource {
	return &v
}

type NullableTableDatasource struct {
	value *TableDatasource
	isSet bool
}

func (v NullableTableDatasource) Get() *TableDatasource {
	return v.value
}

func (v *NullableTableDatasource) Set(val *TableDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableTableDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableTableDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableDatasource(val *TableDatasource) *NullableTableDatasource {
	return &NullableTableDatasource{value: val, isSet: true}
}

func (v NullableTableDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

