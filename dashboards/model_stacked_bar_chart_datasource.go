/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// StackedBarChartDatasource Datasource of the stacked bar chart widget.
type StackedBarChartDatasource string

// List of StackedBarChartDatasource
const (
	STACKEDBARCHARTDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS StackedBarChartDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	STACKEDBARCHARTDATASOURCE_ENDPOINT_AGENTS StackedBarChartDatasource = "ENDPOINT_AGENTS"
	STACKEDBARCHARTDATASOURCE_ENDPOINT_BROWSER_SESSION StackedBarChartDatasource = "ENDPOINT_BROWSER_SESSION"
	STACKEDBARCHARTDATASOURCE_ENDPOINT_SCHEDULED_TEST StackedBarChartDatasource = "ENDPOINT_SCHEDULED_TEST"
	STACKEDBARCHARTDATASOURCE_CLOUD_NATIVE_MONITORING StackedBarChartDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of StackedBarChartDatasource enum
var AllowedStackedBarChartDatasourceEnumValues = []StackedBarChartDatasource{
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"ENDPOINT_AGENTS",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_SCHEDULED_TEST",
	"CLOUD_NATIVE_MONITORING",
}

func (v *StackedBarChartDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StackedBarChartDatasource(value)
	for _, existing := range AllowedStackedBarChartDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StackedBarChartDatasource", value)
}

// NewStackedBarChartDatasourceFromValue returns a pointer to a valid StackedBarChartDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStackedBarChartDatasourceFromValue(v string) (*StackedBarChartDatasource, error) {
	ev := StackedBarChartDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StackedBarChartDatasource: valid values are %v", v, AllowedStackedBarChartDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StackedBarChartDatasource) IsValid() bool {
	for _, existing := range AllowedStackedBarChartDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StackedBarChartDatasource value
func (v StackedBarChartDatasource) Ptr() *StackedBarChartDatasource {
	return &v
}

type NullableStackedBarChartDatasource struct {
	value *StackedBarChartDatasource
	isSet bool
}

func (v NullableStackedBarChartDatasource) Get() *StackedBarChartDatasource {
	return v.value
}

func (v *NullableStackedBarChartDatasource) Set(val *StackedBarChartDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableStackedBarChartDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableStackedBarChartDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackedBarChartDatasource(val *StackedBarChartDatasource) *NullableStackedBarChartDatasource {
	return &NullableStackedBarChartDatasource{value: val, isSet: true}
}

func (v NullableStackedBarChartDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackedBarChartDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

