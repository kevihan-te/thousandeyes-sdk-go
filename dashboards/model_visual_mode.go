/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// VisualMode Visual mode in the UI. Either full or half the width of the window.
type VisualMode string

// List of VisualMode
const (
	VISUALMODE_FULL VisualMode = "Full"
	VISUALMODE_HALF_SCREEN VisualMode = "Half screen"
)

// All allowed values of VisualMode enum
var AllowedVisualModeEnumValues = []VisualMode{
	"Full",
	"Half screen",
}

func (v *VisualMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VisualMode(value)
	for _, existing := range AllowedVisualModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VisualMode", value)
}

// NewVisualModeFromValue returns a pointer to a valid VisualMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVisualModeFromValue(v string) (*VisualMode, error) {
	ev := VisualMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VisualMode: valid values are %v", v, AllowedVisualModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VisualMode) IsValid() bool {
	for _, existing := range AllowedVisualModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VisualMode value
func (v VisualMode) Ptr() *VisualMode {
	return &v
}

type NullableVisualMode struct {
	value *VisualMode
	isSet bool
}

func (v NullableVisualMode) Get() *VisualMode {
	return v.value
}

func (v *NullableVisualMode) Set(val *VisualMode) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualMode) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualMode(val *VisualMode) *NullableVisualMode {
	return &NullableVisualMode{value: val, isSet: true}
}

func (v NullableVisualMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

