/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// DashboardMetricDirection Direction of agent to agent metric.
type DashboardMetricDirection string

// List of DashboardMetricDirection
const (
	DASHBOARDMETRICDIRECTION_TO_TARGET DashboardMetricDirection = "TO_TARGET"
	DASHBOARDMETRICDIRECTION_FROM_TARGET DashboardMetricDirection = "FROM_TARGET"
	DASHBOARDMETRICDIRECTION_BIDIRECTIONAL DashboardMetricDirection = "BIDIRECTIONAL"
)

// All allowed values of DashboardMetricDirection enum
var AllowedDashboardMetricDirectionEnumValues = []DashboardMetricDirection{
	"TO_TARGET",
	"FROM_TARGET",
	"BIDIRECTIONAL",
}

func (v *DashboardMetricDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DashboardMetricDirection(value)
	for _, existing := range AllowedDashboardMetricDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DashboardMetricDirection", value)
}

// NewDashboardMetricDirectionFromValue returns a pointer to a valid DashboardMetricDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDashboardMetricDirectionFromValue(v string) (*DashboardMetricDirection, error) {
	ev := DashboardMetricDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DashboardMetricDirection: valid values are %v", v, AllowedDashboardMetricDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DashboardMetricDirection) IsValid() bool {
	for _, existing := range AllowedDashboardMetricDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DashboardMetricDirection value
func (v DashboardMetricDirection) Ptr() *DashboardMetricDirection {
	return &v
}

type NullableDashboardMetricDirection struct {
	value *DashboardMetricDirection
	isSet bool
}

func (v NullableDashboardMetricDirection) Get() *DashboardMetricDirection {
	return v.value
}

func (v *NullableDashboardMetricDirection) Set(val *DashboardMetricDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardMetricDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardMetricDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardMetricDirection(val *DashboardMetricDirection) *NullableDashboardMetricDirection {
	return &NullableDashboardMetricDirection{value: val, isSet: true}
}

func (v NullableDashboardMetricDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardMetricDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

