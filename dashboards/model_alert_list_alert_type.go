/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// AlertListAlertType Name of the alert type
type AlertListAlertType string

// List of AlertListAlertType
const (
	ALERTLISTALERTTYPE_NETWORK_END_TO_END_SERVER AlertListAlertType = "network-end-to-end-server"
	ALERTLISTALERTTYPE_NETWORK_END_TO_END_AGENT AlertListAlertType = "network-end-to-end-agent"
	ALERTLISTALERTTYPE_NETWORK_PATH_TRACE AlertListAlertType = "network-path-trace"
	ALERTLISTALERTTYPE_DNS_SERVER AlertListAlertType = "dns-server"
	ALERTLISTALERTTYPE_DNS_TRACE AlertListAlertType = "dns-trace"
	ALERTLISTALERTTYPE_DNSSEC AlertListAlertType = "dnssec"
	ALERTLISTALERTTYPE_DNS_PLUS_DOMAIN AlertListAlertType = "dns-plus-domain"
	ALERTLISTALERTTYPE_DNS_PLUS_SERVER AlertListAlertType = "dns-plus-server"
	ALERTLISTALERTTYPE_WEB_HTTP_SERVER AlertListAlertType = "web-http-server"
	ALERTLISTALERTTYPE_WEB_PAGE_LOAD AlertListAlertType = "web-page-load"
	ALERTLISTALERTTYPE_WEB_TRANSACTION_CLASSIC AlertListAlertType = "web-transaction-classic"
	ALERTLISTALERTTYPE_WEB_TRANSACTION AlertListAlertType = "web-transaction"
	ALERTLISTALERTTYPE_WEB_FTP_SERVER AlertListAlertType = "web-ftp-server"
	ALERTLISTALERTTYPE_VOICE_SIP_SERVER AlertListAlertType = "voice-sip-server"
	ALERTLISTALERTTYPE_VOICE_RTP_STREAM AlertListAlertType = "voice-rtp-stream"
	ALERTLISTALERTTYPE_DEVICE AlertListAlertType = "device"
	ALERTLISTALERTTYPE_DEVICE_INTERFACE AlertListAlertType = "device-interface"
	ALERTLISTALERTTYPE_ENDPOINT_END_TO_END_SERVER AlertListAlertType = "endpoint-end-to-end-server"
	ALERTLISTALERTTYPE_ENDPOINT_WEB_HTTP_SERVER AlertListAlertType = "endpoint-web-http-server"
	ALERTLISTALERTTYPE_ENDPOINT_PATH_TRACE AlertListAlertType = "endpoint-path-trace"
	ALERTLISTALERTTYPE_BROWSER_SESSION_AGENT AlertListAlertType = "browser-session-agent"
	ALERTLISTALERTTYPE_BROWSER_SESSION_APPLICATION AlertListAlertType = "browser-session-application"
	ALERTLISTALERTTYPE_ROUTING_BGP AlertListAlertType = "routing-bgp"
)

// All allowed values of AlertListAlertType enum
var AllowedAlertListAlertTypeEnumValues = []AlertListAlertType{
	"network-end-to-end-server",
	"network-end-to-end-agent",
	"network-path-trace",
	"dns-server",
	"dns-trace",
	"dnssec",
	"dns-plus-domain",
	"dns-plus-server",
	"web-http-server",
	"web-page-load",
	"web-transaction-classic",
	"web-transaction",
	"web-ftp-server",
	"voice-sip-server",
	"voice-rtp-stream",
	"device",
	"device-interface",
	"endpoint-end-to-end-server",
	"endpoint-web-http-server",
	"endpoint-path-trace",
	"browser-session-agent",
	"browser-session-application",
	"routing-bgp",
}

func (v *AlertListAlertType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertListAlertType(value)
	for _, existing := range AllowedAlertListAlertTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertListAlertType", value)
}

// NewAlertListAlertTypeFromValue returns a pointer to a valid AlertListAlertType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertListAlertTypeFromValue(v string) (*AlertListAlertType, error) {
	ev := AlertListAlertType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertListAlertType: valid values are %v", v, AllowedAlertListAlertTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertListAlertType) IsValid() bool {
	for _, existing := range AllowedAlertListAlertTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertListAlertType value
func (v AlertListAlertType) Ptr() *AlertListAlertType {
	return &v
}

type NullableAlertListAlertType struct {
	value *AlertListAlertType
	isSet bool
}

func (v NullableAlertListAlertType) Get() *AlertListAlertType {
	return v.value
}

func (v *NullableAlertListAlertType) Set(val *AlertListAlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertListAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertListAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertListAlertType(val *AlertListAlertType) *NullableAlertListAlertType {
	return &NullableAlertListAlertType{value: val, isSet: true}
}

func (v NullableAlertListAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertListAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

