/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// StackedAreaChartDatasource Datasource of the stacked area chart widget.
type StackedAreaChartDatasource string

// List of StackedAreaChartDatasource
const (
	STACKEDAREACHARTDATASOURCE_CLOUD_AND_ENTERPRISE_AGENTS StackedAreaChartDatasource = "CLOUD_AND_ENTERPRISE_AGENTS"
	STACKEDAREACHARTDATASOURCE_ENDPOINT_AGENTS StackedAreaChartDatasource = "ENDPOINT_AGENTS"
	STACKEDAREACHARTDATASOURCE_ENDPOINT_BROWSER_SESSION StackedAreaChartDatasource = "ENDPOINT_BROWSER_SESSION"
	STACKEDAREACHARTDATASOURCE_ENDPOINT_SCHEDULED_TEST StackedAreaChartDatasource = "ENDPOINT_SCHEDULED_TEST"
	STACKEDAREACHARTDATASOURCE_CLOUD_NATIVE_MONITORING StackedAreaChartDatasource = "CLOUD_NATIVE_MONITORING"
)

// All allowed values of StackedAreaChartDatasource enum
var AllowedStackedAreaChartDatasourceEnumValues = []StackedAreaChartDatasource{
	"CLOUD_AND_ENTERPRISE_AGENTS",
	"ENDPOINT_AGENTS",
	"ENDPOINT_BROWSER_SESSION",
	"ENDPOINT_SCHEDULED_TEST",
	"CLOUD_NATIVE_MONITORING",
}

func (v *StackedAreaChartDatasource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StackedAreaChartDatasource(value)
	for _, existing := range AllowedStackedAreaChartDatasourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StackedAreaChartDatasource", value)
}

// NewStackedAreaChartDatasourceFromValue returns a pointer to a valid StackedAreaChartDatasource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStackedAreaChartDatasourceFromValue(v string) (*StackedAreaChartDatasource, error) {
	ev := StackedAreaChartDatasource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StackedAreaChartDatasource: valid values are %v", v, AllowedStackedAreaChartDatasourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StackedAreaChartDatasource) IsValid() bool {
	for _, existing := range AllowedStackedAreaChartDatasourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StackedAreaChartDatasource value
func (v StackedAreaChartDatasource) Ptr() *StackedAreaChartDatasource {
	return &v
}

type NullableStackedAreaChartDatasource struct {
	value *StackedAreaChartDatasource
	isSet bool
}

func (v NullableStackedAreaChartDatasource) Get() *StackedAreaChartDatasource {
	return v.value
}

func (v *NullableStackedAreaChartDatasource) Set(val *StackedAreaChartDatasource) {
	v.value = val
	v.isSet = true
}

func (v NullableStackedAreaChartDatasource) IsSet() bool {
	return v.isSet
}

func (v *NullableStackedAreaChartDatasource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackedAreaChartDatasource(val *StackedAreaChartDatasource) *NullableStackedAreaChartDatasource {
	return &NullableStackedAreaChartDatasource{value: val, isSet: true}
}

func (v NullableStackedAreaChartDatasource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackedAreaChartDatasource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

