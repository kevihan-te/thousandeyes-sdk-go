/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// ApiWidgetFixedYScalePrefix Prefix denoting the unit of measurement for the fixed Y-axis scale.
type ApiWidgetFixedYScalePrefix string

// List of ApiWidgetFixedYScalePrefix
const (
	APIWIDGETFIXEDYSCALEPREFIX_KBPS ApiWidgetFixedYScalePrefix = "Kbps"
	APIWIDGETFIXEDYSCALEPREFIX_MBPS ApiWidgetFixedYScalePrefix = "Mbps"
	APIWIDGETFIXEDYSCALEPREFIX_GBPS ApiWidgetFixedYScalePrefix = "Gbps"
	APIWIDGETFIXEDYSCALEPREFIX_KBITPS ApiWidgetFixedYScalePrefix = "Kbitps"
	APIWIDGETFIXEDYSCALEPREFIX_MBITPS ApiWidgetFixedYScalePrefix = "Mbitps"
	APIWIDGETFIXEDYSCALEPREFIX_GBITPS ApiWidgetFixedYScalePrefix = "Gbitps"
	APIWIDGETFIXEDYSCALEPREFIX_KPPS ApiWidgetFixedYScalePrefix = "Kpps"
	APIWIDGETFIXEDYSCALEPREFIX_MPPS ApiWidgetFixedYScalePrefix = "Mpps"
	APIWIDGETFIXEDYSCALEPREFIX_GPPS ApiWidgetFixedYScalePrefix = "Gpps"
)

// All allowed values of ApiWidgetFixedYScalePrefix enum
var AllowedApiWidgetFixedYScalePrefixEnumValues = []ApiWidgetFixedYScalePrefix{
	"Kbps",
	"Mbps",
	"Gbps",
	"Kbitps",
	"Mbitps",
	"Gbitps",
	"Kpps",
	"Mpps",
	"Gpps",
}

func (v *ApiWidgetFixedYScalePrefix) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiWidgetFixedYScalePrefix(value)
	for _, existing := range AllowedApiWidgetFixedYScalePrefixEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiWidgetFixedYScalePrefix", value)
}

// NewApiWidgetFixedYScalePrefixFromValue returns a pointer to a valid ApiWidgetFixedYScalePrefix
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiWidgetFixedYScalePrefixFromValue(v string) (*ApiWidgetFixedYScalePrefix, error) {
	ev := ApiWidgetFixedYScalePrefix(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiWidgetFixedYScalePrefix: valid values are %v", v, AllowedApiWidgetFixedYScalePrefixEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiWidgetFixedYScalePrefix) IsValid() bool {
	for _, existing := range AllowedApiWidgetFixedYScalePrefixEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiWidgetFixedYScalePrefix value
func (v ApiWidgetFixedYScalePrefix) Ptr() *ApiWidgetFixedYScalePrefix {
	return &v
}

type NullableApiWidgetFixedYScalePrefix struct {
	value *ApiWidgetFixedYScalePrefix
	isSet bool
}

func (v NullableApiWidgetFixedYScalePrefix) Get() *ApiWidgetFixedYScalePrefix {
	return v.value
}

func (v *NullableApiWidgetFixedYScalePrefix) Set(val *ApiWidgetFixedYScalePrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWidgetFixedYScalePrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWidgetFixedYScalePrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWidgetFixedYScalePrefix(val *ApiWidgetFixedYScalePrefix) *NullableApiWidgetFixedYScalePrefix {
	return &NullableApiWidgetFixedYScalePrefix{value: val, isSet: true}
}

func (v NullableApiWidgetFixedYScalePrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWidgetFixedYScalePrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

