/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// LegacyAlertListAlertType Name of the alert type
type LegacyAlertListAlertType string

// List of LegacyAlertListAlertType
const (
	LEGACYALERTLISTALERTTYPE_NETWORK___END_TO_END__SERVER LegacyAlertListAlertType = "Network - End-to-End (Server)"
	LEGACYALERTLISTALERTTYPE_NETWORK___END_TO_END__AGENT LegacyAlertListAlertType = "Network - End-to-End (Agent)"
	LEGACYALERTLISTALERTTYPE_NETWORK___PATH_TRACE LegacyAlertListAlertType = "Network - Path Trace"
	LEGACYALERTLISTALERTTYPE_DNS_SERVER LegacyAlertListAlertType = "DNS Server"
	LEGACYALERTLISTALERTTYPE_DNS_TRACE LegacyAlertListAlertType = "DNS Trace"
	LEGACYALERTLISTALERTTYPE_DNSSEC LegacyAlertListAlertType = "DNSSEC"
	LEGACYALERTLISTALERTTYPE_DNS_DOMAIN LegacyAlertListAlertType = "DNS+ Domain"
	LEGACYALERTLISTALERTTYPE_DNS_SERVER2 LegacyAlertListAlertType = "DNS+ Server"
	LEGACYALERTLISTALERTTYPE_WEB___HTTP_SERVER LegacyAlertListAlertType = "Web - HTTP Server"
	LEGACYALERTLISTALERTTYPE_WEB___PAGE_LOAD LegacyAlertListAlertType = "Web - Page Load"
	LEGACYALERTLISTALERTTYPE_WEB___TRANSACTION__CLASSIC LegacyAlertListAlertType = "Web - Transaction (Classic)"
	LEGACYALERTLISTALERTTYPE_WEB___TRANSACTION LegacyAlertListAlertType = "Web - Transaction"
	LEGACYALERTLISTALERTTYPE_WEB___FTP_SERVER LegacyAlertListAlertType = "Web - FTP Server"
	LEGACYALERTLISTALERTTYPE_VOICE___SIP_SERVER LegacyAlertListAlertType = "Voice - SIP Server"
	LEGACYALERTLISTALERTTYPE_VOICE___RTP_STREAM LegacyAlertListAlertType = "Voice - RTP Stream"
	LEGACYALERTLISTALERTTYPE_DEVICE LegacyAlertListAlertType = "Device"
	LEGACYALERTLISTALERTTYPE_DEVICE_INTERFACE LegacyAlertListAlertType = "Device Interface"
	LEGACYALERTLISTALERTTYPE_ENDPOINT___END_TO_END__SERVER LegacyAlertListAlertType = "Endpoint - End-to-End (Server)"
	LEGACYALERTLISTALERTTYPE_ENDPOINT_WEB___HTTP_SERVER LegacyAlertListAlertType = "EndpointWeb - HTTP Server"
	LEGACYALERTLISTALERTTYPE_ENDPOINT___PATH_TRACE LegacyAlertListAlertType = "Endpoint - Path Trace"
	LEGACYALERTLISTALERTTYPE_BROWSER_SESSIONS___AGENT LegacyAlertListAlertType = "Browser Sessions - Agent"
	LEGACYALERTLISTALERTTYPE_BROWSER_SESSIONS___APPLICATION LegacyAlertListAlertType = "Browser Sessions - Application"
	LEGACYALERTLISTALERTTYPE_ROUTING___BGP LegacyAlertListAlertType = "Routing - BGP"
)

// All allowed values of LegacyAlertListAlertType enum
var AllowedLegacyAlertListAlertTypeEnumValues = []LegacyAlertListAlertType{
	"Network - End-to-End (Server)",
	"Network - End-to-End (Agent)",
	"Network - Path Trace",
	"DNS Server",
	"DNS Trace",
	"DNSSEC",
	"DNS+ Domain",
	"DNS+ Server",
	"Web - HTTP Server",
	"Web - Page Load",
	"Web - Transaction (Classic)",
	"Web - Transaction",
	"Web - FTP Server",
	"Voice - SIP Server",
	"Voice - RTP Stream",
	"Device",
	"Device Interface",
	"Endpoint - End-to-End (Server)",
	"EndpointWeb - HTTP Server",
	"Endpoint - Path Trace",
	"Browser Sessions - Agent",
	"Browser Sessions - Application",
	"Routing - BGP",
}

func (v *LegacyAlertListAlertType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegacyAlertListAlertType(value)
	for _, existing := range AllowedLegacyAlertListAlertTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegacyAlertListAlertType", value)
}

// NewLegacyAlertListAlertTypeFromValue returns a pointer to a valid LegacyAlertListAlertType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegacyAlertListAlertTypeFromValue(v string) (*LegacyAlertListAlertType, error) {
	ev := LegacyAlertListAlertType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegacyAlertListAlertType: valid values are %v", v, AllowedLegacyAlertListAlertTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegacyAlertListAlertType) IsValid() bool {
	for _, existing := range AllowedLegacyAlertListAlertTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegacyAlertListAlertType value
func (v LegacyAlertListAlertType) Ptr() *LegacyAlertListAlertType {
	return &v
}

type NullableLegacyAlertListAlertType struct {
	value *LegacyAlertListAlertType
	isSet bool
}

func (v NullableLegacyAlertListAlertType) Get() *LegacyAlertListAlertType {
	return v.value
}

func (v *NullableLegacyAlertListAlertType) Set(val *LegacyAlertListAlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyAlertListAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyAlertListAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyAlertListAlertType(val *LegacyAlertListAlertType) *NullableLegacyAlertListAlertType {
	return &NullableLegacyAlertListAlertType{value: val, isSet: true}
}

func (v NullableLegacyAlertListAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyAlertListAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

