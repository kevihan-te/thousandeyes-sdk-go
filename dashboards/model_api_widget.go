/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
    "github.com/thousandeyes/thousandeyes-sdk-go/v3/internal/utils"
	"fmt"
)

// ApiWidget - struct for ApiWidget
type ApiWidget struct {
	ApiAgentStatusWidget *ApiAgentStatusWidget
	ApiAlertListWidget *ApiAlertListWidget
	ApiBoxAndWhiskersWidget *ApiBoxAndWhiskersWidget
	ApiColorGridWidget *ApiColorGridWidget
	ApiGeoMapWidget *ApiGeoMapWidget
	ApiGroupedBarchartWidget *ApiGroupedBarchartWidget
	ApiMultiMetricTableWidget *ApiMultiMetricTableWidget
	ApiNumbersCardWidget *ApiNumbersCardWidget
	ApiPieChartWidget *ApiPieChartWidget
	ApiStackedAreaChartWidget *ApiStackedAreaChartWidget
	ApiStackedBarchartWidget *ApiStackedBarchartWidget
	ApiTableWidget *ApiTableWidget
	ApiTestTableWidget *ApiTestTableWidget
	ApiTimeseriesWidget *ApiTimeseriesWidget
}

// ApiAgentStatusWidgetAsApiWidget is a convenience function that returns ApiAgentStatusWidget wrapped in ApiWidget
func ApiAgentStatusWidgetAsApiWidget(v *ApiAgentStatusWidget) ApiWidget {
	return ApiWidget{
		ApiAgentStatusWidget: v,
	}
}

// ApiAlertListWidgetAsApiWidget is a convenience function that returns ApiAlertListWidget wrapped in ApiWidget
func ApiAlertListWidgetAsApiWidget(v *ApiAlertListWidget) ApiWidget {
	return ApiWidget{
		ApiAlertListWidget: v,
	}
}

// ApiBoxAndWhiskersWidgetAsApiWidget is a convenience function that returns ApiBoxAndWhiskersWidget wrapped in ApiWidget
func ApiBoxAndWhiskersWidgetAsApiWidget(v *ApiBoxAndWhiskersWidget) ApiWidget {
	return ApiWidget{
		ApiBoxAndWhiskersWidget: v,
	}
}

// ApiColorGridWidgetAsApiWidget is a convenience function that returns ApiColorGridWidget wrapped in ApiWidget
func ApiColorGridWidgetAsApiWidget(v *ApiColorGridWidget) ApiWidget {
	return ApiWidget{
		ApiColorGridWidget: v,
	}
}

// ApiGeoMapWidgetAsApiWidget is a convenience function that returns ApiGeoMapWidget wrapped in ApiWidget
func ApiGeoMapWidgetAsApiWidget(v *ApiGeoMapWidget) ApiWidget {
	return ApiWidget{
		ApiGeoMapWidget: v,
	}
}

// ApiGroupedBarchartWidgetAsApiWidget is a convenience function that returns ApiGroupedBarchartWidget wrapped in ApiWidget
func ApiGroupedBarchartWidgetAsApiWidget(v *ApiGroupedBarchartWidget) ApiWidget {
	return ApiWidget{
		ApiGroupedBarchartWidget: v,
	}
}

// ApiMultiMetricTableWidgetAsApiWidget is a convenience function that returns ApiMultiMetricTableWidget wrapped in ApiWidget
func ApiMultiMetricTableWidgetAsApiWidget(v *ApiMultiMetricTableWidget) ApiWidget {
	return ApiWidget{
		ApiMultiMetricTableWidget: v,
	}
}

// ApiNumbersCardWidgetAsApiWidget is a convenience function that returns ApiNumbersCardWidget wrapped in ApiWidget
func ApiNumbersCardWidgetAsApiWidget(v *ApiNumbersCardWidget) ApiWidget {
	return ApiWidget{
		ApiNumbersCardWidget: v,
	}
}

// ApiPieChartWidgetAsApiWidget is a convenience function that returns ApiPieChartWidget wrapped in ApiWidget
func ApiPieChartWidgetAsApiWidget(v *ApiPieChartWidget) ApiWidget {
	return ApiWidget{
		ApiPieChartWidget: v,
	}
}

// ApiStackedAreaChartWidgetAsApiWidget is a convenience function that returns ApiStackedAreaChartWidget wrapped in ApiWidget
func ApiStackedAreaChartWidgetAsApiWidget(v *ApiStackedAreaChartWidget) ApiWidget {
	return ApiWidget{
		ApiStackedAreaChartWidget: v,
	}
}

// ApiStackedBarchartWidgetAsApiWidget is a convenience function that returns ApiStackedBarchartWidget wrapped in ApiWidget
func ApiStackedBarchartWidgetAsApiWidget(v *ApiStackedBarchartWidget) ApiWidget {
	return ApiWidget{
		ApiStackedBarchartWidget: v,
	}
}

// ApiTableWidgetAsApiWidget is a convenience function that returns ApiTableWidget wrapped in ApiWidget
func ApiTableWidgetAsApiWidget(v *ApiTableWidget) ApiWidget {
	return ApiWidget{
		ApiTableWidget: v,
	}
}

// ApiTestTableWidgetAsApiWidget is a convenience function that returns ApiTestTableWidget wrapped in ApiWidget
func ApiTestTableWidgetAsApiWidget(v *ApiTestTableWidget) ApiWidget {
	return ApiWidget{
		ApiTestTableWidget: v,
	}
}

// ApiTimeseriesWidgetAsApiWidget is a convenience function that returns ApiTimeseriesWidget wrapped in ApiWidget
func ApiTimeseriesWidgetAsApiWidget(v *ApiTimeseriesWidget) ApiWidget {
	return ApiWidget{
		ApiTimeseriesWidget: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiWidget) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = utils.NewStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'Agent Status'
	if jsonDict["type"] == "Agent Status" {
		// try to unmarshal JSON data into ApiAgentStatusWidget
		err = json.Unmarshal(data, &dst.ApiAgentStatusWidget)
		if err == nil {
			return nil // data stored in dst.ApiAgentStatusWidget, return on the first match
		} else {
			dst.ApiAgentStatusWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiAgentStatusWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Alert List'
	if jsonDict["type"] == "Alert List" {
		// try to unmarshal JSON data into ApiAlertListWidget
		err = json.Unmarshal(data, &dst.ApiAlertListWidget)
		if err == nil {
			return nil // data stored in dst.ApiAlertListWidget, return on the first match
		} else {
			dst.ApiAlertListWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiAlertListWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Bar Chart: Grouped'
	if jsonDict["type"] == "Bar Chart: Grouped" {
		// try to unmarshal JSON data into ApiGroupedBarchartWidget
		err = json.Unmarshal(data, &dst.ApiGroupedBarchartWidget)
		if err == nil {
			return nil // data stored in dst.ApiGroupedBarchartWidget, return on the first match
		} else {
			dst.ApiGroupedBarchartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiGroupedBarchartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Bar Chart: Stacked'
	if jsonDict["type"] == "Bar Chart: Stacked" {
		// try to unmarshal JSON data into ApiStackedBarchartWidget
		err = json.Unmarshal(data, &dst.ApiStackedBarchartWidget)
		if err == nil {
			return nil // data stored in dst.ApiStackedBarchartWidget, return on the first match
		} else {
			dst.ApiStackedBarchartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiStackedBarchartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Box and Whiskers'
	if jsonDict["type"] == "Box and Whiskers" {
		// try to unmarshal JSON data into ApiBoxAndWhiskersWidget
		err = json.Unmarshal(data, &dst.ApiBoxAndWhiskersWidget)
		if err == nil {
			return nil // data stored in dst.ApiBoxAndWhiskersWidget, return on the first match
		} else {
			dst.ApiBoxAndWhiskersWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiBoxAndWhiskersWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Color Grid'
	if jsonDict["type"] == "Color Grid" {
		// try to unmarshal JSON data into ApiColorGridWidget
		err = json.Unmarshal(data, &dst.ApiColorGridWidget)
		if err == nil {
			return nil // data stored in dst.ApiColorGridWidget, return on the first match
		} else {
			dst.ApiColorGridWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiColorGridWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Map'
	if jsonDict["type"] == "Map" {
		// try to unmarshal JSON data into ApiGeoMapWidget
		err = json.Unmarshal(data, &dst.ApiGeoMapWidget)
		if err == nil {
			return nil // data stored in dst.ApiGeoMapWidget, return on the first match
		} else {
			dst.ApiGeoMapWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiGeoMapWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Multi Metric Table'
	if jsonDict["type"] == "Multi Metric Table" {
		// try to unmarshal JSON data into ApiMultiMetricTableWidget
		err = json.Unmarshal(data, &dst.ApiMultiMetricTableWidget)
		if err == nil {
			return nil // data stored in dst.ApiMultiMetricTableWidget, return on the first match
		} else {
			dst.ApiMultiMetricTableWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiMultiMetricTableWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Number'
	if jsonDict["type"] == "Number" {
		// try to unmarshal JSON data into ApiNumbersCardWidget
		err = json.Unmarshal(data, &dst.ApiNumbersCardWidget)
		if err == nil {
			return nil // data stored in dst.ApiNumbersCardWidget, return on the first match
		} else {
			dst.ApiNumbersCardWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiNumbersCardWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Pie Chart'
	if jsonDict["type"] == "Pie Chart" {
		// try to unmarshal JSON data into ApiPieChartWidget
		err = json.Unmarshal(data, &dst.ApiPieChartWidget)
		if err == nil {
			return nil // data stored in dst.ApiPieChartWidget, return on the first match
		} else {
			dst.ApiPieChartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiPieChartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Table'
	if jsonDict["type"] == "Table" {
		// try to unmarshal JSON data into ApiTableWidget
		err = json.Unmarshal(data, &dst.ApiTableWidget)
		if err == nil {
			return nil // data stored in dst.ApiTableWidget, return on the first match
		} else {
			dst.ApiTableWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiTableWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Test Table'
	if jsonDict["type"] == "Test Table" {
		// try to unmarshal JSON data into ApiTestTableWidget
		err = json.Unmarshal(data, &dst.ApiTestTableWidget)
		if err == nil {
			return nil // data stored in dst.ApiTestTableWidget, return on the first match
		} else {
			dst.ApiTestTableWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiTestTableWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Time Series: Line'
	if jsonDict["type"] == "Time Series: Line" {
		// try to unmarshal JSON data into ApiTimeseriesWidget
		err = json.Unmarshal(data, &dst.ApiTimeseriesWidget)
		if err == nil {
			return nil // data stored in dst.ApiTimeseriesWidget, return on the first match
		} else {
			dst.ApiTimeseriesWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiTimeseriesWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'Time Series: Stacked Area'
	if jsonDict["type"] == "Time Series: Stacked Area" {
		// try to unmarshal JSON data into ApiStackedAreaChartWidget
		err = json.Unmarshal(data, &dst.ApiStackedAreaChartWidget)
		if err == nil {
			return nil // data stored in dst.ApiStackedAreaChartWidget, return on the first match
		} else {
			dst.ApiStackedAreaChartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiStackedAreaChartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiAgentStatusWidget'
	if jsonDict["type"] == "ApiAgentStatusWidget" {
		// try to unmarshal JSON data into ApiAgentStatusWidget
		err = json.Unmarshal(data, &dst.ApiAgentStatusWidget)
		if err == nil {
			return nil // data stored in dst.ApiAgentStatusWidget, return on the first match
		} else {
			dst.ApiAgentStatusWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiAgentStatusWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiAlertListWidget'
	if jsonDict["type"] == "ApiAlertListWidget" {
		// try to unmarshal JSON data into ApiAlertListWidget
		err = json.Unmarshal(data, &dst.ApiAlertListWidget)
		if err == nil {
			return nil // data stored in dst.ApiAlertListWidget, return on the first match
		} else {
			dst.ApiAlertListWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiAlertListWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiBoxAndWhiskersWidget'
	if jsonDict["type"] == "ApiBoxAndWhiskersWidget" {
		// try to unmarshal JSON data into ApiBoxAndWhiskersWidget
		err = json.Unmarshal(data, &dst.ApiBoxAndWhiskersWidget)
		if err == nil {
			return nil // data stored in dst.ApiBoxAndWhiskersWidget, return on the first match
		} else {
			dst.ApiBoxAndWhiskersWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiBoxAndWhiskersWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiColorGridWidget'
	if jsonDict["type"] == "ApiColorGridWidget" {
		// try to unmarshal JSON data into ApiColorGridWidget
		err = json.Unmarshal(data, &dst.ApiColorGridWidget)
		if err == nil {
			return nil // data stored in dst.ApiColorGridWidget, return on the first match
		} else {
			dst.ApiColorGridWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiColorGridWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiGeoMapWidget'
	if jsonDict["type"] == "ApiGeoMapWidget" {
		// try to unmarshal JSON data into ApiGeoMapWidget
		err = json.Unmarshal(data, &dst.ApiGeoMapWidget)
		if err == nil {
			return nil // data stored in dst.ApiGeoMapWidget, return on the first match
		} else {
			dst.ApiGeoMapWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiGeoMapWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiGroupedBarchartWidget'
	if jsonDict["type"] == "ApiGroupedBarchartWidget" {
		// try to unmarshal JSON data into ApiGroupedBarchartWidget
		err = json.Unmarshal(data, &dst.ApiGroupedBarchartWidget)
		if err == nil {
			return nil // data stored in dst.ApiGroupedBarchartWidget, return on the first match
		} else {
			dst.ApiGroupedBarchartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiGroupedBarchartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiMultiMetricTableWidget'
	if jsonDict["type"] == "ApiMultiMetricTableWidget" {
		// try to unmarshal JSON data into ApiMultiMetricTableWidget
		err = json.Unmarshal(data, &dst.ApiMultiMetricTableWidget)
		if err == nil {
			return nil // data stored in dst.ApiMultiMetricTableWidget, return on the first match
		} else {
			dst.ApiMultiMetricTableWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiMultiMetricTableWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiNumbersCardWidget'
	if jsonDict["type"] == "ApiNumbersCardWidget" {
		// try to unmarshal JSON data into ApiNumbersCardWidget
		err = json.Unmarshal(data, &dst.ApiNumbersCardWidget)
		if err == nil {
			return nil // data stored in dst.ApiNumbersCardWidget, return on the first match
		} else {
			dst.ApiNumbersCardWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiNumbersCardWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiPieChartWidget'
	if jsonDict["type"] == "ApiPieChartWidget" {
		// try to unmarshal JSON data into ApiPieChartWidget
		err = json.Unmarshal(data, &dst.ApiPieChartWidget)
		if err == nil {
			return nil // data stored in dst.ApiPieChartWidget, return on the first match
		} else {
			dst.ApiPieChartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiPieChartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiStackedAreaChartWidget'
	if jsonDict["type"] == "ApiStackedAreaChartWidget" {
		// try to unmarshal JSON data into ApiStackedAreaChartWidget
		err = json.Unmarshal(data, &dst.ApiStackedAreaChartWidget)
		if err == nil {
			return nil // data stored in dst.ApiStackedAreaChartWidget, return on the first match
		} else {
			dst.ApiStackedAreaChartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiStackedAreaChartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiStackedBarchartWidget'
	if jsonDict["type"] == "ApiStackedBarchartWidget" {
		// try to unmarshal JSON data into ApiStackedBarchartWidget
		err = json.Unmarshal(data, &dst.ApiStackedBarchartWidget)
		if err == nil {
			return nil // data stored in dst.ApiStackedBarchartWidget, return on the first match
		} else {
			dst.ApiStackedBarchartWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiStackedBarchartWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiTableWidget'
	if jsonDict["type"] == "ApiTableWidget" {
		// try to unmarshal JSON data into ApiTableWidget
		err = json.Unmarshal(data, &dst.ApiTableWidget)
		if err == nil {
			return nil // data stored in dst.ApiTableWidget, return on the first match
		} else {
			dst.ApiTableWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiTableWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiTestTableWidget'
	if jsonDict["type"] == "ApiTestTableWidget" {
		// try to unmarshal JSON data into ApiTestTableWidget
		err = json.Unmarshal(data, &dst.ApiTestTableWidget)
		if err == nil {
			return nil // data stored in dst.ApiTestTableWidget, return on the first match
		} else {
			dst.ApiTestTableWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiTestTableWidget: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ApiTimeseriesWidget'
	if jsonDict["type"] == "ApiTimeseriesWidget" {
		// try to unmarshal JSON data into ApiTimeseriesWidget
		err = json.Unmarshal(data, &dst.ApiTimeseriesWidget)
		if err == nil {
			return nil // data stored in dst.ApiTimeseriesWidget, return on the first match
		} else {
			dst.ApiTimeseriesWidget = nil
			return fmt.Errorf("failed to unmarshal ApiWidget as ApiTimeseriesWidget: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiWidget) MarshalJSON() ([]byte, error) {
	if src.ApiAgentStatusWidget != nil {
		return json.Marshal(&src.ApiAgentStatusWidget)
	}

	if src.ApiAlertListWidget != nil {
		return json.Marshal(&src.ApiAlertListWidget)
	}

	if src.ApiBoxAndWhiskersWidget != nil {
		return json.Marshal(&src.ApiBoxAndWhiskersWidget)
	}

	if src.ApiColorGridWidget != nil {
		return json.Marshal(&src.ApiColorGridWidget)
	}

	if src.ApiGeoMapWidget != nil {
		return json.Marshal(&src.ApiGeoMapWidget)
	}

	if src.ApiGroupedBarchartWidget != nil {
		return json.Marshal(&src.ApiGroupedBarchartWidget)
	}

	if src.ApiMultiMetricTableWidget != nil {
		return json.Marshal(&src.ApiMultiMetricTableWidget)
	}

	if src.ApiNumbersCardWidget != nil {
		return json.Marshal(&src.ApiNumbersCardWidget)
	}

	if src.ApiPieChartWidget != nil {
		return json.Marshal(&src.ApiPieChartWidget)
	}

	if src.ApiStackedAreaChartWidget != nil {
		return json.Marshal(&src.ApiStackedAreaChartWidget)
	}

	if src.ApiStackedBarchartWidget != nil {
		return json.Marshal(&src.ApiStackedBarchartWidget)
	}

	if src.ApiTableWidget != nil {
		return json.Marshal(&src.ApiTableWidget)
	}

	if src.ApiTestTableWidget != nil {
		return json.Marshal(&src.ApiTestTableWidget)
	}

	if src.ApiTimeseriesWidget != nil {
		return json.Marshal(&src.ApiTimeseriesWidget)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiWidget) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApiAgentStatusWidget != nil {
		return obj.ApiAgentStatusWidget
	}

	if obj.ApiAlertListWidget != nil {
		return obj.ApiAlertListWidget
	}

	if obj.ApiBoxAndWhiskersWidget != nil {
		return obj.ApiBoxAndWhiskersWidget
	}

	if obj.ApiColorGridWidget != nil {
		return obj.ApiColorGridWidget
	}

	if obj.ApiGeoMapWidget != nil {
		return obj.ApiGeoMapWidget
	}

	if obj.ApiGroupedBarchartWidget != nil {
		return obj.ApiGroupedBarchartWidget
	}

	if obj.ApiMultiMetricTableWidget != nil {
		return obj.ApiMultiMetricTableWidget
	}

	if obj.ApiNumbersCardWidget != nil {
		return obj.ApiNumbersCardWidget
	}

	if obj.ApiPieChartWidget != nil {
		return obj.ApiPieChartWidget
	}

	if obj.ApiStackedAreaChartWidget != nil {
		return obj.ApiStackedAreaChartWidget
	}

	if obj.ApiStackedBarchartWidget != nil {
		return obj.ApiStackedBarchartWidget
	}

	if obj.ApiTableWidget != nil {
		return obj.ApiTableWidget
	}

	if obj.ApiTestTableWidget != nil {
		return obj.ApiTestTableWidget
	}

	if obj.ApiTimeseriesWidget != nil {
		return obj.ApiTimeseriesWidget
	}

	// all schemas are nil
	return nil
}

type NullableApiWidget struct {
	value *ApiWidget
	isSet bool
}

func (v NullableApiWidget) Get() *ApiWidget {
	return v.value
}

func (v *NullableApiWidget) Set(val *ApiWidget) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWidget) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWidget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWidget(val *ApiWidget) *NullableApiWidget {
	return &NullableApiWidget{value: val, isSet: true}
}

func (v NullableApiWidget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWidget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


