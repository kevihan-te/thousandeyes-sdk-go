/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// LegacyAgentWidgetShow Ownership of the agent.
type LegacyAgentWidgetShow string

// List of LegacyAgentWidgetShow
const (
	LEGACYAGENTWIDGETSHOW_OWNED_AGENTS LegacyAgentWidgetShow = "Owned Agents"
	LEGACYAGENTWIDGETSHOW_ALL_ASSIGNED_AGENTS LegacyAgentWidgetShow = "All Assigned Agents"
)

// All allowed values of LegacyAgentWidgetShow enum
var AllowedLegacyAgentWidgetShowEnumValues = []LegacyAgentWidgetShow{
	"Owned Agents",
	"All Assigned Agents",
}

func (v *LegacyAgentWidgetShow) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LegacyAgentWidgetShow(value)
	for _, existing := range AllowedLegacyAgentWidgetShowEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LegacyAgentWidgetShow", value)
}

// NewLegacyAgentWidgetShowFromValue returns a pointer to a valid LegacyAgentWidgetShow
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLegacyAgentWidgetShowFromValue(v string) (*LegacyAgentWidgetShow, error) {
	ev := LegacyAgentWidgetShow(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LegacyAgentWidgetShow: valid values are %v", v, AllowedLegacyAgentWidgetShowEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LegacyAgentWidgetShow) IsValid() bool {
	for _, existing := range AllowedLegacyAgentWidgetShowEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LegacyAgentWidgetShow value
func (v LegacyAgentWidgetShow) Ptr() *LegacyAgentWidgetShow {
	return &v
}

type NullableLegacyAgentWidgetShow struct {
	value *LegacyAgentWidgetShow
	isSet bool
}

func (v NullableLegacyAgentWidgetShow) Get() *LegacyAgentWidgetShow {
	return v.value
}

func (v *NullableLegacyAgentWidgetShow) Set(val *LegacyAgentWidgetShow) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyAgentWidgetShow) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyAgentWidgetShow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyAgentWidgetShow(val *LegacyAgentWidgetShow) *NullableLegacyAgentWidgetShow {
	return &NullableLegacyAgentWidgetShow{value: val, isSet: true}
}

func (v NullableLegacyAgentWidgetShow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyAgentWidgetShow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

