/*
Dashboards API

Manage ThousandEyes Dashboards.

API version: 7.0.37
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dashboards

import (
	"encoding/json"
	"fmt"
)

// AswRepeatUnit the model 'AswRepeatUnit'
type AswRepeatUnit string

// List of AswRepeatUnit
const (
	ASWREPEATUNIT_DAY AswRepeatUnit = "day"
	ASWREPEATUNIT_WEEK AswRepeatUnit = "week"
	ASWREPEATUNIT_MONTH AswRepeatUnit = "month"
)

// All allowed values of AswRepeatUnit enum
var AllowedAswRepeatUnitEnumValues = []AswRepeatUnit{
	"day",
	"week",
	"month",
}

func (v *AswRepeatUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AswRepeatUnit(value)
	for _, existing := range AllowedAswRepeatUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AswRepeatUnit", value)
}

// NewAswRepeatUnitFromValue returns a pointer to a valid AswRepeatUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAswRepeatUnitFromValue(v string) (*AswRepeatUnit, error) {
	ev := AswRepeatUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AswRepeatUnit: valid values are %v", v, AllowedAswRepeatUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AswRepeatUnit) IsValid() bool {
	for _, existing := range AllowedAswRepeatUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AswRepeatUnit value
func (v AswRepeatUnit) Ptr() *AswRepeatUnit {
	return &v
}

type NullableAswRepeatUnit struct {
	value *AswRepeatUnit
	isSet bool
}

func (v NullableAswRepeatUnit) Get() *AswRepeatUnit {
	return v.value
}

func (v *NullableAswRepeatUnit) Set(val *AswRepeatUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableAswRepeatUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableAswRepeatUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAswRepeatUnit(val *AswRepeatUnit) *NullableAswRepeatUnit {
	return &NullableAswRepeatUnit{value: val, isSet: true}
}

func (v NullableAswRepeatUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAswRepeatUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

